/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~cashier_dist_cashier_js_cashier-store_js_77e8332f"],{

/***/ "../../cashier/dist/cashier/js/cashier-store.js":
/*!******************************************************!*\
  !*** ../../cashier/dist/cashier/js/cashier-store.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/lib/mobx.module.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Stores/Cashier/cashier-store.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ CashierStore)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"mobx\\\"\\nvar external_mobx_ = __webpack_require__(\\\"mobx\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Config/on-ramp-providers.js\\n\\n\\nvar createBanxaProvider = function createBanxaProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierBanxaDark',\\n      light: 'IcCashierBanxaLight'\\n    },\\n    name: 'Banxa',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }, {\\n        dark: 'IcCashierBpayDark',\\n        light: 'IcCashierBpayLight'\\n      }, {\\n        dark: 'IcCashierSepaDark',\\n        light: 'IcCashierSepaLight'\\n      }, {\\n        dark: 'IcCashierBlueshyftDark',\\n        light: 'IcCashierBlueshyftLight'\\n      }, {\\n        dark: 'IcCashierFlexepinDark',\\n        light: 'IcCashierFlexepinLight'\\n      }, {\\n        dark: 'IcCashierPayIdDark',\\n        light: 'IcCashierPayIdLight'\\n      }, {\\n        dark: 'IcCashierPoliDark',\\n        light: 'IcCashierPoliLight'\\n      }, {\\n        dark: 'IcCashierApplePay',\\n        light: 'IcCashierApplePay'\\n      }, {\\n        dark: 'IcCashierInteracEtransfer',\\n        light: 'IcCashierInteracEtransfer'\\n      }, {\\n        dark: 'IcCashierIdeal',\\n        light: 'IcCashierIdeal'\\n      }, {\\n        dark: 'IcCashierPostBillPayDark',\\n        light: 'IcCashierPostBillPayLight'\\n      }, {\\n        dark: 'IcCashierSofort',\\n        light: 'IcCashierSofort'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    // None.\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return '';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['*'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['*'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve, reject) {\\n        store.WS.serviceToken({\\n          service_token: 1,\\n          service: 'banxa',\\n          referrer: window.location.href\\n        }).then(function (response) {\\n          if (response.error) {\\n            reject(response.error.message);\\n          } else {\\n            var url = response.service_token.banxa.url;\\n\\n            if (url) {\\n              window.open(url);\\n            } // Resolving empty will/should redirect user.\\n\\n\\n            resolve();\\n          }\\n        });\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\nvar createChangellyProvider = function createChangellyProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierChangellyDark',\\n      light: 'IcCashierChangellyLight'\\n    },\\n    name: 'Changelly',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Your simple access to crypto. Fast and secure way to exchange and purchase cryptocurrencies. 24/7 live chat support.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return 'usd';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['usd', 'eur', 'gbp'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['bch', 'btc', 'etc', 'eth', 'ltc', 'ust'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve) {\\n        var url = new URL('https://widget.changelly.com/?v=3&theme=default');\\n        url.searchParams.append('fromDefault', _this.getDefaultFromCurrency());\\n        var currency = store.root_store.client.currency.toLowerCase();\\n\\n        if (_this.getToCurrencies().includes(currency)) {\\n          var to_currency = currency === 'ust' ? 'usdt' : currency;\\n          url.searchParams.append('to', to_currency);\\n          url.searchParams.append('toDefault', to_currency);\\n        }\\n\\n        url.searchParams.append('amount', 1);\\n        url.searchParams.append('merchant_id', 'iiq3jdt2p44yrfbx');\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: true\\n  };\\n};\\n\\nvar createXanPoolProvider = function createXanPoolProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierXanpoolDark',\\n      light: 'IcCashierXanpoolLight'\\n    },\\n    name: 'XanPool',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Buy cryptocurrencies in an instant. Enjoy easy, quick, and secure exchanges using your local payment methods.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierFpsDark',\\n        light: 'IcCashierFpsLight'\\n      }, {\\n        dark: 'IcCashierAliPayDark',\\n        light: 'IcCashierAliPayLight'\\n      }, {\\n        dark: 'IcCashierGoPayDark',\\n        light: 'IcCashierGoPayLight'\\n      }, {\\n        dark: 'IcCashierMandiriPay',\\n        light: 'IcCashierMandiriPay'\\n      }, {\\n        dark: 'IcCashierInstaPayLight',\\n        light: 'IcCashierInstaPayDark'\\n      }, {\\n        dark: 'IcCashierCebuanaLhuillierDark',\\n        light: 'IcCashierCebuanaLhuillierLight'\\n      }, {\\n        dark: 'IcCashierPayNowDark',\\n        light: 'IcCashierPayNowLight'\\n      }, {\\n        dark: 'IcCashierUpiDark',\\n        light: 'IcCashierUpiLight'\\n      }, {\\n        dark: 'IcCashierPromptPayDark',\\n        light: 'IcCashierPromptPayLight'\\n      }, {\\n        dark: 'IcCashierViettlePay',\\n        light: 'IcCashierViettlePay'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['btc', 'eth', 'ust', 'zil', 'nem'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve) {\\n        var currency = store.root_store.client.currency;\\n        var url = 'https://checkout.xanpool.com/';\\n        url += \\\"?apiKey=db4ec638dff9a68abda1ef6b7638c220\\\";\\n        url += \\\"&redirectUrl=\\\".concat(window.location.href);\\n        url += \\\"&wallet=\\\".concat(store.deposit_address);\\n        url += \\\"&cryptoCurrency=\\\".concat(currency === 'UST' ? 'USDT' : currency);\\n        url += \\\"&transactionType=buy\\\";\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\n/* harmony default export */ const on_ramp_providers = ({\\n  createBanxaProvider: createBanxaProvider,\\n  createChangellyProvider: createChangellyProvider,\\n  createXanPoolProvider: createXanPoolProvider\\n});\\n;// CONCATENATED MODULE: ./_common/utility.js\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\nvar template = function template(string, content) {\\n  var to_replace = content;\\n\\n  if (content && !Array.isArray(content)) {\\n    to_replace = [content];\\n  }\\n\\n  return string.replace(/\\\\[_(\\\\d+)]/g, function (s, index) {\\n    return to_replace[+index - 1];\\n  });\\n};\\n/**\\n * Creates a DOM element and adds any attributes to it.\\n *\\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\\n * @return the created DOM element\\n */\\n\\n\\nvar createElement = function createElement(tag_name) {\\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var el = document.createElement(tag_name);\\n  Object.keys(attributes).forEach(function (attr) {\\n    var value = attributes[attr];\\n\\n    if (attr === 'text') {\\n      el.textContent = value;\\n    } else if (attr === 'html') {\\n      el.html(value);\\n    } else {\\n      el.setAttribute(attr, value);\\n    }\\n  });\\n  return el;\\n};\\n\\nvar static_hash;\\n\\nvar getStaticHash = function getStaticHash() {\\n  static_hash = static_hash || (document.querySelector('script[src*=\\\"main\\\"]').getAttribute('src') || '').split('.')[1];\\n  return static_hash;\\n};\\n\\nvar PromiseClass = function PromiseClass() {\\n  var _this = this;\\n\\n  _classCallCheck(this, PromiseClass);\\n\\n  this.promise = new Promise(function (resolve, reject) {\\n    _this.reject = reject;\\n    _this.resolve = resolve;\\n  });\\n};\\n\\nvar copyToClipboard = function copyToClipboard(text) {\\n  var textField = document.createElement('textarea');\\n  textField.innerText = text;\\n  document.body.appendChild(textField);\\n  textField.select();\\n  document.execCommand('copy');\\n  textField.remove();\\n}; // eu countries to support\\n\\n\\nvar eu_countries = (/* unused pure expression or super */ null && (['it', 'de', 'fr', 'lu', 'gr', 'mf', 'es', 'sk', 'lt', 'nl', 'at', 'bg', 'si', 'cy', 'be', 'ro', 'hr', 'pt', 'pl', 'lv', 'ee', 'cz', 'fi', 'hu', 'dk', 'se', 'ie', 'im', 'gb', 'mt'])); // check if client is from EU\\n\\nvar isEuCountry = function isEuCountry(country) {\\n  return eu_countries.includes(country);\\n}; // check if mlt or dxtrade for account text\\n\\n\\nvar getAccountText = function getAccountText(account) {\\n  var account_text = '';\\n\\n  if (account.is_dxtrade || account.is_mt) {\\n    account_text = account.text;\\n  } else {\\n    account_text = getCurrencyDisplayCode(account.text);\\n  }\\n\\n  return account_text;\\n};\\n\\n\\n;// CONCATENATED MODULE: ./Utils/Validator/errors.js\\nfunction errors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar Errors = /*#__PURE__*/function () {\\n  function Errors() {\\n    errors_classCallCheck(this, Errors);\\n\\n    this.errors = {};\\n  }\\n\\n  _createClass(Errors, [{\\n    key: \\\"add\\\",\\n    value: function add(attribute, message) {\\n      if (!this.has(attribute)) {\\n        this.errors[attribute] = [];\\n      }\\n\\n      if (this.errors[attribute].indexOf(message) === -1) {\\n        this.errors[attribute].push(message);\\n      }\\n    }\\n  }, {\\n    key: \\\"all\\\",\\n    value: function all() {\\n      return this.errors;\\n    }\\n  }, {\\n    key: \\\"first\\\",\\n    value: function first(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute][0];\\n      }\\n\\n      return null;\\n    }\\n  }, {\\n    key: \\\"get\\\",\\n    value: function get(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute];\\n      }\\n\\n      return [];\\n    }\\n  }, {\\n    key: \\\"has\\\",\\n    value: function has(attribute) {\\n      return Object.prototype.hasOwnProperty.call(this.errors, attribute);\\n    }\\n  }]);\\n\\n  return Errors;\\n}();\\n\\n/* harmony default export */ const errors = (Errors);\\n;// CONCATENATED MODULE: ./Utils/Validator/validator.js\\nfunction validator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction validator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction validator_createClass(Constructor, protoProps, staticProps) { if (protoProps) validator_defineProperties(Constructor.prototype, protoProps); if (staticProps) validator_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n\\n\\n\\n\\nvar Validator = /*#__PURE__*/function () {\\n  function Validator(input, rules) {\\n    var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    validator_classCallCheck(this, Validator);\\n\\n    this.input = input;\\n    this.rules = rules;\\n    this.store = store;\\n    this.errors = new errors();\\n    this.error_count = 0;\\n  }\\n  /**\\n   * Add failure and error message for given rule\\n   *\\n   * @param {string} attribute\\n   * @param {object} rule\\n   */\\n\\n\\n  validator_createClass(Validator, [{\\n    key: \\\"addFailure\\\",\\n    value: function addFailure(attribute, rule, error_message) {\\n      var message = error_message || rule.options.message || (0,shared_.getPreBuildDVRs)()[rule.name].message();\\n\\n      if (rule.name === 'length') {\\n        message = template(message, [rule.options.min === rule.options.max ? rule.options.min : \\\"\\\".concat(rule.options.min, \\\"-\\\").concat(rule.options.max)]);\\n      } else if (rule.name === 'min') {\\n        message = template(message, [rule.options.min]);\\n      } else if (rule.name === 'not_equal') {\\n        message = template(message, [rule.options.name1, rule.options.name2]);\\n      }\\n\\n      this.errors.add(attribute, message);\\n      this.error_count++;\\n    }\\n    /**\\n     * Runs validator\\n     *\\n     * @return {boolean} Whether it passes; true = passes, false = fails\\n     */\\n\\n  }, {\\n    key: \\\"check\\\",\\n    value: function check() {\\n      var _this = this;\\n\\n      Object.keys(this.input).forEach(function (attribute) {\\n        if (!Object.prototype.hasOwnProperty.call(_this.rules, attribute)) {\\n          return;\\n        }\\n\\n        _this.rules[attribute].forEach(function (rule) {\\n          var ruleObject = Validator.getRuleObject(rule);\\n\\n          if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\\n            return;\\n          }\\n\\n          if (ruleObject.options.condition && !ruleObject.options.condition(_this.store)) {\\n            return;\\n          }\\n\\n          if (_this.input[attribute] === '' && ruleObject.name !== 'req') {\\n            return;\\n          }\\n\\n          var is_valid, error_message;\\n\\n          if (ruleObject.name === 'number') {\\n            var _ruleObject$validator = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input),\\n                is_ok = _ruleObject$validator.is_ok,\\n                message = _ruleObject$validator.message;\\n\\n            is_valid = is_ok;\\n            error_message = message;\\n          } else {\\n            is_valid = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input);\\n          }\\n\\n          if (!is_valid) {\\n            _this.addFailure(attribute, ruleObject, error_message);\\n          }\\n        });\\n      });\\n      return !this.error_count;\\n    }\\n    /**\\n     * Determine if validation passes\\n     *\\n     * @return {boolean}\\n     */\\n\\n  }, {\\n    key: \\\"isPassed\\\",\\n    value: function isPassed() {\\n      return this.check();\\n    }\\n    /**\\n     * Converts the rule array to an object\\n     *\\n     * @param {array} rule\\n     * @return {object}\\n     */\\n\\n  }], [{\\n    key: \\\"getRuleObject\\\",\\n    value: function getRuleObject(rule) {\\n      var is_rule_string = typeof rule === 'string';\\n      var rule_object = {\\n        name: is_rule_string ? rule : rule[0],\\n        options: is_rule_string ? {} : rule[1] || {}\\n      };\\n      rule_object.validator = rule_object.name === 'custom' ? rule[1].func : (0,shared_.getPreBuildDVRs)()[rule_object.name].func;\\n      return rule_object;\\n    }\\n  }]);\\n\\n  return Validator;\\n}();\\n\\n/* harmony default export */ const Validator_validator = (Validator);\\n;// CONCATENATED MODULE: ./Utils/Validator/index.js\\n\\n\\n;// CONCATENATED MODULE: ./Stores/base-store.js\\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _descriptor, _descriptor2, _descriptor3, _class2, _temp;\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction base_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction base_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction base_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n/**\\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\\n *  1. Creating snapshot object from the store.\\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\\n */\\n\\nvar BaseStore = (_dec = external_mobx_.action.bound, _dec2 = external_mobx_.action.bound, _dec3 = external_mobx_.action.bound, _dec4 = external_mobx_.action.bound, _dec5 = external_mobx_.action.bound, _dec6 = external_mobx_.action.bound, _dec7 = external_mobx_.action.bound, _dec8 = external_mobx_.action.bound, _dec9 = external_mobx_.action.bound, _dec10 = external_mobx_.action.bound, _dec11 = external_mobx_.action.bound, _dec12 = external_mobx_.action.bound, _dec13 = external_mobx_.action.bound, _dec14 = external_mobx_.action.bound, _dec15 = external_mobx_.action.bound, _dec16 = external_mobx_.action.bound, (_class = (_temp = _class2 = /*#__PURE__*/function () {\\n  /**\\n   * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\\n   */\\n\\n  /**\\n   * Constructor of the base class that gets properties' name of child which should be saved in storages\\n   *\\n   * @param {Object} options - An object that contains the following properties:\\n   *     @property {Object}   root_store - An object that contains the root store of the app.\\n   *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\\n   *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\\n   *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\\n   *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\\n   */\\n  function BaseStore() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    base_store_classCallCheck(this, BaseStore);\\n\\n    _initializerDefineProperty(this, \\\"validation_errors\\\", _descriptor, this);\\n\\n    _initializerDefineProperty(this, \\\"validation_rules\\\", _descriptor2, this);\\n\\n    this.preSwitchAccountDisposer = null;\\n    this.pre_switch_account_listener = null;\\n    this.switchAccountDisposer = null;\\n    this.switch_account_listener = null;\\n    this.logoutDisposer = null;\\n    this.logout_listener = null;\\n    this.clientInitDisposer = null;\\n    this.client_init_listener = null;\\n    this.networkStatusChangeDisposer = null;\\n    this.network_status_change_listener = null;\\n    this.themeChangeDisposer = null;\\n    this.theme_change_listener = null;\\n    this.realAccountSignupEndedDisposer = null;\\n    this.real_account_signup_ended_listener = null;\\n\\n    _initializerDefineProperty(this, \\\"partial_fetch_time\\\", _descriptor3, this);\\n\\n    var root_store = options.root_store,\\n        local_storage_properties = options.local_storage_properties,\\n        session_storage_properties = options.session_storage_properties,\\n        validation_rules = options.validation_rules,\\n        store_name = options.store_name;\\n    Object.defineProperty(this, 'root_store', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'local_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'session_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    var has_local_or_session_storage = local_storage_properties && local_storage_properties.length || session_storage_properties && session_storage_properties.length;\\n\\n    if (has_local_or_session_storage) {\\n      if (!store_name) {\\n        throw new Error('store_name is required for local/session storage');\\n      }\\n\\n      Object.defineProperty(this, 'store_name', {\\n        value: store_name,\\n        enumerable: false,\\n        writable: false\\n      });\\n    }\\n\\n    this.root_store = root_store;\\n    this.local_storage_properties = local_storage_properties || [];\\n    this.session_storage_properties = session_storage_properties || [];\\n    this.setValidationRules(validation_rules);\\n    this.setupReactionForLocalStorage();\\n    this.setupReactionForSessionStorage();\\n    this.retrieveFromStorage();\\n  }\\n  /**\\n   * Returns an snapshot of the current store\\n   *\\n   * @param {String[]} properties - A list of properties' names that should be in the snapshot.\\n   *\\n   * @return {Object} Returns a cloned object of the store.\\n   */\\n\\n\\n  base_store_createClass(BaseStore, [{\\n    key: \\\"getSnapshot\\\",\\n    value: function getSnapshot(properties) {\\n      var snapshot = (0,external_mobx_.toJS)(this);\\n\\n      if (!(0,shared_.isEmptyObject)(this.root_store)) {\\n        snapshot.root_store = this.root_store;\\n      }\\n\\n      if (properties && properties.length) {\\n        snapshot = properties.reduce(function (result, p) {\\n          return Object.assign(result, _defineProperty({}, p, snapshot[p]));\\n        }, {});\\n      }\\n\\n      return snapshot;\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForLocalStorage\\\",\\n    value: function setupReactionForLocalStorage() {\\n      var _this = this;\\n\\n      if (this.local_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this.local_storage_properties.map(function (i) {\\n            return _this[i];\\n          });\\n        }, function () {\\n          return _this.saveToStorage(_this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForSessionStorage\\\",\\n    value: function setupReactionForSessionStorage() {\\n      var _this2 = this;\\n\\n      if (this.session_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this2.session_storage_properties.map(function (i) {\\n            return _this2[i];\\n          });\\n        }, function () {\\n          return _this2.saveToStorage(_this2.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\\n     *\\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"saveToStorage\\\",\\n    value: function saveToStorage(properties, storage) {\\n      var snapshot = JSON.stringify(this.getSnapshot(properties), function (key, value) {\\n        if (value !== null) return value;\\n        return undefined;\\n      });\\n\\n      if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\\n        localStorage.setItem(this.store_name, snapshot);\\n      } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\\n        sessionStorage.setItem(this.store_name, snapshot);\\n      }\\n    }\\n    /**\\n     * Retrieves saved snapshot of the store and assigns to the current instance.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"retrieveFromStorage\\\",\\n    value: function retrieveFromStorage() {\\n      var _this3 = this;\\n\\n      var local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\\n      var session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\\n\\n      var snapshot = _objectSpread(_objectSpread({}, local_storage_snapshot), session_storage_snapshot);\\n\\n      Object.keys(snapshot).forEach(function (k) {\\n        return _this3[k] = snapshot[k];\\n      });\\n    }\\n    /**\\n     * Sets validation error messages for an observable property of the store\\n     *\\n     * @param {String} propertyName - The observable property's name\\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationErrorMessages\\\",\\n    value: function setValidationErrorMessages(propertyName, messages) {\\n      var _this4 = this;\\n\\n      var is_different = function is_different() {\\n        return !!_this4.validation_errors[propertyName].filter(function (x) {\\n          return !messages.includes(x);\\n        }).concat(messages.filter(function (x) {\\n          return !_this4.validation_errors[propertyName].includes(x);\\n        })).length;\\n      };\\n\\n      if (!this.validation_errors[propertyName] || is_different()) {\\n        this.validation_errors[propertyName] = messages;\\n      }\\n    }\\n    /**\\n     * Sets validation rules\\n     *\\n     * @param {object} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationRules\\\",\\n    value: function setValidationRules() {\\n      var _this5 = this;\\n\\n      var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      Object.keys(rules).forEach(function (key) {\\n        _this5.addRule(key, rules[key]);\\n      });\\n    }\\n    /**\\n     * Adds rules to the particular property\\n     *\\n     * @param {String} property\\n     * @param {String} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"addRule\\\",\\n    value: function addRule(property, rules) {\\n      var _this6 = this;\\n\\n      this.validation_rules[property] = rules;\\n      (0,external_mobx_.intercept)(this, property, function (change) {\\n        _this6.validateProperty(property, change.newValue);\\n\\n        return change;\\n      });\\n    }\\n    /**\\n     * Validates a particular property of the store\\n     *\\n     * @param {String} property - The name of the property in the store\\n     * @param {object} value    - The value of the property, it can be undefined.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateProperty\\\",\\n    value: function validateProperty(property, value) {\\n      var _this7 = this;\\n\\n      var trigger = this.validation_rules[property].trigger;\\n\\n      var inputs = _defineProperty({}, property, value !== undefined ? value : this[property]);\\n\\n      var validation_rules = _defineProperty({}, property, this.validation_rules[property].rules || []);\\n\\n      if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\\n        inputs[trigger] = this[trigger];\\n        validation_rules[trigger] = this.validation_rules[trigger].rules || [];\\n      }\\n\\n      var validator = new Validator_validator(inputs, validation_rules, this);\\n      validator.isPassed();\\n      Object.keys(inputs).forEach(function (key) {\\n        _this7.setValidationErrorMessages(key, validator.errors.get(key));\\n      });\\n    }\\n    /**\\n     * Validates all properties which validation rule has been set for.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateAllProperties\\\",\\n    value: function validateAllProperties() {\\n      var _this8 = this;\\n\\n      var validation_rules = Object.keys(this.validation_rules);\\n      var validation_errors = Object.keys(this.validation_errors);\\n      validation_rules.forEach(function (p) {\\n        _this8.validateProperty(p, _this8[p]);\\n      }); // Remove keys that are present in error, but not in rules:\\n\\n      validation_errors.forEach(function (error) {\\n        if (!validation_rules.includes(error)) {\\n          delete _this8.validation_errors[error];\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onSwitchAccount\\\",\\n    value: function onSwitchAccount(listener) {\\n      var _this9 = this;\\n\\n      if (listener) {\\n        this.switch_account_listener = listener;\\n        this.switchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this9.root_store.client.switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this9.switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this9.root_store.client.switchEndSignal();\\n\\n                _this9.onSwitchAccount(_this9.switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Switching account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onPreSwitchAccount\\\",\\n    value: function onPreSwitchAccount(listener) {\\n      var _this10 = this;\\n\\n      if (listener) {\\n        this.pre_switch_account_listener = listener;\\n        this.preSwitchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this10.root_store.client.pre_switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this10.pre_switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this10.root_store.client.setPreSwitchAccount(false);\\n\\n                _this10.onPreSwitchAccount(_this10.pre_switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Pre-switch account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onLogout\\\",\\n    value: function onLogout(listener) {\\n      var _this11 = this;\\n\\n      this.logoutDisposer = (0,external_mobx_.when)(function () {\\n        return _this11.root_store.client.has_logged_out;\\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.prev = 0;\\n                result = _this11.logout_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this11.root_store.client.setLogout(false);\\n\\n                  _this11.onLogout(_this11.logout_listener);\\n                });\\n                _context.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Logout listeners are required to return a promise.');\\n\\n              case 7:\\n                _context.next = 12;\\n                break;\\n\\n              case 9:\\n                _context.prev = 9;\\n                _context.t0 = _context[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, null, [[0, 9]]);\\n      })));\\n      this.logout_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onClientInit\\\",\\n    value: function onClientInit(listener) {\\n      var _this12 = this;\\n\\n      this.clientInitDisposer = (0,external_mobx_.when)(function () {\\n        return _this12.root_store.client.initialized_broadcast;\\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.prev = 0;\\n                result = _this12.client_init_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context2.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this12.root_store.client.setInitialized(false);\\n\\n                  _this12.onClientInit(_this12.client_init_listener);\\n                });\\n                _context2.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Client init listeners are required to return a promise.');\\n\\n              case 7:\\n                _context2.next = 12;\\n                break;\\n\\n              case 9:\\n                _context2.prev = 9;\\n                _context2.t0 = _context2[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context2.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, null, [[0, 9]]);\\n      })));\\n      this.client_init_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onNetworkStatusChange\\\",\\n    value: function onNetworkStatusChange(listener) {\\n      var _this13 = this;\\n\\n      this.networkStatusChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this13.root_store.common.is_network_online;\\n      }, function (is_online) {\\n        try {\\n          _this13.network_status_change_listener(is_online);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.network_status_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onThemeChange\\\",\\n    value: function onThemeChange(listener) {\\n      var _this14 = this;\\n\\n      this.themeChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this14.root_store.ui.is_dark_mode_on;\\n      }, function (is_dark_mode_on) {\\n        try {\\n          _this14.theme_change_listener(is_dark_mode_on);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.theme_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onRealAccountSignupEnd\\\",\\n    value: function onRealAccountSignupEnd(listener) {\\n      var _this15 = this;\\n\\n      this.realAccountSignupEndedDisposer = (0,external_mobx_.when)(function () {\\n        return _this15.root_store.ui.has_real_account_signup_ended;\\n      }, function () {\\n        try {\\n          var result = _this15.real_account_signup_ended_listener();\\n\\n          if (result && result.then && typeof result.then === 'function') {\\n            result.then(function () {\\n              _this15.root_store.ui.setRealAccountSignupEnd(false);\\n\\n              _this15.onRealAccountSignupEnd(_this15.real_account_signup_ended_listener);\\n            });\\n          } else {\\n            throw new Error('Real account signup listeners are required to return a promise.');\\n          }\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.real_account_signup_ended_listener = listener;\\n    }\\n  }, {\\n    key: \\\"disposePreSwitchAccount\\\",\\n    value: function disposePreSwitchAccount() {\\n      if (typeof this.preSwitchAccountDisposer === 'function') {\\n        this.preSwitchAccountDisposer();\\n      }\\n\\n      this.pre_switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeSwitchAccount\\\",\\n    value: function disposeSwitchAccount() {\\n      if (typeof this.switchAccountDisposer === 'function') {\\n        this.switchAccountDisposer();\\n      }\\n\\n      this.switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeLogout\\\",\\n    value: function disposeLogout() {\\n      if (typeof this.logoutDisposer === 'function') {\\n        this.logoutDisposer();\\n      }\\n\\n      this.logout_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeClientInit\\\",\\n    value: function disposeClientInit() {\\n      if (typeof this.clientInitDisposer === 'function') {\\n        this.clientInitDisposer();\\n      }\\n\\n      this.client_init_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeNetworkStatusChange\\\",\\n    value: function disposeNetworkStatusChange() {\\n      if (typeof this.networkStatusChangeDisposer === 'function') {\\n        this.networkStatusChangeDisposer();\\n      }\\n\\n      this.network_status_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeThemeChange\\\",\\n    value: function disposeThemeChange() {\\n      if (typeof this.themeChangeDisposer === 'function') {\\n        this.themeChangeDisposer();\\n      }\\n\\n      this.theme_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeRealAccountSignupEnd\\\",\\n    value: function disposeRealAccountSignupEnd() {\\n      if (typeof this.realAccountSignupEndedDisposer === 'function') {\\n        this.realAccountSignupEndedDisposer();\\n      }\\n\\n      this.real_account_signup_ended_listener = null;\\n    }\\n  }, {\\n    key: \\\"onUnmount\\\",\\n    value: function onUnmount() {\\n      this.disposePreSwitchAccount();\\n      this.disposeSwitchAccount();\\n      this.disposeLogout();\\n      this.disposeClientInit();\\n      this.disposeNetworkStatusChange();\\n      this.disposeThemeChange();\\n      this.disposeRealAccountSignupEnd();\\n    }\\n  }, {\\n    key: \\\"assertHasValidCache\\\",\\n    value: function assertHasValidCache(loginid) {\\n      // account was changed when this was unmounted.\\n      if (this.root_store.client.loginid !== loginid) {\\n        for (var _len = arguments.length, reactions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n          reactions[_key - 1] = arguments[_key];\\n        }\\n\\n        reactions.forEach(function (act) {\\n          return act();\\n        });\\n        this.partial_fetch_time = false;\\n      }\\n    }\\n  }]);\\n\\n  return BaseStore;\\n}(), _class2.STORAGES = Object.freeze({\\n  LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\\n  SESSION_STORAGE: Symbol('SESSION_STORAGE')\\n}), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \\\"validation_errors\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \\\"validation_rules\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \\\"partial_fetch_time\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _applyDecoratedDescriptor(_class.prototype, \\\"retrieveFromStorage\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"retrieveFromStorage\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"setValidationErrorMessages\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"setValidationErrorMessages\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"setValidationRules\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"setValidationRules\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"addRule\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"addRule\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"validateProperty\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"validateProperty\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"validateAllProperties\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(_class.prototype, \\\"validateAllProperties\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onSwitchAccount\\\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onPreSwitchAccount\\\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onPreSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onLogout\\\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onLogout\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onClientInit\\\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onClientInit\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onNetworkStatusChange\\\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onNetworkStatusChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onThemeChange\\\", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onThemeChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onRealAccountSignupEnd\\\", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onRealAccountSignupEnd\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposePreSwitchAccount\\\", [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposePreSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeSwitchAccount\\\", [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeSwitchAccount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeLogout\\\", [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeLogout\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeClientInit\\\", [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeClientInit\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeNetworkStatusChange\\\", [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeNetworkStatusChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeThemeChange\\\", [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeThemeChange\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"disposeRealAccountSignupEnd\\\", [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, \\\"disposeRealAccountSignupEnd\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onUnmount\\\", [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onUnmount\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"assertHasValidCache\\\", [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, \\\"assertHasValidCache\\\"), _class.prototype)), _class));\\n\\n;// CONCATENATED MODULE: ./Stores/Cashier/on-ramp-store.js\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nvar on_ramp_store_dec, on_ramp_store_dec2, on_ramp_store_dec3, on_ramp_store_dec4, on_ramp_store_dec5, on_ramp_store_dec6, on_ramp_store_dec7, on_ramp_store_dec8, on_ramp_store_dec9, on_ramp_store_dec10, on_ramp_store_dec11, on_ramp_store_dec12, on_ramp_store_dec13, on_ramp_store_dec14, on_ramp_store_dec15, on_ramp_store_dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, on_ramp_store_class, on_ramp_store_descriptor, on_ramp_store_descriptor2, on_ramp_store_descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;\\n\\nfunction on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction on_ramp_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction on_ramp_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction on_ramp_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction on_ramp_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction on_ramp_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) on_ramp_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) on_ramp_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction on_ramp_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction on_ramp_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar OnRampStore = (on_ramp_store_dec = external_mobx_.observable.shallow, on_ramp_store_dec2 = external_mobx_.observable.ref, on_ramp_store_dec3 = external_mobx_.action.bound, on_ramp_store_dec4 = external_mobx_.action.bound, on_ramp_store_dec5 = external_mobx_.action.bound, on_ramp_store_dec6 = external_mobx_.action.bound, on_ramp_store_dec7 = external_mobx_.action.bound, on_ramp_store_dec8 = external_mobx_.action.bound, on_ramp_store_dec9 = external_mobx_.action.bound, on_ramp_store_dec10 = external_mobx_.action.bound, on_ramp_store_dec11 = external_mobx_.action.bound, on_ramp_store_dec12 = external_mobx_.action.bound, on_ramp_store_dec13 = external_mobx_.action.bound, on_ramp_store_dec14 = external_mobx_.action.bound, on_ramp_store_dec15 = external_mobx_.action.bound, on_ramp_store_dec16 = external_mobx_.action.bound, _dec17 = external_mobx_.action.bound, _dec18 = external_mobx_.action.bound, _dec19 = external_mobx_.action.bound, _dec20 = external_mobx_.action.bound, _dec21 = external_mobx_.action.bound, _dec22 = external_mobx_.action.bound, (on_ramp_store_class = /*#__PURE__*/function (_BaseStore) {\\n  _inherits(OnRampStore, _BaseStore);\\n\\n  var _super = _createSuper(OnRampStore);\\n\\n  function OnRampStore(_ref) {\\n    var _this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    on_ramp_store_classCallCheck(this, OnRampStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"api_error\\\", on_ramp_store_descriptor, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"deposit_address\\\", on_ramp_store_descriptor2, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_loading\\\", on_ramp_store_descriptor3, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_popover_open\\\", _descriptor4, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_onramp_modal_open\\\", _descriptor5, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_requesting_widget_html\\\", _descriptor6, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"onramp_providers\\\", _descriptor7, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"selected_provider\\\", _descriptor8, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"should_show_widget\\\", _descriptor9, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_error\\\", _descriptor10, _assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_html\\\", _descriptor11, _assertThisInitialized(_this));\\n\\n    _this.deposit_address_ref = null;\\n    _this.WS = WS;\\n\\n    _this.onClientInit( /*#__PURE__*/on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n      return regeneratorRuntime.wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              _this.setOnrampProviders([on_ramp_providers.createChangellyProvider(_assertThisInitialized(_this)), on_ramp_providers.createXanPoolProvider(_assertThisInitialized(_this)), on_ramp_providers.createBanxaProvider(_assertThisInitialized(_this))]);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee);\\n    })));\\n\\n    return _this;\\n  }\\n\\n  on_ramp_store_createClass(OnRampStore, [{\\n    key: \\\"is_onramp_tab_visible\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return client.is_virtual === false && (0,shared_.isCryptocurrency)(client.currency) && this.filtered_onramp_providers.length > 0;\\n    }\\n  }, {\\n    key: \\\"filtered_onramp_providers\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return this.onramp_providers // Ensure provider supports this user's account currency.\\n      .filter(function (provider) {\\n        var to_currencies = provider.getToCurrencies();\\n        return to_currencies.includes('*') || to_currencies.includes(client.currency.toLowerCase());\\n      }) // Ensure provider supports this user's residency.\\n      .filter(function (provider) {\\n        var allowed_residencies = provider.getAllowedResidencies();\\n        return allowed_residencies.includes('*') || allowed_residencies.includes(client.residence);\\n      });\\n    }\\n  }, {\\n    key: \\\"onramp_popup_modal_title\\\",\\n    get: function get() {\\n      if (this.should_show_widget) {\\n        return (0,translations_.localize)('Payment channel');\\n      } else if (this.selected_provider) {\\n        if (this.should_show_dialog) {\\n          return (0,translations_.localize)('Our server cannot retrieve an address.');\\n        }\\n\\n        return ' '; // Empty string to render header + close icon.\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"should_show_dialog\\\",\\n    get: function get() {\\n      return this.api_error;\\n    }\\n  }, {\\n    key: \\\"onMountOnramp\\\",\\n    value: function onMountOnramp() {\\n      var _this2 = this;\\n\\n      this.disposeThirdPartyJsReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.selected_provider;\\n      }, /*#__PURE__*/function () {\\n        var _ref3 = on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(provider) {\\n          var dependencies, _yield$import, loadjs, script_name;\\n\\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n            while (1) {\\n              switch (_context2.prev = _context2.next) {\\n                case 0:\\n                  if (provider) {\\n                    _context2.next = 2;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 2:\\n                  dependencies = provider.getScriptDependencies();\\n\\n                  if (!(dependencies.length === 0)) {\\n                    _context2.next = 5;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 5:\\n                  _context2.next = 7;\\n                  return __webpack_require__.e(/* import() | loadjs */ \\\"loadjs\\\").then(__webpack_require__.t.bind(__webpack_require__, \\\"../../../node_modules/loadjs/dist/loadjs.umd.js\\\", 23));\\n\\n                case 7:\\n                  _yield$import = _context2.sent;\\n                  loadjs = _yield$import[\\\"default\\\"];\\n                  script_name = \\\"\\\".concat((0,shared_.getKebabCase)(provider.name), \\\"-onramp\\\");\\n\\n                  if (!loadjs.isDefined(script_name)) {\\n                    loadjs(dependencies, script_name, {\\n                      error: function error() {\\n                        // eslint-disable-next-line no-console\\n                        console.warn(\\\"Dependencies for onramp provider \\\".concat(provider.name, \\\" could not be loaded.\\\"));\\n\\n                        _this2.setSelectedProvider(null);\\n                      }\\n                    });\\n                  }\\n\\n                case 11:\\n                case \\\"end\\\":\\n                  return _context2.stop();\\n              }\\n            }\\n          }, _callee2);\\n        }));\\n\\n        return function (_x) {\\n          return _ref3.apply(this, arguments);\\n        };\\n      }()); // When \\\"should_show_widget\\\", attempt to fetch \\\"selected_provider\\\"'s \\\"widget_html\\\".\\n\\n      this.disposeGetWidgetHtmlReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.should_show_widget;\\n      }, function (should_show_widget) {\\n        if (should_show_widget) {\\n          if (_this2.is_requesting_widget_html) {\\n            return;\\n          }\\n\\n          _this2.setIsRequestingWidgetHtml(true);\\n\\n          _this2.selected_provider.getWidgetHtml().then(function (widget_html) {\\n            if (widget_html) {\\n              // Regular providers (iframe/JS embed)\\n              _this2.setWidgetHtml(widget_html);\\n            } else {\\n              // An empty resolve (widget_html) identifies a redirect.\\n              _this2.setShouldShowWidget(false);\\n            }\\n          })[\\\"catch\\\"](function (error) {\\n            _this2.setWidgetError(error);\\n          })[\\\"finally\\\"](function () {\\n            return _this2.setIsRequestingWidgetHtml(false);\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onUnmountOnramp\\\",\\n    value: function onUnmountOnramp() {\\n      if (typeof this.disposeThirdPartyJsReaction === 'function') {\\n        this.disposeThirdPartyJsReaction();\\n      }\\n\\n      if (typeof this.disposeGetWidgetHtmlReaction === 'function') {\\n        this.disposeGetWidgetHtmlReaction();\\n      }\\n    }\\n  }, {\\n    key: \\\"onClickCopyDepositAddress\\\",\\n    value: function onClickCopyDepositAddress() {\\n      var _this3 = this;\\n\\n      var range = document.createRange();\\n      range.selectNodeContents(this.deposit_address_ref);\\n      var selections = window.getSelection();\\n      selections.removeAllRanges();\\n      selections.addRange(range);\\n      navigator.clipboard.writeText(this.deposit_address).then(function () {\\n        _this3.setIsDepositAddressPopoverOpen(true);\\n\\n        setTimeout(function () {\\n          return _this3.setIsDepositAddressPopoverOpen(false);\\n        }, 500);\\n      });\\n    }\\n  }, {\\n    key: \\\"onClickDisclaimerContinue\\\",\\n    value: function onClickDisclaimerContinue() {\\n      this.setShouldShowWidget(true);\\n    }\\n  }, {\\n    key: \\\"onClickGoToDepositPage\\\",\\n    value: function onClickGoToDepositPage() {\\n      this.pollApiForDepositAddress(false);\\n      window.open((0,shared_.websiteUrl)() + shared_.routes.cashier_deposit.substring(1));\\n    }\\n  }, {\\n    key: \\\"pollApiForDepositAddress\\\",\\n    value: function pollApiForDepositAddress(should_allow_empty_address) {\\n      var _this4 = this;\\n\\n      // should_allow_empty_address: API returns empty deposit address for legacy accounts\\n      // that have never generated a deposit address. Setting this to \\\"true\\\" will allow\\n      // the user to be redirected to the Deposit page (where an address will be generated).\\n      // Setting this to \\\"false\\\" will start polling the API for this deposit address.\\n      this.setIsDepositAddressLoading(true);\\n      this.setApiError(null);\\n      var deposit_address_interval = setInterval(function () {\\n        return getDepositAddressFromApi;\\n      }, 3000);\\n\\n      var getDepositAddressFromApi = function getDepositAddressFromApi() {\\n        _this4.root_store.modules.cashier.WS.authorized.cashier('deposit', {\\n          provider: 'crypto',\\n          type: 'api'\\n        }).then(function (response) {\\n          var should_clear_interval = false;\\n\\n          if (response.error) {\\n            _this4.setApiError(response.error);\\n\\n            should_clear_interval = true;\\n          } else {\\n            var address = response.cashier.deposit.address;\\n\\n            if (address || should_allow_empty_address) {\\n              _this4.setDepositAddress(address);\\n\\n              should_clear_interval = true;\\n            }\\n          }\\n\\n          if (should_clear_interval) {\\n            clearInterval(deposit_address_interval);\\n\\n            _this4.setIsDepositAddressLoading(false);\\n          }\\n        });\\n      };\\n\\n      getDepositAddressFromApi();\\n      setTimeout(function () {\\n        clearInterval(deposit_address_interval);\\n\\n        _this4.setIsDepositAddressLoading(false);\\n      }, 30000);\\n    }\\n  }, {\\n    key: \\\"resetPopup\\\",\\n    value: function resetPopup() {\\n      this.setApiError(null);\\n      this.setDepositAddress(null);\\n      this.setDepositAddressRef(null);\\n      this.setIsDepositAddressLoading(true);\\n      this.setSelectedProvider(null);\\n      this.setShouldShowWidget(false);\\n      this.setWidgetError(null);\\n      this.setWidgetHtml(null);\\n    }\\n  }, {\\n    key: \\\"setApiError\\\",\\n    value: function setApiError(api_error) {\\n      this.api_error = api_error;\\n    }\\n  }, {\\n    key: \\\"setCopyIconRef\\\",\\n    value: function setCopyIconRef(ref) {\\n      this.copy_icon_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setDepositAddress\\\",\\n    value: function setDepositAddress(deposit_address) {\\n      this.deposit_address = deposit_address;\\n    }\\n  }, {\\n    key: \\\"setDepositAddressRef\\\",\\n    value: function setDepositAddressRef(ref) {\\n      this.deposit_address_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressLoading\\\",\\n    value: function setIsDepositAddressLoading(is_loading) {\\n      this.is_deposit_address_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressPopoverOpen\\\",\\n    value: function setIsDepositAddressPopoverOpen(is_open) {\\n      this.is_deposit_address_popover_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsOnRampModalOpen\\\",\\n    value: function setIsOnRampModalOpen(is_open) {\\n      this.is_onramp_modal_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsRequestingWidgetHtml\\\",\\n    value: function setIsRequestingWidgetHtml(is_requesting_widget_html) {\\n      this.is_requesting_widget_html = is_requesting_widget_html;\\n    }\\n  }, {\\n    key: \\\"setSelectedProvider\\\",\\n    value: function setSelectedProvider(provider) {\\n      if (provider) {\\n        this.selected_provider = provider;\\n        this.setIsOnRampModalOpen(true);\\n        this.pollApiForDepositAddress(true);\\n      } else {\\n        this.setIsOnRampModalOpen(false);\\n        this.selected_provider = null;\\n      }\\n    }\\n  }, {\\n    key: \\\"setShouldShowWidget\\\",\\n    value: function setShouldShowWidget(should_show) {\\n      this.should_show_widget = should_show;\\n    }\\n  }, {\\n    key: \\\"setOnrampProviders\\\",\\n    value: function setOnrampProviders(onramp_providers) {\\n      this.onramp_providers = onramp_providers.slice();\\n    }\\n  }, {\\n    key: \\\"setWidgetError\\\",\\n    value: function setWidgetError(widget_error) {\\n      this.widget_error = widget_error;\\n    }\\n  }, {\\n    key: \\\"setWidgetHtml\\\",\\n    value: function setWidgetHtml(widget_html) {\\n      this.widget_html = widget_html;\\n    }\\n  }]);\\n\\n  return OnRampStore;\\n}(BaseStore), (on_ramp_store_descriptor = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"api_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor2 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"deposit_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor3 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor4 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_popover_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor5 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_modal_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor6 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_requesting_widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor7 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_providers\\\", [on_ramp_store_dec], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor8 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"selected_provider\\\", [on_ramp_store_dec2], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor9 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_widget\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor10 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor11 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\", [on_ramp_store_dec3], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\", [on_ramp_store_dec4], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\", [on_ramp_store_dec5], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\", [on_ramp_store_dec6], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\", [on_ramp_store_dec7], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\", [on_ramp_store_dec8], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\", [on_ramp_store_dec9], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\", [on_ramp_store_dec10], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\", [on_ramp_store_dec11], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\", [on_ramp_store_dec12], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\", [on_ramp_store_dec13], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\", [on_ramp_store_dec14], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\", [on_ramp_store_dec15], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\", [on_ramp_store_dec16], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\", [_dec17], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\", [_dec18], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\", [_dec19], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\", [_dec20], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\", [_dec21], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\", [_dec22], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\"), on_ramp_store_class.prototype)), on_ramp_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/Cashier/transaction-history-store.js\\nvar transaction_history_store_dec, transaction_history_store_dec2, transaction_history_store_dec3, transaction_history_store_dec4, transaction_history_store_dec5, transaction_history_store_dec6, transaction_history_store_dec7, transaction_history_store_dec8, transaction_history_store_dec9, transaction_history_store_dec10, transaction_history_store_dec11, transaction_history_store_dec12, transaction_history_store_dec13, transaction_history_store_dec14, transaction_history_store_dec15, transaction_history_store_dec16, transaction_history_store_dec17, transaction_history_store_dec18, transaction_history_store_class, transaction_history_store_descriptor, transaction_history_store_descriptor2, transaction_history_store_descriptor3, transaction_history_store_descriptor4, transaction_history_store_descriptor5, transaction_history_store_descriptor6, transaction_history_store_descriptor7, transaction_history_store_descriptor8;\\n\\nfunction transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction transaction_history_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction transaction_history_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction transaction_history_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction transaction_history_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction transaction_history_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) transaction_history_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) transaction_history_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction transaction_history_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction transaction_history_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar TransactionHistoryStore = (transaction_history_store_dec = external_mobx_.action.bound, transaction_history_store_dec2 = external_mobx_.action.bound, transaction_history_store_dec3 = external_mobx_.action.bound, transaction_history_store_dec4 = external_mobx_.action.bound, transaction_history_store_dec5 = external_mobx_.action.bound, transaction_history_store_dec6 = external_mobx_.action.bound, transaction_history_store_dec7 = external_mobx_.action.bound, transaction_history_store_dec8 = external_mobx_.action.bound, transaction_history_store_dec9 = external_mobx_.action.bound, transaction_history_store_dec10 = external_mobx_.action.bound, transaction_history_store_dec11 = external_mobx_.action.bound, transaction_history_store_dec12 = external_mobx_.action.bound, transaction_history_store_dec13 = external_mobx_.action.bound, transaction_history_store_dec14 = external_mobx_.action.bound, transaction_history_store_dec15 = external_mobx_.action.bound, transaction_history_store_dec16 = external_mobx_.action.bound, transaction_history_store_dec17 = external_mobx_.action.bound, transaction_history_store_dec18 = external_mobx_.action.bound, (transaction_history_store_class = /*#__PURE__*/function () {\\n  function TransactionHistoryStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    transaction_history_store_classCallCheck(this, TransactionHistoryStore);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"crypto_transactions\\\", transaction_history_store_descriptor, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_cancel_modal_visible\\\", transaction_history_store_descriptor2, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_status_modal_visible\\\", transaction_history_store_descriptor3, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_visible\\\", transaction_history_store_descriptor4, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_loading\\\", transaction_history_store_descriptor5, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_transaction_id\\\", transaction_history_store_descriptor6, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status\\\", transaction_history_store_descriptor7, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status_description\\\", transaction_history_store_descriptor8, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  transaction_history_store_createClass(TransactionHistoryStore, [{\\n    key: \\\"updateCryptoTransactions\\\",\\n    value: function updateCryptoTransactions(transactions) {\\n      var _this = this;\\n\\n      transactions.forEach(function (transaction) {\\n        var index = _this.crypto_transactions.findIndex(function (crypto) {\\n          return crypto.id === transaction.id;\\n        });\\n\\n        if (index === -1) {\\n          _this.crypto_transactions.push(transaction);\\n        } else {\\n          Object.assign(_this.crypto_transactions[index], transaction);\\n        }\\n      });\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"setCryptoTransactionsHistory\\\",\\n    value: function setCryptoTransactionsHistory(transactions) {\\n      this.crypto_transactions = transactions;\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"sortCryptoTransactions\\\",\\n    value: function sortCryptoTransactions() {\\n      this.crypto_transactions = this.crypto_transactions.sort(function (a, b) {\\n        return b.submit_date - a.submit_date;\\n      });\\n    }\\n  }, {\\n    key: \\\"getCryptoTransactions\\\",\\n    value: function () {\\n      var _getCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this2 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.subscribeCashierPayments(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this2.updateCryptoTransactions(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function getCryptoTransactions() {\\n        return _getCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return getCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store$clie, currency, switched, is_crypto;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store$clie = this.root_store.client, currency = _this$root_store$clie.currency, switched = _this$root_store$clie.switched;\\n                is_crypto = !!currency && (0,shared_.isCryptocurrency)(currency);\\n\\n                if (!(is_crypto && !switched)) {\\n                  _context2.next = 9;\\n                  break;\\n                }\\n\\n                this.setLoading(true);\\n                _context2.next = 6;\\n                return this.unsubscribeCryptoTransactions();\\n\\n              case 6:\\n                _context2.next = 8;\\n                return this.getCryptoTransactions();\\n\\n              case 8:\\n                this.setLoading(false);\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onMount() {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"unsubscribeCryptoTransactions\\\",\\n    value: function () {\\n      var _unsubscribeCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        var _this3 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.next = 2;\\n                return this.WS.authorized.cashierPayments({\\n                  provider: 'crypto',\\n                  transaction_type: 'all'\\n                }).then(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this3.setCryptoTransactionsHistory(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function unsubscribeCryptoTransactions() {\\n        return _unsubscribeCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return unsubscribeCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"cancelCryptoTransaction\\\",\\n    value: function () {\\n      var _cancelCryptoTransaction = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(transaction_id) {\\n        var _this4 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _context4.next = 2;\\n                return this.WS.cancelCryptoTransaction(transaction_id).then(function (response) {\\n                  if (!response.error) {\\n                    _this4.setSelectedCryptoTransactionId('');\\n\\n                    _this4.setIsCryptoTransactionsCancelModalVisible(false);\\n\\n                    return Promise.resolve(response);\\n                  }\\n\\n                  return Promise.reject(response.error);\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function cancelCryptoTransaction(_x) {\\n        return _cancelCryptoTransaction.apply(this, arguments);\\n      }\\n\\n      return cancelCryptoTransaction;\\n    }()\\n  }, {\\n    key: \\\"setSelectedCryptoTransactionId\\\",\\n    value: function setSelectedCryptoTransactionId(id) {\\n      this.selected_crypto_transaction_id = id;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsCancelModalVisible\\\",\\n    value: function setIsCryptoTransactionsCancelModalVisible(is_visible) {\\n      this.is_crypto_transactions_cancel_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsCancelModal\\\",\\n    value: function showCryptoTransactionsCancelModal(id) {\\n      this.setSelectedCryptoTransactionId(id);\\n      this.setIsCryptoTransactionsCancelModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsCancelModal\\\",\\n    value: function hideCryptoTransactionsCancelModal() {\\n      this.setSelectedCryptoTransactionId('');\\n      this.setIsCryptoTransactionsCancelModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatus\\\",\\n    value: function setSelectedCryptoStatus(status) {\\n      this.selected_crypto_status = status;\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatusDescription\\\",\\n    value: function setSelectedCryptoStatusDescription(description) {\\n      this.selected_crypto_status_description = description;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsStatusModalVisible\\\",\\n    value: function setIsCryptoTransactionsStatusModalVisible(is_visible) {\\n      this.is_crypto_transactions_status_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsStatusModal\\\",\\n    value: function showCryptoTransactionsStatusModal(description, name) {\\n      this.setSelectedCryptoStatusDescription(description);\\n      this.setSelectedCryptoStatus(name);\\n      this.setIsCryptoTransactionsStatusModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsStatusModal\\\",\\n    value: function hideCryptoTransactionsStatusModal() {\\n      this.setIsCryptoTransactionsStatusModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsVisible\\\",\\n    value: function setIsCryptoTransactionsVisible(is_visible) {\\n      this.is_crypto_transactions_visible = is_visible;\\n    }\\n  }]);\\n\\n  return TransactionHistoryStore;\\n}(), (transaction_history_store_descriptor = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"crypto_transactions\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), transaction_history_store_descriptor2 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_cancel_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor3 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_status_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor4 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor5 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor6 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_transaction_id\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor7 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor8 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status_description\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\", [transaction_history_store_dec], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setCryptoTransactionsHistory\\\", [transaction_history_store_dec2], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setCryptoTransactionsHistory\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\", [transaction_history_store_dec3], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\", [transaction_history_store_dec4], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\", [transaction_history_store_dec5], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"unsubscribeCryptoTransactions\\\", [transaction_history_store_dec6], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"unsubscribeCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\", [transaction_history_store_dec7], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\", [transaction_history_store_dec8], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\", [transaction_history_store_dec9], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\", [transaction_history_store_dec10], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\", [transaction_history_store_dec11], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\", [transaction_history_store_dec12], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\", [transaction_history_store_dec13], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\", [transaction_history_store_dec14], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\", [transaction_history_store_dec15], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\", [transaction_history_store_dec16], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\", [transaction_history_store_dec17], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\", [transaction_history_store_dec18], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\"), transaction_history_store_class.prototype)), transaction_history_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/account-prompt-dialog-store.js\\nvar account_prompt_dialog_store_dec, account_prompt_dialog_store_dec2, account_prompt_dialog_store_dec3, account_prompt_dialog_store_dec4, account_prompt_dialog_store_dec5, account_prompt_dialog_store_dec6, account_prompt_dialog_store_class, account_prompt_dialog_store_descriptor, account_prompt_dialog_store_descriptor2, account_prompt_dialog_store_descriptor3, account_prompt_dialog_store_descriptor4;\\n\\nfunction account_prompt_dialog_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction account_prompt_dialog_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { account_prompt_dialog_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { account_prompt_dialog_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction account_prompt_dialog_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction account_prompt_dialog_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction account_prompt_dialog_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction account_prompt_dialog_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) account_prompt_dialog_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) account_prompt_dialog_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction account_prompt_dialog_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction account_prompt_dialog_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar AccountPromptDialogStore = (account_prompt_dialog_store_dec = external_mobx_.action.bound, account_prompt_dialog_store_dec2 = external_mobx_.action.bound, account_prompt_dialog_store_dec3 = external_mobx_.action.bound, account_prompt_dialog_store_dec4 = external_mobx_.action.bound, account_prompt_dialog_store_dec5 = external_mobx_.action.bound, account_prompt_dialog_store_dec6 = external_mobx_.action.bound, (account_prompt_dialog_store_class = /*#__PURE__*/function () {\\n  function AccountPromptDialogStore(root_store) {\\n    account_prompt_dialog_store_classCallCheck(this, AccountPromptDialogStore);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"should_show\\\", account_prompt_dialog_store_descriptor, this);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"is_confirmed\\\", account_prompt_dialog_store_descriptor2, this);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"last_location\\\", account_prompt_dialog_store_descriptor3, this);\\n\\n    account_prompt_dialog_store_initializerDefineProperty(this, \\\"current_location\\\", account_prompt_dialog_store_descriptor4, this);\\n\\n    this.root_store = root_store;\\n  }\\n\\n  account_prompt_dialog_store_createClass(AccountPromptDialogStore, [{\\n    key: \\\"shouldNavigateAfterPrompt\\\",\\n    value: function shouldNavigateAfterPrompt(next_location, current_location) {\\n      if (!this.is_confirmed) {\\n        this.last_location = next_location;\\n        this.should_show = true;\\n        this.current_location = current_location;\\n      }\\n    }\\n  }, {\\n    key: \\\"resetLastLocation\\\",\\n    value: function resetLastLocation() {\\n      this.last_location = null;\\n    }\\n  }, {\\n    key: \\\"resetIsConfirmed\\\",\\n    value: function resetIsConfirmed() {\\n      this.is_confirmed = false;\\n    }\\n  }, {\\n    key: \\\"onConfirm\\\",\\n    value: function () {\\n      var _onConfirm = account_prompt_dialog_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store$clie;\\n\\n        var has_fiat_account;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                this.should_show = false;\\n                this.is_confirmed = true;\\n                has_fiat_account = this.root_store.modules.cashier.config.account_transfer.accounts_list.some(function (x) {\\n                  return !x.is_crypto;\\n                });\\n\\n                if (!((0,shared_.isCryptocurrency)((_this$root_store$clie = this.root_store.client) === null || _this$root_store$clie === void 0 ? void 0 : _this$root_store$clie.currency) && has_fiat_account)) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                _context.next = 6;\\n                return this.doSwitch();\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onConfirm() {\\n        return _onConfirm.apply(this, arguments);\\n      }\\n\\n      return onConfirm;\\n    }()\\n  }, {\\n    key: \\\"doSwitch\\\",\\n    value: function () {\\n      var _doSwitch = account_prompt_dialog_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var non_crypto_accounts, loginid;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                non_crypto_accounts = this.root_store.modules.cashier.config.account_transfer.accounts_list.filter(function (x) {\\n                  return !x.is_crypto;\\n                });\\n                loginid = non_crypto_accounts.map(function (x) {\\n                  return x.value;\\n                })[0];\\n                _context2.next = 4;\\n                return this.root_store.client.switchAccount(loginid);\\n\\n              case 4:\\n                if (this.current_location === 'deposit') {\\n                  this.root_store.modules.cashier.setIsDeposit(true);\\n                }\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function doSwitch() {\\n        return _doSwitch.apply(this, arguments);\\n      }\\n\\n      return doSwitch;\\n    }()\\n  }, {\\n    key: \\\"onCancel\\\",\\n    value: function onCancel() {\\n      this.should_show = false;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      if (this.is_confirmed && this.last_location) {\\n        this.root_store.common.routeTo(this.last_location);\\n      }\\n    }\\n  }]);\\n\\n  return AccountPromptDialogStore;\\n}(), (account_prompt_dialog_store_descriptor = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_prompt_dialog_store_descriptor2 = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"is_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_prompt_dialog_store_descriptor3 = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"last_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), account_prompt_dialog_store_descriptor4 = account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"current_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"shouldNavigateAfterPrompt\\\", [account_prompt_dialog_store_dec], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"shouldNavigateAfterPrompt\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetLastLocation\\\", [account_prompt_dialog_store_dec2], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetLastLocation\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetIsConfirmed\\\", [account_prompt_dialog_store_dec3], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"resetIsConfirmed\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"onConfirm\\\", [account_prompt_dialog_store_dec4], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"onConfirm\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"onCancel\\\", [account_prompt_dialog_store_dec5], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"onCancel\\\"), account_prompt_dialog_store_class.prototype), account_prompt_dialog_store_applyDecoratedDescriptor(account_prompt_dialog_store_class.prototype, \\\"continueRoute\\\", [account_prompt_dialog_store_dec6], Object.getOwnPropertyDescriptor(account_prompt_dialog_store_class.prototype, \\\"continueRoute\\\"), account_prompt_dialog_store_class.prototype)), account_prompt_dialog_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/error-dialog-store.js\\nvar error_dialog_store_dec, error_dialog_store_dec2, error_dialog_store_class, error_dialog_store_descriptor, error_dialog_store_descriptor2;\\n\\nfunction error_dialog_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction error_dialog_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction error_dialog_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction error_dialog_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_dialog_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_dialog_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction error_dialog_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction error_dialog_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\nvar ErrorDialogStore = (error_dialog_store_dec = external_mobx_.action.bound, error_dialog_store_dec2 = external_mobx_.action.bound, (error_dialog_store_class = /*#__PURE__*/function () {\\n  function ErrorDialogStore() {\\n    error_dialog_store_classCallCheck(this, ErrorDialogStore);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"error_message\\\", error_dialog_store_descriptor, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"should_show\\\", error_dialog_store_descriptor2, this);\\n  }\\n\\n  error_dialog_store_createClass(ErrorDialogStore, [{\\n    key: \\\"setShouldShow\\\",\\n    value: function setShouldShow(value) {\\n      this.should_show = value;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(message) {\\n      this.error_message = message;\\n      this.setShouldShow(true);\\n    }\\n  }]);\\n\\n  return ErrorDialogStore;\\n}(), (error_dialog_store_descriptor = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"error_message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_dialog_store_descriptor2 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\", [error_dialog_store_dec], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\", [error_dialog_store_dec2], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\"), error_dialog_store_class.prototype)), error_dialog_store_class));\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n;// CONCATENATED MODULE: ./Containers/cashier-notifications.jsx\\n\\n\\n\\n\\nvar CashierNotifications = function CashierNotifications(_ref) {\\n  var p2p_notification_count = _ref.p2p_notification_count;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCashier\\\",\\n    className: \\\"header__icon\\\"\\n  }), !!p2p_notification_count && /*#__PURE__*/external_react_default().createElement(components_.Counter, {\\n    className: \\\"cashier__counter\\\",\\n    count: p2p_notification_count\\n  }));\\n};\\n\\nCashierNotifications.propTypes = {\\n  p2p_notification_count: (prop_types_default()).number\\n};\\n/* harmony default export */ const cashier_notifications = (CashierNotifications);\\n;// CONCATENATED MODULE: ./Stores/Cashier/cashier-store.js\\nfunction cashier_store_typeof(obj) { \\\"@babel/helpers - typeof\\\"; if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { cashier_store_typeof = function _typeof(obj) { return typeof obj; }; } else { cashier_store_typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return cashier_store_typeof(obj); }\\n\\nvar cashier_store_class, cashier_store_descriptor, cashier_store_descriptor2, _class3, cashier_store_descriptor3, cashier_store_descriptor4, cashier_store_descriptor5, cashier_store_descriptor6, cashier_store_descriptor7, cashier_store_descriptor8, cashier_store_descriptor9, cashier_store_descriptor10, cashier_store_descriptor11, cashier_store_dec, _class5, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _class7, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, cashier_store_dec2, cashier_store_dec3, cashier_store_dec4, _class9, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _class11, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _class13, _descriptor53, _descriptor54, _descriptor55, _descriptor56, cashier_store_dec5, cashier_store_dec6, cashier_store_dec7, cashier_store_dec8, cashier_store_dec9, cashier_store_dec10, cashier_store_dec11, cashier_store_dec12, cashier_store_dec13, cashier_store_dec14, cashier_store_dec15, cashier_store_dec16, cashier_store_dec17, cashier_store_dec18, cashier_store_dec19, cashier_store_dec20, cashier_store_dec21, cashier_store_dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _dec65, _dec66, _dec67, _dec68, _dec69, _dec70, _dec71, _dec72, _dec73, _dec74, _dec75, _dec76, _dec77, _dec78, _dec79, _dec80, _dec81, _dec82, _dec83, _dec84, _dec85, _dec86, _dec87, _dec88, _dec89, _dec90, _dec91, _dec92, _dec93, _dec94, _dec95, _dec96, _dec97, _dec98, _dec99, _dec100, _dec101, _dec102, _dec103, _dec104, _dec105, _dec106, _dec107, _dec108, _dec109, _dec110, _dec111, _dec112, _dec113, _dec114, _dec115, _dec116, _dec117, _dec118, _dec119, _dec120, _dec121, _dec122, _dec123, _class15, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _descriptor66, _descriptor67, _descriptor68, _descriptor69, _descriptor70, _descriptor71, _descriptor72, _descriptor73, _descriptor74, _descriptor75, _descriptor76, _descriptor77, _descriptor78, _descriptor79, _descriptor80, _descriptor81, _descriptor82, _descriptor83, _descriptor84, _descriptor85, _descriptor86, _descriptor87, _descriptor88, _descriptor89, _descriptor90, _descriptor91;\\n\\nfunction cashier_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction cashier_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { cashier_store_ownKeys(Object(source), true).forEach(function (key) { cashier_store_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { cashier_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction cashier_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { cashier_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction cashier_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction cashier_store_inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) cashier_store_setPrototypeOf(subClass, superClass); }\\n\\nfunction cashier_store_setPrototypeOf(o, p) { cashier_store_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return cashier_store_setPrototypeOf(o, p); }\\n\\nfunction cashier_store_createSuper(Derived) { var hasNativeReflectConstruct = cashier_store_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = cashier_store_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = cashier_store_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return cashier_store_possibleConstructorReturn(this, result); }; }\\n\\nfunction cashier_store_possibleConstructorReturn(self, call) { if (call && (cashier_store_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return cashier_store_assertThisInitialized(self); }\\n\\nfunction cashier_store_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction cashier_store_isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction cashier_store_getPrototypeOf(o) { cashier_store_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return cashier_store_getPrototypeOf(o); }\\n\\nfunction cashier_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction cashier_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) cashier_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) cashier_store_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction cashier_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction cashier_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction cashier_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction cashier_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n/* eslint-disable max-classes-per-file */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar hasTransferNotAllowedLoginid = function hasTransferNotAllowedLoginid(loginid) {\\n  return loginid.startsWith('MX');\\n};\\n\\nvar getSelectedError = function getSelectedError(selected_value, is_from_account) {\\n  if (is_from_account) {\\n    return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: \\\"Transfer from {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n      values: {\\n        selected_value: selected_value\\n      }\\n    });\\n  }\\n\\n  return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Transfer to {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n    values: {\\n      selected_value: selected_value\\n    }\\n  });\\n};\\n\\nvar Config = (cashier_store_class = function Config(_ref) {\\n  var container = _ref.container;\\n\\n  cashier_store_classCallCheck(this, Config);\\n\\n  this.container = '';\\n  this.is_session_timeout = true;\\n  this.onIframeLoaded = '';\\n  this.timeout_session = '';\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_height\\\", cashier_store_descriptor, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_url\\\", cashier_store_descriptor2, this);\\n\\n  this.container = container;\\n}, (cashier_store_descriptor = cashier_store_applyDecoratedDescriptor(cashier_store_class.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), cashier_store_descriptor2 = cashier_store_applyDecoratedDescriptor(cashier_store_class.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n})), cashier_store_class);\\nvar ConfigError = (_class3 = function ConfigError() {\\n  cashier_store_classCallCheck(this, ConfigError);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"message\\\", cashier_store_descriptor3, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"code\\\", cashier_store_descriptor4, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"fields\\\", cashier_store_descriptor5, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_show_full_page\\\", cashier_store_descriptor6, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"onClickButton\\\", cashier_store_descriptor7, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_uk_funds_protection\\\", cashier_store_descriptor8, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_self_exclusion_max_turnover_set\\\", cashier_store_descriptor9, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_authentication\\\", cashier_store_descriptor10, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_ask_financial_risk_approval\\\", cashier_store_descriptor11, this);\\n}, (cashier_store_descriptor3 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor4 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"code\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor5 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"fields\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), cashier_store_descriptor6 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_show_full_page\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor7 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"onClickButton\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), cashier_store_descriptor8 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_uk_funds_protection\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor9 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_self_exclusion_max_turnover_set\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor10 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_authentication\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), cashier_store_descriptor11 = cashier_store_applyDecoratedDescriptor(_class3.prototype, \\\"is_ask_financial_risk_approval\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n})), _class3);\\nvar ConfigPaymentAgent = (cashier_store_dec = external_mobx_.action.bound, (_class5 = /*#__PURE__*/function () {\\n  function ConfigPaymentAgent() {\\n    cashier_store_classCallCheck(this, ConfigPaymentAgent);\\n\\n    this.list = [];\\n\\n    cashier_store_initializerDefineProperty(this, \\\"agents\\\", _descriptor12, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor13, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor14, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"filtered_list\\\", _descriptor15, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_name_selected\\\", _descriptor16, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_withdraw\\\", _descriptor17, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_try_withdraw_successful\\\", _descriptor18, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_withdraw_successful\\\", _descriptor19, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"confirm\\\", _descriptor20, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor21, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_bank\\\", _descriptor22, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"supported_banks\\\", _descriptor23, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"verification\\\", _descriptor24, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"active_tab_index\\\", _descriptor25, this);\\n  }\\n\\n  cashier_store_createClass(ConfigPaymentAgent, [{\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.active_tab_index = index;\\n    }\\n  }]);\\n\\n  return ConfigPaymentAgent;\\n}(), (_descriptor12 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"agents\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor13 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'payment_agent';\\n  }\\n}), _descriptor14 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor15 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"filtered_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor16 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_name_selected\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor17 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_withdraw\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor18 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_try_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor19 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"is_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor20 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor21 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor22 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"selected_bank\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor23 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"supported_banks\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor24 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigVerification();\\n  }\\n}), _descriptor25 = cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"active_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class5.prototype, \\\"setActiveTabIndex\\\", [cashier_store_dec], Object.getOwnPropertyDescriptor(_class5.prototype, \\\"setActiveTabIndex\\\"), _class5.prototype)), _class5));\\nvar ConfigPaymentAgentTransfer = (_class7 = function ConfigPaymentAgentTransfer() {\\n  cashier_store_classCallCheck(this, ConfigPaymentAgentTransfer);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor26, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor27, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_payment_agent\\\", _descriptor28, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_try_transfer_successful\\\", _descriptor29, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", _descriptor30, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"confirm\\\", _descriptor31, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor32, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor33, this);\\n}, (_descriptor26 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'payment_agent_transfer';\\n  }\\n}), _descriptor27 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor28 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_payment_agent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor29 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_try_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor30 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor31 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor32 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor33 = cashier_store_applyDecoratedDescriptor(_class7.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n})), _class7);\\nvar ConfigAccountTransfer = (cashier_store_dec2 = external_mobx_.action.bound, cashier_store_dec3 = external_mobx_.action.bound, cashier_store_dec4 = external_mobx_.action.bound, (_class9 = /*#__PURE__*/function () {\\n  function ConfigAccountTransfer() {\\n    cashier_store_classCallCheck(this, ConfigAccountTransfer);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"accounts_list\\\", _descriptor34, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor35, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor36, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"has_no_account\\\", _descriptor37, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"has_no_accounts_balance\\\", _descriptor38, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_transfer_confirm\\\", _descriptor39, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"is_mt5_transfer_in_progress\\\", _descriptor40, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"minimum_fee\\\", _descriptor41, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor42, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_from\\\", _descriptor43, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"selected_to\\\", _descriptor44, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"account_transfer_amount\\\", _descriptor45, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"transfer_fee\\\", _descriptor46, this);\\n\\n    cashier_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor47, this);\\n  }\\n\\n  cashier_store_createClass(ConfigAccountTransfer, [{\\n    key: \\\"setBalanceByLoginId\\\",\\n    value: function setBalanceByLoginId(loginid, balance) {\\n      this.accounts_list.find(function (acc) {\\n        return loginid === acc.value;\\n      }).balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedFrom\\\",\\n    value: function setBalanceSelectedFrom(balance) {\\n      this.selected_from.balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedTo\\\",\\n    value: function setBalanceSelectedTo(balance) {\\n      this.selected_to.balance = balance;\\n    }\\n  }]);\\n\\n  return ConfigAccountTransfer;\\n}(), (_descriptor34 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"accounts_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor35 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'account_transfer';\\n  }\\n}), _descriptor36 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor37 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"has_no_account\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor38 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"has_no_accounts_balance\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor39 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_transfer_confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor40 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"is_mt5_transfer_in_progress\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor41 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"minimum_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor42 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor43 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"selected_from\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor44 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"selected_to\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor45 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"account_transfer_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor46 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"transfer_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor47 = cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceByLoginId\\\", [cashier_store_dec2], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceByLoginId\\\"), _class9.prototype), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceSelectedFrom\\\", [cashier_store_dec3], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceSelectedFrom\\\"), _class9.prototype), cashier_store_applyDecoratedDescriptor(_class9.prototype, \\\"setBalanceSelectedTo\\\", [cashier_store_dec4], Object.getOwnPropertyDescriptor(_class9.prototype, \\\"setBalanceSelectedTo\\\"), _class9.prototype)), _class9));\\nvar ConfigWithdraw = (_class11 = function ConfigWithdraw() {\\n  cashier_store_classCallCheck(this, ConfigWithdraw);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"container\\\", _descriptor48, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_height\\\", _descriptor49, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"iframe_url\\\", _descriptor50, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor51, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"verification\\\", _descriptor52, this);\\n\\n  this.is_session_timeout = true;\\n  this.onIframeLoaded = '';\\n  this.timeout_session = '';\\n}, (_descriptor48 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 'withdraw';\\n  }\\n}), _descriptor49 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor50 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor51 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor52 = cashier_store_applyDecoratedDescriptor(_class11.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigVerification();\\n  }\\n})), _class11);\\nvar ConfigVerification = (_class13 = function ConfigVerification() {\\n  cashier_store_classCallCheck(this, ConfigVerification);\\n\\n  this.is_button_clicked = false;\\n  this.timeout_button = '';\\n\\n  cashier_store_initializerDefineProperty(this, \\\"error\\\", _descriptor53, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_email_sent\\\", _descriptor54, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"is_resend_clicked\\\", _descriptor55, this);\\n\\n  cashier_store_initializerDefineProperty(this, \\\"resend_timeout\\\", _descriptor56, this);\\n}, (_descriptor53 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ConfigError();\\n  }\\n}), _descriptor54 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_email_sent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor55 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"is_resend_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor56 = cashier_store_applyDecoratedDescriptor(_class13.prototype, \\\"resend_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 60;\\n  }\\n})), _class13);\\nvar CashierStore = (cashier_store_dec5 = external_mobx_.action.bound, cashier_store_dec6 = external_mobx_.action.bound, cashier_store_dec7 = external_mobx_.action.bound, cashier_store_dec8 = external_mobx_.action.bound, cashier_store_dec9 = external_mobx_.action.bound, cashier_store_dec10 = external_mobx_.action.bound, cashier_store_dec11 = external_mobx_.action.bound, cashier_store_dec12 = external_mobx_.action.bound, cashier_store_dec13 = external_mobx_.action.bound, cashier_store_dec14 = external_mobx_.action.bound, cashier_store_dec15 = external_mobx_.action.bound, cashier_store_dec16 = external_mobx_.action.bound, cashier_store_dec17 = external_mobx_.action.bound, cashier_store_dec18 = external_mobx_.action.bound, cashier_store_dec19 = external_mobx_.action.bound, cashier_store_dec20 = external_mobx_.action.bound, cashier_store_dec21 = external_mobx_.action.bound, cashier_store_dec22 = external_mobx_.action.bound, _dec23 = external_mobx_.action.bound, _dec24 = external_mobx_.action.bound, _dec25 = external_mobx_.action.bound, _dec26 = external_mobx_.action.bound, _dec27 = external_mobx_.action.bound, _dec28 = external_mobx_.action.bound, _dec29 = external_mobx_.action.bound, _dec30 = external_mobx_.action.bound, _dec31 = external_mobx_.action.bound, _dec32 = external_mobx_.action.bound, _dec33 = external_mobx_.action.bound, _dec34 = external_mobx_.action.bound, _dec35 = external_mobx_.action.bound, _dec36 = external_mobx_.action.bound, _dec37 = external_mobx_.action.bound, _dec38 = external_mobx_.action.bound, _dec39 = external_mobx_.action.bound, _dec40 = external_mobx_.action.bound, _dec41 = external_mobx_.action.bound, _dec42 = external_mobx_.action.bound, _dec43 = external_mobx_.action.bound, _dec44 = external_mobx_.action.bound, _dec45 = external_mobx_.action.bound, _dec46 = external_mobx_.action.bound, _dec47 = external_mobx_.action.bound, _dec48 = external_mobx_.action.bound, _dec49 = external_mobx_.action.bound, _dec50 = external_mobx_.action.bound, _dec51 = external_mobx_.action.bound, _dec52 = external_mobx_.action.bound, _dec53 = external_mobx_.action.bound, _dec54 = external_mobx_.action.bound, _dec55 = external_mobx_.action.bound, _dec56 = external_mobx_.action.bound, _dec57 = external_mobx_.action.bound, _dec58 = external_mobx_.action.bound, _dec59 = external_mobx_.action.bound, _dec60 = external_mobx_.action.bound, _dec61 = external_mobx_.action.bound, _dec62 = external_mobx_.action.bound, _dec63 = external_mobx_.action.bound, _dec64 = external_mobx_.action.bound, _dec65 = external_mobx_.action.bound, _dec66 = external_mobx_.action.bound, _dec67 = external_mobx_.action.bound, _dec68 = external_mobx_.action.bound, _dec69 = external_mobx_.action.bound, _dec70 = external_mobx_.action.bound, _dec71 = external_mobx_.action.bound, _dec72 = external_mobx_.action.bound, _dec73 = external_mobx_.action.bound, _dec74 = external_mobx_.action.bound, _dec75 = external_mobx_.action.bound, _dec76 = external_mobx_.action.bound, _dec77 = external_mobx_.action.bound, _dec78 = external_mobx_.action.bound, _dec79 = external_mobx_.action.bound, _dec80 = external_mobx_.action.bound, _dec81 = external_mobx_.action.bound, _dec82 = external_mobx_.action.bound, _dec83 = external_mobx_.action.bound, _dec84 = external_mobx_.action.bound, _dec85 = external_mobx_.action.bound, _dec86 = external_mobx_.action.bound, _dec87 = external_mobx_.action.bound, _dec88 = external_mobx_.action.bound, _dec89 = external_mobx_.action.bound, _dec90 = external_mobx_.action.bound, _dec91 = external_mobx_.action.bound, _dec92 = external_mobx_.action.bound, _dec93 = external_mobx_.action.bound, _dec94 = external_mobx_.action.bound, _dec95 = external_mobx_.action.bound, _dec96 = external_mobx_.action.bound, _dec97 = external_mobx_.action.bound, _dec98 = external_mobx_.action.bound, _dec99 = external_mobx_.action.bound, _dec100 = external_mobx_.action.bound, _dec101 = external_mobx_.action.bound, _dec102 = external_mobx_.action.bound, _dec103 = external_mobx_.action.bound, _dec104 = external_mobx_.action.bound, _dec105 = external_mobx_.action.bound, _dec106 = external_mobx_.action.bound, _dec107 = external_mobx_.action.bound, _dec108 = external_mobx_.action.bound, _dec109 = external_mobx_.action.bound, _dec110 = external_mobx_.action.bound, _dec111 = external_mobx_.action.bound, _dec112 = external_mobx_.action.bound, _dec113 = external_mobx_.action.bound, _dec114 = external_mobx_.action.bound, _dec115 = external_mobx_.action.bound, _dec116 = external_mobx_.action.bound, _dec117 = external_mobx_.action.bound, _dec118 = external_mobx_.action.bound, _dec119 = external_mobx_.action.bound, _dec120 = external_mobx_.action.bound, _dec121 = external_mobx_.action.bound, _dec122 = external_mobx_.action.bound, _dec123 = external_mobx_.action.bound, (_class15 = /*#__PURE__*/function (_BaseStore) {\\n  cashier_store_inherits(CashierStore, _BaseStore);\\n\\n  var _super = cashier_store_createSuper(CashierStore);\\n\\n  function CashierStore(_ref2) {\\n    var _this$map_action;\\n\\n    var _this;\\n\\n    var root_store = _ref2.root_store,\\n        WS = _ref2.WS;\\n\\n    cashier_store_classCallCheck(this, CashierStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_loading\\\", _descriptor57, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_p2p_visible\\\", _descriptor58, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"p2p_notification_count\\\", _descriptor59, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"cashier_route_tab_index\\\", _descriptor60, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_10k_withdrawal_limit_reached\\\", _descriptor61, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_deposit\\\", _descriptor62, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"should_show_all_available_currencies\\\", _descriptor63, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_cashier_default\\\", _descriptor64, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"deposit_target\\\", _descriptor65, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"crypto_amount\\\", _descriptor66, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"fiat_amount\\\", _descriptor67, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"insufficient_fund_error\\\", _descriptor68, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"all_payment_agent_list\\\", _descriptor69, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"should_set_currency_modal_title_change\\\", _descriptor70, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"p2p_advertiser_error\\\", _descriptor71, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"has_set_currency\\\", _descriptor72, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"withdraw_amount\\\", _descriptor73, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_from_amount\\\", _descriptor74, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_to_amount\\\", _descriptor75, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_from_error\\\", _descriptor76, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"converter_to_error\\\", _descriptor77, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_timer_visible\\\", _descriptor78, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_crypto_transactions_visible\\\", _descriptor79, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"blockchain_address\\\", _descriptor80, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"should_percentage_reset\\\", _descriptor81, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"percentage\\\", _descriptor82, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"is_withdraw_confirmed\\\", _descriptor83, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"show_p2p_in_cashier_default\\\", _descriptor84, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"max_withdraw_amount\\\", _descriptor85, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"config\\\", _descriptor86, cashier_store_assertThisInitialized(_this));\\n\\n    _this.active_container = _this.config.deposit.container;\\n\\n    _this.onRemount = function () {};\\n\\n    _this.is_populating_values = false;\\n    _this.containers = [_this.config.deposit.container, _this.config.withdraw.container];\\n    _this.map_action = (_this$map_action = {}, cashier_store_defineProperty(_this$map_action, _this.config.withdraw.container, 'payment_withdraw'), cashier_store_defineProperty(_this$map_action, _this.config.payment_agent.container, 'payment_agent_withdraw'), _this$map_action);\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetPaymentAgent\\\", _descriptor87, cashier_store_assertThisInitialized(_this));\\n\\n    _this.requestTransferBetweenAccounts = /*#__PURE__*/function () {\\n      var _ref4 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {\\n        var amount, is_mt_transfer, currency, transfer_between_accounts, account_status_response;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                amount = _ref3.amount;\\n\\n                if (_this.root_store.client.is_logged_in) {\\n                  _context.next = 3;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", null);\\n\\n              case 3:\\n                _this.setLoading(true);\\n\\n                _this.setErrorMessage('');\\n\\n                is_mt_transfer = _this.config.account_transfer.selected_from.is_mt || _this.config.account_transfer.selected_to.is_mt;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(true);\\n                currency = _this.config.account_transfer.selected_from.currency;\\n                _context.next = 10;\\n                return _this.WS.authorized.transferBetweenAccounts(_this.config.account_transfer.selected_from.value, _this.config.account_transfer.selected_to.value, currency, amount);\\n\\n              case 10:\\n                transfer_between_accounts = _context.sent;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(false);\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context.next = 21;\\n                  break;\\n                }\\n\\n                if (!(transfer_between_accounts.error.code === 'Fiat2CryptoTransferOverLimit')) {\\n                  _context.next = 18;\\n                  break;\\n                }\\n\\n                _context.next = 16;\\n                return _this.WS.authorized.getAccountStatus();\\n\\n              case 16:\\n                account_status_response = _context.sent;\\n\\n                if (!account_status_response.error) {\\n                  _this.root_store.client.setAccountStatus(account_status_response.get_account_status);\\n                }\\n\\n              case 18:\\n                _this.setErrorMessage(transfer_between_accounts.error);\\n\\n                _context.next = 25;\\n                break;\\n\\n              case 21:\\n                _this.setReceiptTransfer({\\n                  amount: (0,shared_.formatMoney)(currency, amount, true)\\n                });\\n\\n                transfer_between_accounts.accounts.forEach(function (account) {\\n                  _this.config.account_transfer.setBalanceByLoginId(account.loginid, account.balance);\\n\\n                  if (account.loginid === _this.config.account_transfer.selected_from.value) {\\n                    _this.config.account_transfer.setBalanceSelectedFrom(account.balance);\\n                  } else if (account.loginid === _this.config.account_transfer.selected_to.value) {\\n                    _this.config.account_transfer.setBalanceSelectedTo(account.balance);\\n                  } // if one of the accounts was mt5\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5) {\\n                    Promise.all([_this.WS.mt5LoginList(), _this.WS.balanceAll()]).then(function (_ref5) {\\n                      var _ref6 = _slicedToArray(_ref5, 2),\\n                          mt5_login_list_response = _ref6[0],\\n                          balance_response = _ref6[1];\\n\\n                      // update the balance for account switcher by renewing the mt5_login_list response\\n                      _this.root_store.client.responseMt5LoginList(mt5_login_list_response); // update total balance since MT5 total only comes in non-stream balance call\\n\\n\\n                      _this.root_store.client.setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  } // if one of the accounts was dxtrade\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE) {\\n                    Promise.all([_this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE), _this.WS.balanceAll()]).then(function (_ref7) {\\n                      var _ref8 = _slicedToArray(_ref7, 2),\\n                          dxtrade_login_list_response = _ref8[0],\\n                          balance_response = _ref8[1];\\n\\n                      // update the balance for account switcher by renewing the dxtrade_login_list_response\\n                      _this.root_store.client.responseTradingPlatformAccountsList(dxtrade_login_list_response); // update total balance since Dxtrade total only comes in non-stream balance call\\n\\n\\n                      _this.root_store.client.setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  }\\n                });\\n\\n                _this.setAccountTransferAmount(null);\\n\\n                _this.setIsTransferConfirm(true);\\n\\n              case 25:\\n                _this.setLoading(false);\\n\\n                return _context.abrupt(\\\"return\\\", transfer_between_accounts);\\n\\n              case 27:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee);\\n      }));\\n\\n      return function (_x) {\\n        return _ref4.apply(this, arguments);\\n      };\\n    }();\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetAccountTransfer\\\", _descriptor88, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"requestTryPaymentAgentTransfer\\\", _descriptor89, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"requestPaymentAgentTransfer\\\", _descriptor90, cashier_store_assertThisInitialized(_this));\\n\\n    cashier_store_initializerDefineProperty(_this, \\\"resetPaymentAgentTransfer\\\", _descriptor91, cashier_store_assertThisInitialized(_this));\\n\\n    _this.WS = WS;\\n    (0,external_mobx_.when)(function () {\\n      return _this.root_store.client.is_logged_in;\\n    }, function () {\\n      _this.attachCashierToMenu();\\n    });\\n\\n    if (!_this.has_set_currency) {\\n      _this.changeSetCurrencyModalTitle();\\n    }\\n\\n    _this.onramp = new OnRampStore({\\n      root_store: _this.root_store,\\n      WS: _this.WS\\n    });\\n    _this.account_prompt_dialog = new AccountPromptDialogStore(_this.root_store);\\n    _this.error_dialog = new ErrorDialogStore();\\n    _this.transaction_history = new TransactionHistoryStore({\\n      root_store: _this.root_store,\\n      WS: _this.WS\\n    });\\n\\n    _this.init();\\n\\n    return _this;\\n  }\\n\\n  cashier_store_createClass(CashierStore, [{\\n    key: \\\"is_crypto\\\",\\n    get: function get() {\\n      var currency = this.root_store.client.currency;\\n      return !!currency && (0,shared_.isCryptocurrency)(currency);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible\\\",\\n    get: function get() {\\n      return !!(this.config.payment_agent.filtered_list.length || this.config.payment_agent.agents.length);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible_in_onboarding\\\",\\n    get: function get() {\\n      var _this$all_payment_age, _this$all_payment_age2, _this$all_payment_age3;\\n\\n      return !!((_this$all_payment_age = this.all_payment_agent_list) !== null && _this$all_payment_age !== void 0 && (_this$all_payment_age2 = _this$all_payment_age.paymentagent_list) !== null && _this$all_payment_age2 !== void 0 && (_this$all_payment_age3 = _this$all_payment_age2.list) !== null && _this$all_payment_age3 !== void 0 && _this$all_payment_age3.length);\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_transfer_visible\\\",\\n    get: function get() {\\n      return this.config.payment_agent_transfer.is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"is_account_transfer_visible\\\",\\n    get: function get() {\\n      // cashier Transfer account tab is hidden for iom clients\\n      // check for residence to hide the tab before creating a real money account\\n      return this.root_store.client.residence !== 'im';\\n    }\\n  }, {\\n    key: \\\"is_p2p_enabled\\\",\\n    get: function get() {\\n      return this.is_p2p_visible && !this.root_store.client.is_eu;\\n    }\\n  }, {\\n    key: \\\"showP2pInCashierDefault\\\",\\n    value: function showP2pInCashierDefault() {\\n      var is_p2p_restricted = this.p2p_advertiser_error === 'RestrictedCountry';\\n      var has_usd_currency = this.root_store.client.account_list.some(function (account) {\\n        return account.title === 'USD';\\n      });\\n      var has_user_fiat_currency = this.root_store.client.account_list.some(function (account) {\\n        return !(0,shared_.isCryptocurrency)(account.title) && account.title !== 'Real';\\n      });\\n\\n      if (is_p2p_restricted || this.root_store.client.is_virtual || has_user_fiat_currency && !has_usd_currency) {\\n        this.show_p2p_in_cashier_default = false;\\n      } else {\\n        this.show_p2p_in_cashier_default = true;\\n      }\\n    }\\n  }, {\\n    key: \\\"attachCashierToMenu\\\",\\n    value: function attachCashierToMenu() {\\n      if (!this.has_set_currency) {\\n        this.setHasSetCurrency();\\n      }\\n\\n      this.root_store.menu.attach({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency && this.root_store.ui.toggleSetCurrencyModal,\\n        login_only: true\\n      });\\n    }\\n  }, {\\n    key: \\\"replaceCashierMenuOnclick\\\",\\n    value: function replaceCashierMenuOnclick() {\\n      this.setHasSetCurrency();\\n      this.root_store.menu.update({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency ? this.root_store.ui.toggleSetCurrencyModal : false,\\n        login_only: true\\n      }, 1);\\n    }\\n  }, {\\n    key: \\\"setHasSetCurrency\\\",\\n    value: function setHasSetCurrency() {\\n      this.has_set_currency = this.root_store.client.account_list.filter(function (account) {\\n        return !account.is_virtual;\\n      }).some(function (account) {\\n        return account.title !== 'Real';\\n      }) || !this.root_store.client.has_active_real_account;\\n    }\\n  }, {\\n    key: \\\"changeSetCurrencyModalTitle\\\",\\n    value: function changeSetCurrencyModalTitle() {\\n      this.should_set_currency_modal_title_change = true;\\n    }\\n  }, {\\n    key: \\\"onMountCashierDefault\\\",\\n    value: function () {\\n      var _onMountCashierDefault = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$all_payment_age4, _this$all_payment_age5;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                if (!this.has_set_currency) {\\n                  this.setHasSetCurrency();\\n                }\\n\\n                this.setIsCashierDefault(true);\\n                this.account_prompt_dialog.resetIsConfirmed();\\n                this.setLoading(true);\\n\\n                if (!(((_this$all_payment_age4 = this.all_payment_agent_list) === null || _this$all_payment_age4 === void 0 ? void 0 : (_this$all_payment_age5 = _this$all_payment_age4.paymentagent_list) === null || _this$all_payment_age5 === void 0 ? void 0 : _this$all_payment_age5.list) === undefined)) {\\n                  _context2.next = 9;\\n                  break;\\n                }\\n\\n                _context2.next = 7;\\n                return this.getAllPaymentAgentList();\\n\\n              case 7:\\n                payment_agent_list = _context2.sent;\\n                this.setAllPaymentAgentList(payment_agent_list);\\n\\n              case 9:\\n                this.setLoading(false);\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onMountCashierDefault() {\\n        return _onMountCashierDefault.apply(this, arguments);\\n      }\\n\\n      return onMountCashierDefault;\\n    }()\\n  }, {\\n    key: \\\"setIsWithdrawConfirmed\\\",\\n    value: function setIsWithdrawConfirmed(is_withdraw_confirmed) {\\n      this.is_withdraw_confirmed = is_withdraw_confirmed;\\n      if (is_withdraw_confirmed) this.setWithdrawAmount(this.converter_from_amount);\\n\\n      if (!is_withdraw_confirmed && this.config[this.active_container].verification) {\\n        this.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"setWithdrawAmount\\\",\\n    value: function setWithdrawAmount(amount) {\\n      this.withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"calculatePercentage\\\",\\n    value: function calculatePercentage() {\\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.converter_from_amount;\\n\\n      if (this.active_container === this.config.account_transfer.container) {\\n        this.percentage = +(amount / +this.config.account_transfer.selected_from.balance * 100).toFixed(0);\\n      } else {\\n        this.percentage = +(amount / +this.root_store.client.balance * 100).toFixed(0);\\n      }\\n    }\\n  }, {\\n    key: \\\"percentageSelectorSelectionStatus\\\",\\n    value: function percentageSelectorSelectionStatus(should_percentage_reset) {\\n      this.should_percentage_reset = should_percentage_reset;\\n\\n      if (should_percentage_reset) {\\n        this.percentage = 0;\\n      }\\n    }\\n  }, {\\n    key: \\\"saveWithdraw\\\",\\n    value: function () {\\n      var _saveWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(verification_code) {\\n        var _this2 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                this.setErrorMessage('');\\n                _context3.next = 3;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +this.converter_from_amount,\\n                  verification_code: verification_code\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    _this2.setErrorMessage(response.error);\\n\\n                    if (verification_code) {\\n                      // clear verification code on error\\n                      _this2.clearVerification();\\n                    }\\n\\n                    _this2.resetWithrawForm();\\n                  } else {\\n                    _this2.setIsWithdrawConfirmed(true);\\n                  }\\n                });\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function saveWithdraw(_x2) {\\n        return _saveWithdraw.apply(this, arguments);\\n      }\\n\\n      return saveWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestWithdraw\\\",\\n    value: function () {\\n      var _requestWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(verification_code) {\\n        var _this3 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                if (this.root_store.client.is_logged_in) {\\n                  _context4.next = 2;\\n                  break;\\n                }\\n\\n                return _context4.abrupt(\\\"return\\\");\\n\\n              case 2:\\n                if (this.converter_from_amount) {\\n                  _context4.next = 5;\\n                  break;\\n                }\\n\\n                this.setConverterFromError((0,translations_.localize)('This field is required.'));\\n                return _context4.abrupt(\\\"return\\\");\\n\\n              case 5:\\n                _context4.next = 7;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +this.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    _this3.error_dialog.setErrorMessage(response.error.message);\\n                  } else {\\n                    _this3.saveWithdraw(verification_code);\\n                  }\\n                });\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function requestWithdraw(_x3) {\\n        return _requestWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestWithdraw;\\n    }()\\n  }, {\\n    key: \\\"resetWithrawForm\\\",\\n    value: function resetWithrawForm() {\\n      this.setBlockchainAddress('');\\n      this.setConverterFromAmount('');\\n      this.setConverterToAmount('');\\n      this.clearVerification();\\n    }\\n  }, {\\n    key: \\\"setIsDeposit\\\",\\n    value: function setIsDeposit(is_deposit) {\\n      this.is_deposit = is_deposit;\\n    }\\n  }, {\\n    key: \\\"setShouldShowAllAvailableCurrencies\\\",\\n    value: function setShouldShowAllAvailableCurrencies(value) {\\n      this.should_show_all_available_currencies = value;\\n    }\\n  }, {\\n    key: \\\"setBlockchainAddress\\\",\\n    value: function setBlockchainAddress(address) {\\n      this.blockchain_address = address;\\n    }\\n  }, {\\n    key: \\\"setIsCashierDefault\\\",\\n    value: function setIsCashierDefault(is_cashier_default) {\\n      this.is_cashier_default = is_cashier_default;\\n    }\\n  }, {\\n    key: \\\"setDepositTarget\\\",\\n    value: function setDepositTarget(target) {\\n      this.deposit_target = target;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      this.root_store.common.routeTo(this.deposit_target);\\n    }\\n  }, {\\n    key: \\\"setAccountSwitchListener\\\",\\n    value: function setAccountSwitchListener() {\\n      // cashier inits once and tries to stay active until switching account\\n      // since cashier calls take a long time to respond or display in iframe\\n      // so we don't have any unmount function here and everything gets reset on switch instead\\n      this.disposeSwitchAccount();\\n      this.onSwitchAccount(this.accountSwitcherListener);\\n    }\\n  }, {\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.config.payment_agent.setActiveTabIndex(index);\\n\\n      if (index === 1) {\\n        this.sendVerificationEmail();\\n      }\\n    } // Initialise P2P attributes on app load without mounting the entire cashier\\n\\n  }, {\\n    key: \\\"init\\\",\\n    value: function init() {\\n      var _this4 = this;\\n\\n      (0,external_mobx_.when)(function () {\\n        return _this4.root_store.client.is_logged_in;\\n      }, /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                _context5.next = 2;\\n                return _this4.getAdvertizerError();\\n\\n              case 2:\\n                _this4.checkP2pStatus();\\n\\n                _context5.next = 5;\\n                return _this4.check10kLimit();\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5);\\n      })));\\n      (0,external_mobx_.when)(function () {\\n        return _this4.is_payment_agent_visible;\\n      }, function () {\\n        return _this4.filterPaymentAgentList();\\n      });\\n      (0,external_mobx_.reaction)(function () {\\n        return [_this4.root_store.client.switched, _this4.root_store.client.is_logged_in, _this4.root_store.client.currency];\\n      }, /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\\n          while (1) {\\n            switch (_context6.prev = _context6.next) {\\n              case 0:\\n                _context6.next = 2;\\n                return _this4.WS.wait('get_settings');\\n\\n              case 2:\\n                if (!_this4.root_store.client.is_logged_in) {\\n                  _context6.next = 10;\\n                  break;\\n                }\\n\\n                _context6.next = 5;\\n                return _this4.getAdvertizerError();\\n\\n              case 5:\\n                _this4.account_prompt_dialog.resetLastLocation();\\n\\n                if (_this4.root_store.client.switched) {\\n                  _context6.next = 10;\\n                  break;\\n                }\\n\\n                _this4.checkP2pStatus(); // check if withdrawal limit is reached\\n                // if yes, this will trigger to show a notification\\n\\n\\n                _context6.next = 10;\\n                return _this4.check10kLimit();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context6.stop();\\n            }\\n          }\\n        }, _callee6);\\n      })));\\n      (0,external_mobx_.reaction)(function () {\\n        return [_this4.root_store.client.currency];\\n      }, function () {\\n        _this4.setIsWithdrawConfirmed(false);\\n      });\\n    }\\n  }, {\\n    key: \\\"getAdvertizerError\\\",\\n    value: function () {\\n      var _getAdvertizerError = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\\n        var advertiser_info;\\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\\n          while (1) {\\n            switch (_context7.prev = _context7.next) {\\n              case 0:\\n                _context7.next = 2;\\n                return this.WS.authorized.p2pAdvertiserInfo();\\n\\n              case 2:\\n                advertiser_info = _context7.sent;\\n                this.setP2pAdvertiserError((0,shared_.getPropertyValue)(advertiser_info, ['error', 'code']));\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context7.stop();\\n            }\\n          }\\n        }, _callee7, this);\\n      }));\\n\\n      function getAdvertizerError() {\\n        return _getAdvertizerError.apply(this, arguments);\\n      }\\n\\n      return getAdvertizerError;\\n    }()\\n  }, {\\n    key: \\\"setP2pAdvertiserError\\\",\\n    value: function setP2pAdvertiserError(value) {\\n      this.p2p_advertiser_error = value;\\n    }\\n  }, {\\n    key: \\\"checkP2pStatus\\\",\\n    value: function checkP2pStatus() {\\n      var advertiser_error = this.p2p_advertiser_error;\\n      var is_p2p_restricted = advertiser_error === 'RestrictedCountry' || advertiser_error === 'RestrictedCurrency';\\n      this.setIsP2pVisible(!(is_p2p_restricted || this.root_store.client.is_virtual));\\n    }\\n  }, {\\n    key: \\\"onMountCommon\\\",\\n    value: function () {\\n      var _onMountCommon = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(should_remount) {\\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\\n          while (1) {\\n            switch (_context8.prev = _context8.next) {\\n              case 0:\\n                if (!this.root_store.client.is_logged_in) {\\n                  _context8.next = 10;\\n                  break;\\n                }\\n\\n                if (!this.is_populating_values) {\\n                  _context8.next = 3;\\n                  break;\\n                }\\n\\n                return _context8.abrupt(\\\"return\\\");\\n\\n              case 3:\\n                this.is_populating_values = true;\\n\\n                if (should_remount) {\\n                  this.onRemount = this.onMountCommon;\\n                } // we need to see if client's country has PA\\n                // if yes, we can show the PA tab in cashier\\n\\n\\n                if (!this.config.payment_agent.list.length) {\\n                  this.setPaymentAgentList().then(this.filterPaymentAgentList);\\n                }\\n\\n                if (!this.config.payment_agent_transfer.is_payment_agent) {\\n                  this.checkIsPaymentAgent();\\n                }\\n\\n                if (!this.config.account_transfer.accounts_list.length) {\\n                  this.sortAccountsTransfer();\\n                }\\n\\n                if (!this.onramp.is_onramp_tab_visible && window.location.pathname.endsWith(shared_.routes.cashier_onramp)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                if (!this.is_crypto_transactions_visible && window.location.pathname.endsWith(shared_.routes.cashier_crypto_transactions)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                  this.transaction_history.setIsCryptoTransactionsVisible(true);\\n                  this.transaction_history.onMount();\\n                }\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context8.stop();\\n            }\\n          }\\n        }, _callee8, this);\\n      }));\\n\\n      function onMountCommon(_x4) {\\n        return _onMountCommon.apply(this, arguments);\\n      }\\n\\n      return onMountCommon;\\n    }()\\n  }, {\\n    key: \\\"setIsCryptoTransactionsVisible\\\",\\n    value: function setIsCryptoTransactionsVisible(is_visible) {\\n      this.is_crypto_transactions_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"setCashierTabIndex\\\",\\n    value: function setCashierTabIndex(index) {\\n      this.cashier_route_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"willMountWithdraw\\\",\\n    value: function willMountWithdraw(verification_code) {\\n      if (verification_code) {\\n        this.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"onMountWithdraw\\\",\\n    value: function () {\\n      var _onMountWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(verification_code) {\\n        var strRegExp, response_cashier;\\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\\n          while (1) {\\n            switch (_context9.prev = _context9.next) {\\n              case 0:\\n                this.setLoading(true);\\n                strRegExp = /^\\\\w{8,128}$/;\\n\\n                if (!strRegExp.test(verification_code)) {\\n                  _context9.next = 8;\\n                  break;\\n                }\\n\\n                _context9.next = 5;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +this.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 5:\\n                response_cashier = _context9.sent;\\n                _context9.next = 9;\\n                break;\\n\\n              case 8:\\n                response_cashier = {\\n                  error: {\\n                    code: 'InvalidToken',\\n                    message: 'Your token has expired or is invalid.'\\n                  }\\n                };\\n\\n              case 9:\\n                if (response_cashier.error.code === 'InvalidToken') {\\n                  this.handleCashierError(response_cashier.error);\\n                  this.setLoading(false);\\n                  this.setSessionTimeout(true);\\n                  this.clearTimeoutCashierUrl();\\n\\n                  if (verification_code) {\\n                    // clear verification code on error\\n                    this.clearVerification();\\n                  }\\n                } else {\\n                  this.setLoading(false);\\n                }\\n\\n                if (this.config.withdraw.error) {\\n                  this.setErrorMessage(this.config.withdraw.error, this.onMountWithdraw);\\n                }\\n\\n              case 11:\\n              case \\\"end\\\":\\n                return _context9.stop();\\n            }\\n          }\\n        }, _callee9, this);\\n      }));\\n\\n      function onMountWithdraw(_x5) {\\n        return _onMountWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountDeposit\\\",\\n    value: function () {\\n      var _onMountDeposit = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(verification_code) {\\n        var current_container, response_cashier;\\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\\n          while (1) {\\n            switch (_context10.prev = _context10.next) {\\n              case 0:\\n                current_container = this.active_container;\\n                this.setErrorMessage('');\\n                this.setContainerHeight(0);\\n                this.setLoading(true);\\n\\n                if (this.config[this.active_container].is_session_timeout) {\\n                  _context10.next = 7;\\n                  break;\\n                }\\n\\n                this.checkIframeLoaded();\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 7:\\n                // if session has timed out reset everything\\n                this.setIframeUrl('');\\n\\n                if (!(this.active_container === this.config.withdraw.container && !verification_code || this.root_store.client.is_virtual)) {\\n                  _context10.next = 11;\\n                  break;\\n                }\\n\\n                this.setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 11:\\n                _context10.next = 13;\\n                return this.WS.authorized.cashier(this.active_container, {\\n                  verification_code: verification_code\\n                });\\n\\n              case 13:\\n                response_cashier = _context10.sent;\\n\\n                if (!(current_container !== this.active_container)) {\\n                  _context10.next = 17;\\n                  break;\\n                }\\n\\n                this.setLoading(false);\\n                return _context10.abrupt(\\\"return\\\");\\n\\n              case 17:\\n                if (!response_cashier.error) {\\n                  _context10.next = 25;\\n                  break;\\n                }\\n\\n                this.handleCashierError(response_cashier.error);\\n                this.setLoading(false);\\n                this.setSessionTimeout(true);\\n                this.clearTimeoutCashierUrl();\\n\\n                if (verification_code) {\\n                  // clear verification code on error\\n                  this.clearVerification();\\n                }\\n\\n                _context10.next = 36;\\n                break;\\n\\n              case 25:\\n                if (!(0,shared_.isCryptocurrency)(this.root_store.client.currency)) {\\n                  _context10.next = 31;\\n                  break;\\n                }\\n\\n                this.setLoading(false);\\n                this.setContainerHeight('380');\\n                this.setIframeUrl(response_cashier.cashier); // crypto cashier can only be accessed once and the session expires\\n                // so no need to set timeouts to keep the session alive\\n\\n                _context10.next = 36;\\n                break;\\n\\n              case 31:\\n                _context10.next = 33;\\n                return this.checkIframeLoaded();\\n\\n              case 33:\\n                this.setIframeUrl(response_cashier.cashier);\\n                this.setSessionTimeout(false);\\n                this.setTimeoutCashierUrl();\\n\\n              case 36:\\n              case \\\"end\\\":\\n                return _context10.stop();\\n            }\\n          }\\n        }, _callee10, this);\\n      }));\\n\\n      function onMountDeposit(_x6) {\\n        return _onMountDeposit.apply(this, arguments);\\n      }\\n\\n      return onMountDeposit;\\n    }()\\n  }, {\\n    key: \\\"setNotificationCount\\\",\\n    value: function setNotificationCount(notification_count) {\\n      this.p2p_notification_count = notification_count;\\n    }\\n  }, {\\n    key: \\\"setIsP2pVisible\\\",\\n    value: function setIsP2pVisible(is_p2p_visible) {\\n      this.is_p2p_visible = is_p2p_visible;\\n\\n      if (!is_p2p_visible && window.location.pathname.endsWith(shared_.routes.cashier_p2p)) {\\n        var _this$account_prompt_;\\n\\n        this.root_store.common.routeTo((_this$account_prompt_ = this.account_prompt_dialog.last_location) !== null && _this$account_prompt_ !== void 0 ? _this$account_prompt_ : shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(verification_code) {\\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\\n          while (1) {\\n            switch (_context11.prev = _context11.next) {\\n              case 0:\\n                this.onRemount = this.onMount;\\n                _context11.next = 3;\\n                return this.onMountCommon();\\n\\n              case 3:\\n                if (!(this.containers.indexOf(this.active_container) === -1 && !this.root_store.client.is_switching && this.active_container !== this.config.payment_agent.container)) {\\n                  _context11.next = 5;\\n                  break;\\n                }\\n\\n                throw new Error('Cashier Store onMount requires a valid container name.');\\n\\n              case 5:\\n                this.onMountDeposit(verification_code);\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context11.stop();\\n            }\\n          }\\n        }, _callee11, this);\\n      }));\\n\\n      function onMount(_x7) {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"is_cashier_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie;\\n\\n      if (!((_this$root_store$clie = this.root_store.client.account_status) !== null && _this$root_store$clie !== void 0 && _this$root_store$clie.status)) return false;\\n      var status = this.root_store.client.account_status.status;\\n      return status.some(function (status_name) {\\n        return status_name === 'cashier_locked';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_system_maintenance\\\",\\n    get: function get() {\\n      var _this$root_store$clie2;\\n\\n      if (!((_this$root_store$clie2 = this.root_store.client.account_status) !== null && _this$root_store$clie2 !== void 0 && _this$root_store$clie2.cashier_validation)) return false;\\n      var cashier_validation = this.root_store.client.account_status.cashier_validation;\\n      return cashier_validation.some(function (validation) {\\n        return validation === 'system_maintenance';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_deposit_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie3 = this.root_store.client,\\n          is_authentication_needed = _this$root_store$clie3.is_authentication_needed,\\n          is_tnc_needed = _this$root_store$clie3.is_tnc_needed,\\n          is_financial_account = _this$root_store$clie3.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie3.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie3.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie3.account_status,\\n          is_eu = _this$root_store$clie3.is_eu,\\n          mt5_login_list = _this$root_store$clie3.mt5_login_list,\\n          is_deposit_lock = _this$root_store$clie3.is_deposit_lock;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      var need_authentication = this.config.deposit.error.is_ask_authentication || is_authentication_needed && is_eu;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete); // CR can deposit without accepting latest tnc except those with Financial STP\\n\\n      var need_tnc = (is_eu || mt5_login_list.some(function (item) {\\n        return item.account_type === 'real' && item.sub_account_type === 'financial_stp';\\n      })) && is_tnc_needed;\\n      return is_deposit_lock || need_authentication || need_tnc || need_financial_assessment || this.config.deposit.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"is_withdrawal_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie4;\\n\\n      if (!((_this$root_store$clie4 = this.root_store.client.account_status) !== null && _this$root_store$clie4 !== void 0 && _this$root_store$clie4.status)) return false;\\n      var authentication = this.root_store.client.account_status.authentication;\\n      var need_poi = authentication.needs_verification.includes('identity');\\n      var need_authentication = this.config.withdraw.error.is_ask_authentication && need_poi;\\n      return this.root_store.client.is_withdrawal_lock || need_authentication || this.config.withdraw.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"is_transfer_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie5 = this.root_store.client,\\n          is_financial_account = _this$root_store$clie5.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie5.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie5.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie5.account_status;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\\n      return need_financial_assessment && this.config.account_transfer.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"setMaxWithdrawAmount\\\",\\n    value: function setMaxWithdrawAmount(amount) {\\n      this.max_withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"check10kLimit\\\",\\n    value: function () {\\n      var _check10kLimit = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\\n        var _yield$this$root_stor, _yield$this$root_stor2;\\n\\n        var remainder, min_withdrawal, is_limit_reached;\\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\\n          while (1) {\\n            switch (_context12.prev = _context12.next) {\\n              case 0:\\n                _context12.next = 2;\\n                return this.root_store.client.getLimits();\\n\\n              case 2:\\n                _context12.t1 = _yield$this$root_stor = _context12.sent;\\n                _context12.t0 = _context12.t1 === null;\\n\\n                if (_context12.t0) {\\n                  _context12.next = 6;\\n                  break;\\n                }\\n\\n                _context12.t0 = _yield$this$root_stor === void 0;\\n\\n              case 6:\\n                if (!_context12.t0) {\\n                  _context12.next = 10;\\n                  break;\\n                }\\n\\n                _context12.t2 = void 0;\\n                _context12.next = 11;\\n                break;\\n\\n              case 10:\\n                _context12.t2 = (_yield$this$root_stor2 = _yield$this$root_stor.get_limits) === null || _yield$this$root_stor2 === void 0 ? void 0 : _yield$this$root_stor2.remainder;\\n\\n              case 11:\\n                remainder = _context12.t2;\\n                this.setMaxWithdrawAmount(remainder);\\n                min_withdrawal = (0,shared_.getMinWithdrawal)(this.root_store.client.currency);\\n                is_limit_reached = !!(typeof remainder !== 'undefined' && +remainder < min_withdrawal);\\n                this.set10kLimitation(is_limit_reached);\\n\\n              case 16:\\n              case \\\"end\\\":\\n                return _context12.stop();\\n            }\\n          }\\n        }, _callee12, this);\\n      }));\\n\\n      function check10kLimit() {\\n        return _check10kLimit.apply(this, arguments);\\n      }\\n\\n      return check10kLimit;\\n    }()\\n  }, {\\n    key: \\\"set10kLimitation\\\",\\n    value: function set10kLimitation(is_limit_reached) {\\n      this.is_10k_withdrawal_limit_reached = is_limit_reached;\\n    }\\n  }, {\\n    key: \\\"checkIframeLoaded\\\",\\n    value: function () {\\n      var _checkIframeLoaded = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\\n          while (1) {\\n            switch (_context13.prev = _context13.next) {\\n              case 0:\\n                this.removeOnIframeLoaded();\\n\\n                this.config[this.active_container].onIframeLoaded = function (e) {\\n                  if (/cashier|doughflow/.test(e.origin)) {\\n                    this.setLoading(false); // set the height of the container after content loads so that the\\n                    // loading bar stays vertically centered until the end\\n\\n                    if (this.root_store.ui.is_mobile) {\\n                      this.setContainerHeight(window.innerHeight - 100);\\n                    } else {\\n                      this.setContainerHeight(window.innerHeight - 190);\\n                    } // do not remove the listener\\n                    // on every iframe screen change we need to update the height to more/less to match the new content\\n\\n                  }\\n                }.bind(this);\\n\\n                window.addEventListener('message', this.config[this.active_container].onIframeLoaded, false);\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context13.stop();\\n            }\\n          }\\n        }, _callee13, this);\\n      }));\\n\\n      function checkIframeLoaded() {\\n        return _checkIframeLoaded.apply(this, arguments);\\n      }\\n\\n      return checkIframeLoaded;\\n    }()\\n  }, {\\n    key: \\\"removeOnIframeLoaded\\\",\\n    value: function removeOnIframeLoaded() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].onIframeLoaded) {\\n        window.removeEventListener('message', this.config[container].onIframeLoaded, false);\\n        this.config[container].onIframeLoaded = '';\\n      }\\n    }\\n  }, {\\n    key: \\\"setIframeUrl\\\",\\n    value: function setIframeUrl(url) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n\\n      if (url) {\\n        this.config[container].iframe_url = \\\"\\\".concat(url, \\\"&theme=\\\").concat(this.root_store.ui.is_dark_mode_on ? 'dark' : 'light'); // after we set iframe url we can clear verification code\\n\\n        this.root_store.client.setVerificationCode('', this.map_action[container]);\\n      } else {\\n        this.config[container].iframe_url = url;\\n      }\\n    }\\n  }, {\\n    key: \\\"setContainerHeight\\\",\\n    value: function setContainerHeight(height) {\\n      this.config[this.active_container].iframe_height = height;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(error, onClickButton, is_show_full_page, is_verification_error) {\\n      // for errors that need to show a button, reset the form\\n      var error_object = cashier_store_objectSpread({\\n        onClickButton: onClickButton,\\n        code: error.code,\\n        message: error.message,\\n        is_show_full_page: is_show_full_page || /InvalidToken|WrongResponse/.test(error.code)\\n      }, (0,shared_.getPropertyValue)(error, ['details', 'fields']) && {\\n        fields: error.details.fields\\n      });\\n\\n      if (is_verification_error && this.config[this.active_container].verification) {\\n        this.config[this.active_container].verification.error = error_object;\\n      } else {\\n        this.config[this.active_container].error = error_object;\\n      }\\n    }\\n  }, {\\n    key: \\\"handleCashierError\\\",\\n    value: function handleCashierError(error) {\\n      switch (error.code) {\\n        case 'ASK_TNC_APPROVAL':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_FIX_DETAILS':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_UK_FUNDS_PROTECTION':\\n          this.config[this.active_container].error = {\\n            is_ask_uk_funds_protection: true\\n          };\\n          break;\\n\\n        case 'ASK_SELF_EXCLUSION_MAX_TURNOVER_SET':\\n          this.config[this.active_container].error = {\\n            is_self_exclusion_max_turnover_set: true\\n          };\\n          break;\\n\\n        case 'ASK_AUTHENTICATE':\\n        case 'ASK_AGE_VERIFICATION':\\n          this.config[this.active_container].error = {\\n            is_ask_authentication: true\\n          };\\n          break;\\n\\n        case 'ASK_FINANCIAL_RISK_APPROVAL':\\n          this.config[this.active_container].error = {\\n            is_ask_financial_risk_approval: true\\n          };\\n          break;\\n\\n        default:\\n          this.config[this.active_container].error = {\\n            is_ask_uk_funds_protection: false,\\n            is_self_exclusion_max_turnover_set: false,\\n            is_ask_authentication: false,\\n            is_ask_financial_risk_approval: false\\n          };\\n          this.setErrorMessage(error);\\n      }\\n    }\\n  }, {\\n    key: \\\"setErrorConfig\\\",\\n    value: function setErrorConfig(config_name, value) {\\n      this.config[this.active_container].error = cashier_store_defineProperty({}, config_name, value);\\n    }\\n  }, {\\n    key: \\\"submitFundsProtection\\\",\\n    value: function submitFundsProtection() {\\n      var _this5 = this;\\n\\n      this.WS.send({\\n        ukgc_funds_protection: 1,\\n        tnc_approval: 1\\n      }).then(function (response) {\\n        if (response.error) {\\n          _this5.setErrorConfig('message', response.error.message);\\n        } else {\\n          location.reload();\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setSessionTimeout\\\",\\n    value: function setSessionTimeout(is_session_time_out) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].is_session_timeout = is_session_time_out;\\n\\n      if (is_session_time_out) {\\n        this.removeOnIframeLoaded(container);\\n      }\\n    }\\n  }, {\\n    key: \\\"setVerificationButtonClicked\\\",\\n    value: function setVerificationButtonClicked(is_button_clicked) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_button_clicked = is_button_clicked;\\n    }\\n  }, {\\n    key: \\\"setVerificationEmailSent\\\",\\n    value: function setVerificationEmailSent(is_email_sent) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_email_sent = is_email_sent;\\n    }\\n  }, {\\n    key: \\\"setVerificationResendClicked\\\",\\n    value: function setVerificationResendClicked(is_resend_clicked) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.is_resend_clicked = is_resend_clicked;\\n    }\\n  }, {\\n    key: \\\"setVerificationResendTimeout\\\",\\n    value: function setVerificationResendTimeout(resend_timeout) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.active_container;\\n      this.config[container].verification.resend_timeout = resend_timeout;\\n    }\\n  }, {\\n    key: \\\"clearTimeoutCashierUrl\\\",\\n    value: function clearTimeoutCashierUrl() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].timeout_session) {\\n        clearTimeout(this.config[container].timeout_session);\\n      }\\n    } // cashier session expires after one minute\\n    // so we should resend the request for container (deposit|withdraw) url on next mount\\n\\n  }, {\\n    key: \\\"setTimeoutCashierUrl\\\",\\n    value: function setTimeoutCashierUrl() {\\n      var _this6 = this;\\n\\n      this.clearTimeoutCashierUrl();\\n      this.config[this.active_container].timeout_session = setTimeout(function () {\\n        _this6.setSessionTimeout(true);\\n      }, 60000);\\n    }\\n  }, {\\n    key: \\\"clearTimeoutVerification\\\",\\n    value: function clearTimeoutVerification() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n\\n      if (this.config[container].verification.timeout_button) {\\n        clearTimeout(this.config[container].verification.timeout_button);\\n      }\\n    } // verification token expires after one hour\\n    // so we should show the verification request button again after that\\n\\n  }, {\\n    key: \\\"setTimeoutVerification\\\",\\n    value: function setTimeoutVerification() {\\n      var _this7 = this;\\n\\n      this.clearTimeoutVerification();\\n      this.config[this.active_container].verification.timeout_button = setTimeout(function () {\\n        _this7.clearVerification();\\n      }, 3600000);\\n    }\\n  }, {\\n    key: \\\"sendVerificationEmail\\\",\\n    value: function () {\\n      var _sendVerificationEmail = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\\n        var _this8 = this;\\n\\n        var withdrawal_type, response_verify_email;\\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\\n          while (1) {\\n            switch (_context14.prev = _context14.next) {\\n              case 0:\\n                if (!(this.config[this.active_container].verification.is_button_clicked || !this.root_store.client.email)) {\\n                  _context14.next = 2;\\n                  break;\\n                }\\n\\n                return _context14.abrupt(\\\"return\\\");\\n\\n              case 2:\\n                this.setErrorMessage('');\\n                this.setVerificationButtonClicked(true);\\n                withdrawal_type = \\\"payment\\\".concat(this.active_container === this.config.payment_agent.container ? 'agent' : '', \\\"_withdraw\\\");\\n                _context14.next = 7;\\n                return this.WS.verifyEmail(this.root_store.client.email, withdrawal_type);\\n\\n              case 7:\\n                response_verify_email = _context14.sent;\\n\\n                if (response_verify_email.error) {\\n                  this.clearVerification();\\n\\n                  if (response_verify_email.error.code === 'PaymentAgentWithdrawError') {\\n                    this.setErrorMessage(response_verify_email.error, this.resetPaymentAgent, null, true);\\n                  } else {\\n                    this.setErrorMessage(response_verify_email.error, function () {\\n                      _this8.setErrorMessage('', null, null, true);\\n                    }, null, true);\\n                  }\\n                } else {\\n                  this.setVerificationEmailSent(true);\\n                  this.setTimeoutVerification();\\n                }\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context14.stop();\\n            }\\n          }\\n        }, _callee14, this);\\n      }));\\n\\n      function sendVerificationEmail() {\\n        return _sendVerificationEmail.apply(this, arguments);\\n      }\\n\\n      return sendVerificationEmail;\\n    }()\\n  }, {\\n    key: \\\"resendVerificationEmail\\\",\\n    value: function resendVerificationEmail() {\\n      // don't allow clicking while ongoing timeout\\n      if (this.config[this.active_container].verification.resend_timeout < 60) {\\n        return;\\n      }\\n\\n      this.setVerificationButtonClicked(false);\\n      this.setCountDownResendVerification();\\n      this.sendVerificationEmail();\\n    }\\n  }, {\\n    key: \\\"setCountDownResendVerification\\\",\\n    value: function setCountDownResendVerification() {\\n      var _this9 = this;\\n\\n      this.setVerificationResendTimeout(this.config[this.active_container].verification.resend_timeout - 1);\\n      var resend_interval = setInterval(function () {\\n        if (!_this9.config[_this9.active_container] || !_this9.config[_this9.active_container].verification) {\\n          clearInterval(resend_interval);\\n          return;\\n        }\\n\\n        if (_this9.config[_this9.active_container].verification.resend_timeout === 1) {\\n          _this9.setVerificationResendTimeout(60);\\n\\n          clearInterval(resend_interval);\\n        } else {\\n          _this9.setVerificationResendTimeout(_this9.config[_this9.active_container].verification.resend_timeout - 1);\\n        }\\n      }, 1000);\\n    }\\n  }, {\\n    key: \\\"clearVerification\\\",\\n    value: function clearVerification() {\\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active_container;\\n      this.clearTimeoutVerification(container);\\n      this.setVerificationButtonClicked(false, container);\\n      this.setVerificationEmailSent(false, container);\\n      this.setVerificationResendClicked(false, container);\\n      this.setVerificationResendTimeout(60, container);\\n      this.setErrorMessage('', null, null, true);\\n      this.root_store.client.setVerificationCode('', this.map_action[container]);\\n    }\\n  }, {\\n    key: \\\"setIsTimerVisible\\\",\\n    value: function setIsTimerVisible(is_timer_visible) {\\n      this.is_timer_visible = is_timer_visible;\\n    }\\n  }, {\\n    key: \\\"resetTimer\\\",\\n    value: function resetTimer() {\\n      this.setIsTimerVisible(false);\\n    }\\n  }, {\\n    key: \\\"getExchangeRate\\\",\\n    value: function () {\\n      var _getExchangeRate = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(from_currency, to_currency) {\\n        var _yield$this$WS$send, exchange_rates;\\n\\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\\n          while (1) {\\n            switch (_context15.prev = _context15.next) {\\n              case 0:\\n                _context15.next = 2;\\n                return this.WS.send({\\n                  exchange_rates: 1,\\n                  base_currency: from_currency\\n                });\\n\\n              case 2:\\n                _yield$this$WS$send = _context15.sent;\\n                exchange_rates = _yield$this$WS$send.exchange_rates;\\n                return _context15.abrupt(\\\"return\\\", exchange_rates.rates[to_currency]);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context15.stop();\\n            }\\n          }\\n        }, _callee15, this);\\n      }));\\n\\n      function getExchangeRate(_x8, _x9) {\\n        return _getExchangeRate.apply(this, arguments);\\n      }\\n\\n      return getExchangeRate;\\n    }()\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(container) {\\n      this.active_container = container;\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentList\\\",\\n    value: function () {\\n      var _onMountPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\\n          while (1) {\\n            switch (_context16.prev = _context16.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentList;\\n                _context16.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                this.setLoading(false);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context16.stop();\\n            }\\n          }\\n        }, _callee16, this);\\n      }));\\n\\n      function onMountPaymentAgentList() {\\n        return _onMountPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getPaymentAgentList\\\",\\n    value: function () {\\n      var _getPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\\n          while (1) {\\n            switch (_context17.prev = _context17.next) {\\n              case 0:\\n                if (!this.config.payment_agent.list.length) {\\n                  _context17.next = 2;\\n                  break;\\n                }\\n\\n                return _context17.abrupt(\\\"return\\\", this.WS.wait('paymentagent_list'));\\n\\n              case 2:\\n                _context17.next = 4;\\n                return this.WS.wait('get_settings');\\n\\n              case 4:\\n                return _context17.abrupt(\\\"return\\\", this.WS.authorized.paymentAgentList(this.root_store.client.residence, this.root_store.client.currency));\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context17.stop();\\n            }\\n          }\\n        }, _callee17, this);\\n      }));\\n\\n      function getPaymentAgentList() {\\n        return _getPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getAllPaymentAgentList\\\",\\n    value: function () {\\n      var _getAllPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\\n          while (1) {\\n            switch (_context18.prev = _context18.next) {\\n              case 0:\\n                _context18.next = 2;\\n                return this.WS.wait('get_settings');\\n\\n              case 2:\\n                return _context18.abrupt(\\\"return\\\", this.WS.allPaymentAgentList(this.root_store.client.residence));\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context18.stop();\\n            }\\n          }\\n        }, _callee18, this);\\n      }));\\n\\n      function getAllPaymentAgentList() {\\n        return _getAllPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getAllPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"setAllPaymentAgentList\\\",\\n    value: function setAllPaymentAgentList(list) {\\n      this.all_payment_agent_list = list;\\n    }\\n  }, {\\n    key: \\\"getPaymentAgentDetails\\\",\\n    value: function () {\\n      var _getPaymentAgentDetails = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\\n        var _yield$this$WS$author, paymentagent_details;\\n\\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\\n          while (1) {\\n            switch (_context19.prev = _context19.next) {\\n              case 0:\\n                _context19.next = 2;\\n                return this.WS.authorized.paymentAgentDetails();\\n\\n              case 2:\\n                _yield$this$WS$author = _context19.sent;\\n                paymentagent_details = _yield$this$WS$author.paymentagent_details;\\n                return _context19.abrupt(\\\"return\\\", paymentagent_details);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context19.stop();\\n            }\\n          }\\n        }, _callee19, this);\\n      }));\\n\\n      function getPaymentAgentDetails() {\\n        return _getPaymentAgentDetails.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentDetails;\\n    }()\\n  }, {\\n    key: \\\"addSupportedBank\\\",\\n    value: function addSupportedBank(bank) {\\n      var supported_bank_exists = this.config.payment_agent.supported_banks.find(function (supported_bank) {\\n        return supported_bank.value === bank.toLowerCase();\\n      });\\n\\n      if (!supported_bank_exists) {\\n        this.config.payment_agent.supported_banks.push({\\n          text: bank,\\n          value: bank.toLowerCase()\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"sortSupportedBanks\\\",\\n    value: function sortSupportedBanks() {\\n      // sort supported banks alphabetically by value, the option 'All payment agents' with value 0 should be on top\\n      this.config.payment_agent.supported_banks.replace(this.config.payment_agent.supported_banks.slice().sort(function (a, b) {\\n        if (a.value < b.value) {\\n          return -1;\\n        }\\n\\n        if (a.value > b.value) {\\n          return 1;\\n        }\\n\\n        return 0;\\n      }));\\n    }\\n  }, {\\n    key: \\\"setPaymentAgentList\\\",\\n    value: function () {\\n      var _setPaymentAgentList = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(pa_list) {\\n        var _this10 = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\\n          while (1) {\\n            switch (_context20.prev = _context20.next) {\\n              case 0:\\n                _context20.t0 = pa_list;\\n\\n                if (_context20.t0) {\\n                  _context20.next = 5;\\n                  break;\\n                }\\n\\n                _context20.next = 4;\\n                return this.getPaymentAgentList();\\n\\n              case 4:\\n                _context20.t0 = _context20.sent;\\n\\n              case 5:\\n                payment_agent_list = _context20.t0;\\n\\n                if (!(!payment_agent_list || !payment_agent_list.paymentagent_list)) {\\n                  _context20.next = 8;\\n                  break;\\n                }\\n\\n                return _context20.abrupt(\\\"return\\\");\\n\\n              case 8:\\n                // TODO: Once telephone, url and supported_banks removed from paymentagent_list.list we can remove them and just use the plural ones\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this10.config.payment_agent.list.push({\\n                    email: payment_agent.email,\\n                    phones: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.phone_numbers) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.telephone),\\n                    name: payment_agent.name,\\n                    supported_banks: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_payment_methods) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_banks),\\n                    urls: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.urls) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.url)\\n                  });\\n\\n                  if (payment_agent.supported_banks) {\\n                    var supported_banks_array = payment_agent !== null && payment_agent !== void 0 && payment_agent.supported_payment_methods ? payment_agent.supported_payment_methods.map(function (bank) {\\n                      return bank.payment_method;\\n                    }) : payment_agent.supported_banks.split(',');\\n                    supported_banks_array.forEach(function (bank) {\\n                      _this10.addSupportedBank(bank);\\n                    });\\n                  }\\n                });\\n                this.sortSupportedBanks();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context20.stop();\\n            }\\n          }\\n        }, _callee20, this);\\n      }));\\n\\n      function setPaymentAgentList(_x10) {\\n        return _setPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return setPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"filterPaymentAgentList\\\",\\n    value: function filterPaymentAgentList(bank) {\\n      var _this11 = this;\\n\\n      if (bank) {\\n        this.config.payment_agent.filtered_list = [];\\n        this.config.payment_agent.list.forEach(function (payment_agent) {\\n          if (payment_agent.supported_banks && payment_agent.supported_banks.toLowerCase().split(',').indexOf(bank) !== -1) {\\n            _this11.config.payment_agent.filtered_list.push(payment_agent);\\n          }\\n        });\\n      } else {\\n        this.config.payment_agent.filtered_list = this.config.payment_agent.list;\\n      }\\n\\n      if (!this.is_payment_agent_visible && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangePaymentMethod\\\",\\n    value: function onChangePaymentMethod(_ref11) {\\n      var target = _ref11.target;\\n      var value = target.value === '0' ? parseInt(target.value) : target.value;\\n      this.config.payment_agent.selected_bank = value;\\n      this.filterPaymentAgentList(value);\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _onMountPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {\\n        var _this12 = this;\\n\\n        var payment_agent_list;\\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\\n          while (1) {\\n            switch (_context21.prev = _context21.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentWithdraw;\\n                _context21.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                this.setIsWithdraw(true);\\n                this.setIsWithdrawSuccessful(false);\\n                this.setReceipt({});\\n\\n                if (this.config.payment_agent.agents.length) {\\n                  _context21.next = 16;\\n                  break;\\n                }\\n\\n                _context21.next = 10;\\n                return this.getPaymentAgentList();\\n\\n              case 10:\\n                payment_agent_list = _context21.sent;\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this12.addPaymentAgent(payment_agent);\\n                });\\n\\n                if (!payment_agent_list.paymentagent_list.list.length && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n                  this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                this.setLoading(false);\\n                _context21.next = 17;\\n                break;\\n\\n              case 16:\\n                this.setLoading(false);\\n\\n              case 17:\\n              case \\\"end\\\":\\n                return _context21.stop();\\n            }\\n          }\\n        }, _callee21, this);\\n      }));\\n\\n      function onMountPaymentAgentWithdraw() {\\n        return _onMountPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"setIsWithdraw\\\",\\n    value: function setIsWithdraw() {\\n      var is_withdraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.config.payment_agent.is_withdraw;\\n      this.config.payment_agent.is_withdraw = is_withdraw;\\n    }\\n  }, {\\n    key: \\\"setIsTryWithdrawSuccessful\\\",\\n    value: function setIsTryWithdrawSuccessful(is_try_withdraw_successful) {\\n      this.setErrorMessage('');\\n      this.config.payment_agent.is_try_withdraw_successful = is_try_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setIsWithdrawSuccessful\\\",\\n    value: function setIsWithdrawSuccessful(is_withdraw_successful) {\\n      this.config.payment_agent.is_withdraw_successful = is_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmation\\\",\\n    value: function setConfirmation(_ref12) {\\n      var amount = _ref12.amount,\\n          currency = _ref12.currency,\\n          loginid = _ref12.loginid,\\n          payment_agent_name = _ref12.payment_agent_name;\\n      this.config.payment_agent.confirm = {\\n        amount: amount,\\n        currency: currency,\\n        loginid: loginid,\\n        payment_agent_name: payment_agent_name\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceipt\\\",\\n    value: function setReceipt(_ref13) {\\n      var amount_transferred = _ref13.amount_transferred,\\n          payment_agent_email = _ref13.payment_agent_email,\\n          payment_agent_id = _ref13.payment_agent_id,\\n          payment_agent_name = _ref13.payment_agent_name,\\n          payment_agent_phone = _ref13.payment_agent_phone,\\n          payment_agent_url = _ref13.payment_agent_url;\\n      this.config.payment_agent.receipt = {\\n        amount_transferred: amount_transferred,\\n        payment_agent_email: payment_agent_email,\\n        payment_agent_id: payment_agent_id,\\n        payment_agent_name: payment_agent_name,\\n        payment_agent_phone: payment_agent_phone,\\n        payment_agent_url: payment_agent_url\\n      };\\n    }\\n  }, {\\n    key: \\\"addPaymentAgent\\\",\\n    value: function addPaymentAgent(payment_agent) {\\n      this.config.payment_agent.agents.push({\\n        text: payment_agent.name,\\n        value: payment_agent.paymentagent_loginid,\\n        max_withdrawal: payment_agent.max_withdrawal,\\n        min_withdrawal: payment_agent.min_withdrawal,\\n        email: payment_agent.email,\\n        phone: payment_agent.telephone,\\n        url: payment_agent.url\\n      });\\n    }\\n  }, {\\n    key: \\\"requestTryPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestTryPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(_ref14) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\\n          while (1) {\\n            switch (_context22.prev = _context22.next) {\\n              case 0:\\n                loginid = _ref14.loginid, currency = _ref14.currency, amount = _ref14.amount, verification_code = _ref14.verification_code;\\n                this.setErrorMessage('');\\n                _context22.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context22.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 2) {\\n                  selected_agent = this.config.payment_agent.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setConfirmation(cashier_store_objectSpread({\\n                    amount: amount,\\n                    currency: currency,\\n                    loginid: loginid\\n                  }, selected_agent && {\\n                    payment_agent_name: selected_agent.text\\n                  }));\\n                  this.setIsTryWithdrawSuccessful(true);\\n                } else {\\n                  this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context22.stop();\\n            }\\n          }\\n        }, _callee22, this);\\n      }));\\n\\n      function requestTryPaymentAgentWithdraw(_x11) {\\n        return _requestTryPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestTryPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestPaymentAgentWithdraw = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(_ref15) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\\n          while (1) {\\n            switch (_context23.prev = _context23.next) {\\n              case 0:\\n                loginid = _ref15.loginid, currency = _ref15.currency, amount = _ref15.amount, verification_code = _ref15.verification_code;\\n                this.setErrorMessage('');\\n                _context23.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context23.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 1) {\\n                  selected_agent = this.config.payment_agent.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setReceipt(cashier_store_objectSpread(cashier_store_objectSpread({\\n                    amount_transferred: (0,shared_.formatMoney)(currency, amount, true)\\n                  }, selected_agent && {\\n                    payment_agent_email: selected_agent.email,\\n                    payment_agent_id: selected_agent.value,\\n                    payment_agent_name: selected_agent.text,\\n                    payment_agent_phone: selected_agent.phone,\\n                    payment_agent_url: selected_agent.url\\n                  }), !selected_agent && {\\n                    payment_agent_id: loginid\\n                  }));\\n                  this.setIsWithdrawSuccessful(true);\\n                  this.setIsTryWithdrawSuccessful(false);\\n                  this.setConfirmation({});\\n                } else {\\n                  this.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context23.stop();\\n            }\\n          }\\n        }, _callee23, this);\\n      }));\\n\\n      function requestPaymentAgentWithdraw(_x12) {\\n        return _requestPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountAccountTransfer\\\",\\n    value: // possible transfers:\\n    // 1. fiat to crypto & vice versa\\n    // 2. fiat to mt & vice versa\\n    // 3. crypto to mt & vice versa\\n    function () {\\n      var _onMountAccountTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {\\n        var _this13 = this;\\n\\n        var has_updated_account_balance, _this$config$account_, transfer_between_accounts, cfd_transfer_to_login_id, obj_values;\\n\\n        return regeneratorRuntime.wrap(function _callee24$(_context24) {\\n          while (1) {\\n            switch (_context24.prev = _context24.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountAccountTransfer;\\n                _context24.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                _context24.next = 6;\\n                return this.WS.wait('website_status');\\n\\n              case 6:\\n                // check if some balance update has come in since the last mount\\n                has_updated_account_balance = this.config.account_transfer.has_no_accounts_balance && Object.keys(this.root_store.client.active_accounts).find(function (account) {\\n                  return !_this13.root_store.client.active_accounts[account].is_virtual && _this13.root_store.client.active_accounts[account].balance;\\n                });\\n\\n                if (has_updated_account_balance) {\\n                  this.setHasNoAccountsBalance(false);\\n                } // various issues happen when loading from cache\\n                // e.g. new account may have been created, transfer may have been done elsewhere, etc\\n                // so on load of this page just call it again\\n\\n\\n                if (!this.root_store.client.is_logged_in) {\\n                  _context24.next = 24;\\n                  break;\\n                }\\n\\n                _context24.next = 11;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 11:\\n                transfer_between_accounts = _context24.sent;\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context24.next = 16;\\n                  break;\\n                }\\n\\n                this.setErrorMessage(transfer_between_accounts.error, this.onMountAccountTransfer);\\n                this.setLoading(false);\\n                return _context24.abrupt(\\\"return\\\");\\n\\n              case 16:\\n                if (this.canDoAccountTransfer(transfer_between_accounts.accounts)) {\\n                  _context24.next = 18;\\n                  break;\\n                }\\n\\n                return _context24.abrupt(\\\"return\\\");\\n\\n              case 18:\\n                _context24.next = 20;\\n                return this.sortAccountsTransfer(transfer_between_accounts);\\n\\n              case 20:\\n                this.setTransferFee();\\n                this.setMinimumFee();\\n                this.setTransferLimit();\\n\\n                if (((_this$config$account_ = this.config.account_transfer.accounts_list) === null || _this$config$account_ === void 0 ? void 0 : _this$config$account_.length) > 0) {\\n                  cfd_transfer_to_login_id = sessionStorage.getItem('cfd_transfer_to_login_id');\\n                  sessionStorage.removeItem('cfd_transfer_to_login_id');\\n                  obj_values = this.config.account_transfer.accounts_list.find(function (account) {\\n                    return account.value === cfd_transfer_to_login_id;\\n                  });\\n\\n                  if (obj_values) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    }\\n\\n                    this.setSelectedTo(obj_values);\\n                  }\\n                }\\n\\n              case 24:\\n                this.setLoading(false);\\n\\n              case 25:\\n              case \\\"end\\\":\\n                return _context24.stop();\\n            }\\n          }\\n        }, _callee24, this);\\n      }));\\n\\n      function onMountAccountTransfer() {\\n        return _onMountAccountTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountAccountTransfer;\\n    }()\\n  }, {\\n    key: \\\"canDoAccountTransfer\\\",\\n    value: function canDoAccountTransfer(accounts) {\\n      var can_transfer = true; // should have at least one account with balance\\n\\n      if (!accounts.find(function (account) {\\n        return +account.balance > 0;\\n      })) {\\n        can_transfer = false;\\n        this.setHasNoAccountsBalance(true);\\n      } else {\\n        this.setHasNoAccountsBalance(false);\\n      } // should have at least two real-money accounts\\n\\n\\n      if (accounts.length <= 1) {\\n        can_transfer = false;\\n        this.setHasNoAccount(true);\\n      } else {\\n        this.setHasNoAccount(false);\\n      }\\n\\n      if (!can_transfer) {\\n        this.setLoading(false);\\n      }\\n\\n      return can_transfer;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccountsBalance\\\",\\n    value: function setHasNoAccountsBalance(has_no_accounts_balance) {\\n      this.config.account_transfer.has_no_accounts_balance = has_no_accounts_balance;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccount\\\",\\n    value: function setHasNoAccount(has_no_account) {\\n      this.config.account_transfer.has_no_account = has_no_account;\\n    }\\n  }, {\\n    key: \\\"setTransferFee\\\",\\n    value: function setTransferFee() {\\n      var transfer_fee = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.config.account_transfer.selected_from.currency, 'transfer_between_accounts', 'fees', this.config.account_transfer.selected_to.currency]);\\n      this.config.account_transfer.transfer_fee = typeof transfer_fee === 'undefined' ? 1 : +transfer_fee;\\n    }\\n  }, {\\n    key: \\\"setMinimumFee\\\",\\n    value: function setMinimumFee() {\\n      var decimals = (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.config.account_transfer.minimum_fee = (1 / Math.pow(10, decimals)).toFixed(decimals);\\n    }\\n  }, {\\n    key: \\\"setTransferLimit\\\",\\n    value: function setTransferLimit() {\\n      var is_mt_transfer = this.config.account_transfer.selected_from.is_mt || this.config.account_transfer.selected_to.is_mt;\\n      var is_dxtrade_transfer = this.config.account_transfer.selected_from.is_dxtrade || this.config.account_transfer.selected_to.is_dxtrade;\\n      var limits_key;\\n\\n      if (is_mt_transfer) {\\n        limits_key = 'limits_mt5';\\n      } else if (is_dxtrade_transfer) {\\n        limits_key = 'limits_dxtrade';\\n      } else {\\n        limits_key = 'limits';\\n      }\\n\\n      var transfer_limit = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.config.account_transfer.selected_from.currency, 'transfer_between_accounts', limits_key]);\\n      var balance = this.config.account_transfer.selected_from.balance;\\n      var decimal_places = (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.config.account_transfer.transfer_limit = {\\n        max: !(transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.max) || +balance >= ((transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min) || 0) && +balance <= (transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max) ? balance : transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max.toFixed(decimal_places),\\n        min: transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.min ? (+(transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min)).toFixed(decimal_places) : null\\n      };\\n    }\\n  }, {\\n    key: \\\"sortAccountsTransfer\\\",\\n    value: function () {\\n      var _sortAccountsTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(response_accounts) {\\n        var _yield$this$WS$storag,\\n            _yield$this$WS$tradin,\\n            _this14 = this;\\n\\n        var transfer_between_accounts, mt5_login_list, dxtrade_accounts_list, accounts, arr_accounts;\\n        return regeneratorRuntime.wrap(function _callee25$(_context25) {\\n          while (1) {\\n            switch (_context25.prev = _context25.next) {\\n              case 0:\\n                _context25.t0 = response_accounts;\\n\\n                if (_context25.t0) {\\n                  _context25.next = 5;\\n                  break;\\n                }\\n\\n                _context25.next = 4;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 4:\\n                _context25.t0 = _context25.sent;\\n\\n              case 5:\\n                transfer_between_accounts = _context25.t0;\\n\\n                if (this.config.account_transfer.accounts_list.length) {\\n                  _context25.next = 9;\\n                  break;\\n                }\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context25.next = 9;\\n                  break;\\n                }\\n\\n                return _context25.abrupt(\\\"return\\\");\\n\\n              case 9:\\n                _context25.next = 11;\\n                return this.WS.storage.mt5LoginList();\\n\\n              case 11:\\n                _context25.t2 = _yield$this$WS$storag = _context25.sent;\\n                _context25.t1 = _context25.t2 === null;\\n\\n                if (_context25.t1) {\\n                  _context25.next = 15;\\n                  break;\\n                }\\n\\n                _context25.t1 = _yield$this$WS$storag === void 0;\\n\\n              case 15:\\n                if (!_context25.t1) {\\n                  _context25.next = 19;\\n                  break;\\n                }\\n\\n                _context25.t3 = void 0;\\n                _context25.next = 20;\\n                break;\\n\\n              case 19:\\n                _context25.t3 = _yield$this$WS$storag.mt5_login_list;\\n\\n              case 20:\\n                mt5_login_list = _context25.t3;\\n                _context25.next = 23;\\n                return this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE);\\n\\n              case 23:\\n                _context25.t5 = _yield$this$WS$tradin = _context25.sent;\\n                _context25.t4 = _context25.t5 === null;\\n\\n                if (_context25.t4) {\\n                  _context25.next = 27;\\n                  break;\\n                }\\n\\n                _context25.t4 = _yield$this$WS$tradin === void 0;\\n\\n              case 27:\\n                if (!_context25.t4) {\\n                  _context25.next = 31;\\n                  break;\\n                }\\n\\n                _context25.t6 = void 0;\\n                _context25.next = 32;\\n                break;\\n\\n              case 31:\\n                _context25.t6 = _yield$this$WS$tradin.trading_platform_accounts;\\n\\n              case 32:\\n                dxtrade_accounts_list = _context25.t6;\\n                // TODO: remove this temporary mapping when API adds market_type and sub_account_type to transfer_between_accounts\\n                accounts = transfer_between_accounts.accounts.map(function (account) {\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5 && Array.isArray(mt5_login_list) && mt5_login_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in mt5_login_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var found_account = mt5_login_list.find(function (acc) {\\n                      return acc.login === account.loginid;\\n                    });\\n                    if (found_account === undefined) return account;\\n                    return cashier_store_objectSpread(cashier_store_objectSpread(cashier_store_objectSpread({}, account), found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.MT5\\n                    });\\n                  }\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE && Array.isArray(dxtrade_accounts_list) && dxtrade_accounts_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in dxtrade_accounts_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var _found_account = dxtrade_accounts_list.find(function (acc) {\\n                      return acc.account_id === account.loginid;\\n                    });\\n\\n                    if (_found_account === undefined) return account;\\n                    return cashier_store_objectSpread(cashier_store_objectSpread(cashier_store_objectSpread({}, account), _found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.DXTRADE\\n                    });\\n                  }\\n\\n                  return account;\\n                }); // sort accounts as follows:\\n                // for MT5, synthetic, financial, financial stp\\n                // for non-MT5, fiat, crypto (alphabetically by currency)\\n                // should have more than one account\\n\\n                if (transfer_between_accounts.accounts.length > 1) {\\n                  accounts.sort(function (a, b) {\\n                    var a_is_mt = a.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var b_is_mt = b.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var a_is_crypto = !a_is_mt && (0,shared_.isCryptocurrency)(a.currency);\\n                    var b_is_crypto = !b_is_mt && (0,shared_.isCryptocurrency)(b.currency);\\n                    var a_is_fiat = !a_is_mt && !a_is_crypto;\\n                    var b_is_fiat = !b_is_mt && !b_is_crypto;\\n\\n                    if (a_is_mt && b_is_mt) {\\n                      if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\\n                        return -1;\\n                      }\\n\\n                      if (a.sub_account_type === 'financial') {\\n                        return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\\n                      }\\n\\n                      return 1;\\n                    } else if (a_is_crypto && b_is_crypto || a_is_fiat && b_is_fiat) {\\n                      return a.currency < b.currency ? -1 : 1;\\n                    } else if (a_is_crypto && b_is_mt || a_is_fiat && b_is_crypto || a_is_fiat && b_is_mt) {\\n                      return -1;\\n                    }\\n\\n                    return a_is_mt ? -1 : 1;\\n                  });\\n                }\\n\\n                arr_accounts = [];\\n                this.setSelectedTo({}); // set selected to empty each time so we can redetermine its value on reload\\n\\n                accounts.forEach(function (account) {\\n                  var _cfd_platforms$accoun, _cfd_platforms$accoun2;\\n\\n                  var cfd_platforms = {\\n                    mt5: {\\n                      name: 'DMT5',\\n                      icon: 'IcMt5'\\n                    },\\n                    dxtrade: {\\n                      name: 'Deriv X',\\n                      icon: 'IcDxtrade'\\n                    }\\n                  };\\n                  var is_cfd = Object.keys(cfd_platforms).includes(account.account_type);\\n                  var cfd_text_display = (_cfd_platforms$accoun = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun === void 0 ? void 0 : _cfd_platforms$accoun.name;\\n                  var cfd_icon_display = \\\"\\\".concat((_cfd_platforms$accoun2 = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun2 === void 0 ? void 0 : _cfd_platforms$accoun2.icon, \\\"-\\\").concat((0,shared_.getCFDAccount)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this14.root_store.client.is_eu\\n                  }));\\n                  var account_text_display = is_cfd ? \\\"\\\".concat(cfd_text_display, \\\" \\\").concat((0,shared_.getCFDAccountDisplay)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this14.root_store.client.is_eu\\n                  })) : (0,shared_.getCurrencyDisplayCode)(account.currency !== 'eUSDT' ? account.currency.toUpperCase() : account.currency);\\n\\n                  var obj_values = cashier_store_objectSpread({\\n                    text: account_text_display,\\n                    value: account.loginid,\\n                    balance: account.balance,\\n                    currency: account.currency,\\n                    is_crypto: (0,shared_.isCryptocurrency)(account.currency),\\n                    is_mt: account.account_type === shared_.CFD_PLATFORMS.MT5,\\n                    is_dxtrade: account.account_type === shared_.CFD_PLATFORMS.DXTRADE\\n                  }, is_cfd && {\\n                    platform_icon: cfd_icon_display,\\n                    market_type: (0,shared_.getCFDAccount)({\\n                      market_type: account.market_type,\\n                      sub_account_type: account.sub_account_type,\\n                      platform: account.account_type,\\n                      is_eu: _this14.root_store.client.is_eu\\n                    })\\n                  }); // set current logged in client as the default transfer from account\\n\\n\\n                  if (account.loginid === _this14.root_store.client.loginid) {\\n                    // check if selected from is not allowed account\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      obj_values.error = getSelectedError(obj_values.value, true);\\n                    }\\n\\n                    _this14.setSelectedFrom(obj_values);\\n                  } else if ((0,shared_.isEmptyObject)(_this14.config.account_transfer.selected_to)) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    } // set the first available account as the default transfer to account\\n\\n\\n                    _this14.setSelectedTo(obj_values);\\n                  }\\n\\n                  arr_accounts.push(obj_values);\\n                });\\n                this.setAccounts(arr_accounts);\\n\\n              case 39:\\n              case \\\"end\\\":\\n                return _context25.stop();\\n            }\\n          }\\n        }, _callee25, this);\\n      }));\\n\\n      function sortAccountsTransfer(_x13) {\\n        return _sortAccountsTransfer.apply(this, arguments);\\n      }\\n\\n      return sortAccountsTransfer;\\n    }()\\n  }, {\\n    key: \\\"setSelectedFrom\\\",\\n    value: function setSelectedFrom(obj_values) {\\n      this.config.account_transfer.selected_from = obj_values;\\n    }\\n  }, {\\n    key: \\\"setSelectedTo\\\",\\n    value: function setSelectedTo(obj_values) {\\n      this.config.account_transfer.selected_to = obj_values;\\n    }\\n  }, {\\n    key: \\\"setAccounts\\\",\\n    value: function setAccounts(arr_accounts) {\\n      this.config.account_transfer.accounts_list = arr_accounts;\\n    }\\n  }, {\\n    key: \\\"setIsTryTransferSuccessful\\\",\\n    value: function setIsTryTransferSuccessful(is_try_transfer_successful) {\\n      this.setErrorMessage('');\\n      this.config[this.active_container].is_try_transfer_successful = is_try_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsTransferConfirm\\\",\\n    value: function setIsTransferConfirm(is_transfer_confirm) {\\n      this.config[this.active_container].is_transfer_confirm = is_transfer_confirm;\\n    }\\n  }, {\\n    key: \\\"setAccountTransferAmount\\\",\\n    value: function setAccountTransferAmount(amount) {\\n      this.config[this.active_container].account_transfer_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.config[this.active_container].is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsMT5TransferInProgress\\\",\\n    value: function setIsMT5TransferInProgress(is_mt5_transfer_in_progress) {\\n      this.config[this.active_container].is_mt5_transfer_in_progress = is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"isMT5TransferInProgress\\\",\\n    value: function isMT5TransferInProgress() {\\n      var _this$config$this$act2;\\n\\n      return (_this$config$this$act2 = this.config[this.active_container]) === null || _this$config$this$act2 === void 0 ? void 0 : _this$config$this$act2.is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"setReceiptTransfer\\\",\\n    value: function setReceiptTransfer(_ref16) {\\n      var amount = _ref16.amount;\\n      this.config.account_transfer.receipt = {\\n        amount_transferred: amount\\n      };\\n    }\\n  }, {\\n    key: \\\"onChangeTransferFrom\\\",\\n    value: function onChangeTransferFrom(_ref17) {\\n      var target = _ref17.target;\\n      this.setErrorMessage('');\\n      this.config.account_transfer.selected_from.error = '';\\n      var accounts = this.config.account_transfer.accounts_list;\\n      var selected_from = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }); // if new value of selected_from is the same as the current selected_to\\n      // switch the value of selected_from and selected_to\\n\\n      if (selected_from.value === this.config.account_transfer.selected_to.value) {\\n        this.onChangeTransferTo({\\n          target: {\\n            value: this.config.account_transfer.selected_from.value\\n          }\\n        });\\n      } else if (selected_from.is_mt && this.config.account_transfer.selected_to.is_mt || selected_from.is_dxtrade && this.config.account_transfer.selected_to.is_dxtrade || selected_from.is_dxtrade && this.config.account_transfer.selected_to.is_mt || selected_from.is_mt && this.config.account_transfer.selected_to.is_dxtrade) {\\n        // not allowed to transfer from MT to MT\\n        // not allowed to transfer from Dxtrade to Dxtrade\\n        // not allowed to transfer between MT and Dxtrade\\n        var first_non_cfd = this.config.account_transfer.accounts_list.find(function (account) {\\n          return !account.is_mt && !account.is_dxtrade;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_non_cfd.value\\n          }\\n        });\\n      } else if (selected_from.is_crypto && this.config.account_transfer.selected_to.is_crypto) {\\n        // not allowed to transfer crypto to crypto\\n        var first_fiat = this.config.account_transfer.accounts_list.find(function (account) {\\n          return !account.is_crypto;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_fiat.value\\n          }\\n        });\\n      }\\n\\n      if (hasTransferNotAllowedLoginid(selected_from.value)) {\\n        selected_from.error = getSelectedError(selected_from.value, true);\\n      }\\n\\n      this.config.account_transfer.selected_from = selected_from;\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onChangeTransferTo\\\",\\n    value: function onChangeTransferTo(_ref18) {\\n      var target = _ref18.target;\\n      this.setErrorMessage('');\\n      this.config.account_transfer.selected_to.error = '';\\n      var accounts = this.config.account_transfer.accounts_list;\\n      this.config.account_transfer.selected_to = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }) || {};\\n\\n      if (hasTransferNotAllowedLoginid(this.config.account_transfer.selected_to.value)) {\\n        this.config.account_transfer.selected_to.error = getSelectedError(this.config.account_transfer.selected_to.value);\\n      }\\n\\n      this.setTransferFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentTransfer\\\",\\n    value: function () {\\n      var _onMountPaymentAgentTransfer = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {\\n        var response, current_payment_agent;\\n        return regeneratorRuntime.wrap(function _callee26$(_context26) {\\n          while (1) {\\n            switch (_context26.prev = _context26.next) {\\n              case 0:\\n                this.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentTransfer;\\n                _context26.next = 4;\\n                return this.onMountCommon();\\n\\n              case 4:\\n                if (this.config.payment_agent_transfer.transfer_limit.min_withdrawal) {\\n                  _context26.next = 12;\\n                  break;\\n                }\\n\\n                _context26.next = 7;\\n                return this.getPaymentAgentList();\\n\\n              case 7:\\n                response = _context26.sent;\\n                _context26.next = 10;\\n                return this.getCurrentPaymentAgent(response);\\n\\n              case 10:\\n                current_payment_agent = _context26.sent;\\n                this.setMinMaxPaymentAgentTransfer(current_payment_agent);\\n\\n              case 12:\\n                this.setLoading(false);\\n\\n              case 13:\\n              case \\\"end\\\":\\n                return _context26.stop();\\n            }\\n          }\\n        }, _callee26, this);\\n      }));\\n\\n      function onMountPaymentAgentTransfer() {\\n        return _onMountPaymentAgentTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentTransfer;\\n    }()\\n  }, {\\n    key: \\\"getCurrentPaymentAgent\\\",\\n    value: function () {\\n      var _getCurrentPaymentAgent = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(response_payment_agent) {\\n        var _this15 = this;\\n\\n        var payment_agent_listed, current_payment_agent;\\n        return regeneratorRuntime.wrap(function _callee27$(_context27) {\\n          while (1) {\\n            switch (_context27.prev = _context27.next) {\\n              case 0:\\n                payment_agent_listed = response_payment_agent.paymentagent_list.list.find(function (agent) {\\n                  return agent.paymentagent_loginid === _this15.root_store.client.loginid;\\n                });\\n                _context27.t0 = payment_agent_listed;\\n\\n                if (_context27.t0) {\\n                  _context27.next = 6;\\n                  break;\\n                }\\n\\n                _context27.next = 5;\\n                return this.getPaymentAgentDetails();\\n\\n              case 5:\\n                _context27.t0 = _context27.sent;\\n\\n              case 6:\\n                current_payment_agent = _context27.t0;\\n                return _context27.abrupt(\\\"return\\\", current_payment_agent !== null && current_payment_agent !== void 0 ? current_payment_agent : {});\\n\\n              case 8:\\n              case \\\"end\\\":\\n                return _context27.stop();\\n            }\\n          }\\n        }, _callee27, this);\\n      }));\\n\\n      function getCurrentPaymentAgent(_x14) {\\n        return _getCurrentPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return getCurrentPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"checkIsPaymentAgent\\\",\\n    value: function () {\\n      var _checkIsPaymentAgent = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {\\n        var _get_settings$is_auth;\\n\\n        var get_settings;\\n        return regeneratorRuntime.wrap(function _callee28$(_context28) {\\n          while (1) {\\n            switch (_context28.prev = _context28.next) {\\n              case 0:\\n                _context28.next = 2;\\n                return this.WS.authorized.storage.getSettings();\\n\\n              case 2:\\n                get_settings = _context28.sent.get_settings;\\n                this.setIsPaymentAgent((_get_settings$is_auth = get_settings === null || get_settings === void 0 ? void 0 : get_settings.is_authenticated_payment_agent) !== null && _get_settings$is_auth !== void 0 ? _get_settings$is_auth : false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context28.stop();\\n            }\\n          }\\n        }, _callee28, this);\\n      }));\\n\\n      function checkIsPaymentAgent() {\\n        return _checkIsPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return checkIsPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setIsPaymentAgent\\\",\\n    value: function setIsPaymentAgent(is_payment_agent) {\\n      if (!is_payment_agent && window.location.pathname.endsWith(shared_.routes.cashier_pa_transfer)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n\\n      this.config.payment_agent_transfer.is_payment_agent = !!is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"setMinMaxPaymentAgentTransfer\\\",\\n    value: function setMinMaxPaymentAgentTransfer(_ref19) {\\n      var min_withdrawal = _ref19.min_withdrawal,\\n          max_withdrawal = _ref19.max_withdrawal;\\n      this.config.payment_agent_transfer.transfer_limit = {\\n        min: min_withdrawal,\\n        max: max_withdrawal\\n      };\\n    }\\n  }, {\\n    key: \\\"setConfirmationPaymentAgentTransfer\\\",\\n    value: function setConfirmationPaymentAgentTransfer(_ref20) {\\n      var amount = _ref20.amount,\\n          client_id = _ref20.client_id,\\n          client_name = _ref20.client_name,\\n          description = _ref20.description;\\n      this.config.payment_agent_transfer.confirm = {\\n        amount: amount,\\n        client_id: client_id,\\n        client_name: client_name,\\n        description: description\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceiptPaymentAgentTransfer\\\",\\n    value: function setReceiptPaymentAgentTransfer(_ref21) {\\n      var amount_transferred = _ref21.amount_transferred,\\n          client_id = _ref21.client_id,\\n          client_name = _ref21.client_name;\\n      this.config.payment_agent_transfer.receipt = {\\n        amount_transferred: amount_transferred,\\n        client_id: client_id,\\n        client_name: client_name\\n      };\\n    }\\n  }, {\\n    key: \\\"accountSwitcherListener\\\",\\n    value: function accountSwitcherListener() {\\n      var _this16 = this;\\n\\n      [this.config.withdraw.container, this.config.payment_agent.container].forEach(function (container) {\\n        _this16.clearVerification(container);\\n      });\\n      [this.config.deposit.container, this.config.withdraw.container].forEach(function (container) {\\n        _this16.setIframeUrl('', container);\\n\\n        _this16.clearTimeoutCashierUrl(container);\\n\\n        _this16.setSessionTimeout(true, container);\\n      });\\n      this.config.payment_agent = new ConfigPaymentAgent();\\n      this.config.account_transfer = new ConfigAccountTransfer();\\n      this.config.payment_agent_transfer = new ConfigPaymentAgentTransfer();\\n      this.is_populating_values = false;\\n      this.onRemount();\\n      return Promise.resolve();\\n    }\\n  }, {\\n    key: \\\"account_platform_icon\\\",\\n    get: function get() {\\n      var _this17 = this;\\n\\n      var platform_icon = this.root_store.client.account_list.find(function (acc) {\\n        return _this17.root_store.client.loginid === acc.loginid;\\n      }).icon;\\n      return platform_icon;\\n    }\\n  }, {\\n    key: \\\"setConverterFromAmount\\\",\\n    value: function setConverterFromAmount(amount) {\\n      this.converter_from_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterToAmount\\\",\\n    value: function setConverterToAmount(amount) {\\n      this.converter_to_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterFromError\\\",\\n    value: function setConverterFromError(error) {\\n      this.converter_from_error = error;\\n    }\\n  }, {\\n    key: \\\"setConverterToError\\\",\\n    value: function setConverterToError(error) {\\n      this.converter_to_error = error;\\n    }\\n  }, {\\n    key: \\\"onChangeConverterFromAmount\\\",\\n    value: function () {\\n      var _onChangeConverterFromAmount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(_ref22, from_currency, to_currency) {\\n        var target, rate, decimals, amount;\\n        return regeneratorRuntime.wrap(function _callee29$(_context29) {\\n          while (1) {\\n            switch (_context29.prev = _context29.next) {\\n              case 0:\\n                target = _ref22.target;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context29.next = 26;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount(target.value);\\n                this.validateFromAmount();\\n                this.percentageSelectorSelectionStatus(true);\\n                this.calculatePercentage();\\n\\n                if (!this.converter_from_error) {\\n                  _context29.next = 14;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount('');\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(false);\\n                this.setAccountTransferAmount('');\\n                _context29.next = 24;\\n                break;\\n\\n              case 14:\\n                _context29.next = 16;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 16:\\n                rate = _context29.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_from_amount) {\\n                  this.setConverterToAmount(amount);\\n                } else {\\n                  this.setConverterToAmount('');\\n                }\\n\\n                this.validateToAmount();\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(true);\\n                this.setAccountTransferAmount(target.value);\\n\\n              case 24:\\n                _context29.next = 27;\\n                break;\\n\\n              case 26:\\n                this.resetConverter();\\n\\n              case 27:\\n              case \\\"end\\\":\\n                return _context29.stop();\\n            }\\n          }\\n        }, _callee29, this);\\n      }));\\n\\n      function onChangeConverterFromAmount(_x15, _x16, _x17) {\\n        return _onChangeConverterFromAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterFromAmount;\\n    }()\\n  }, {\\n    key: \\\"onChangeConverterToAmount\\\",\\n    value: function () {\\n      var _onChangeConverterToAmount = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(_ref23, from_currency, to_currency) {\\n        var target, rate, decimals, amount;\\n        return regeneratorRuntime.wrap(function _callee30$(_context30) {\\n          while (1) {\\n            switch (_context30.prev = _context30.next) {\\n              case 0:\\n                target = _ref23.target;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context30.next = 24;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount(target.value);\\n                this.validateToAmount();\\n\\n                if (!this.converter_to_error) {\\n                  _context30.next = 12;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount('');\\n                this.setConverterFromError('');\\n                this.setIsTimerVisible(false);\\n                this.setAccountTransferAmount('');\\n                _context30.next = 22;\\n                break;\\n\\n              case 12:\\n                _context30.next = 14;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 14:\\n                rate = _context30.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_to_amount) {\\n                  this.setConverterFromAmount(amount);\\n                } else {\\n                  this.setConverterFromAmount('');\\n                }\\n\\n                this.percentageSelectorSelectionStatus(true);\\n                this.calculatePercentage();\\n                this.validateFromAmount();\\n\\n                if (this.converter_from_error) {\\n                  this.setIsTimerVisible(false);\\n                  this.setAccountTransferAmount('');\\n                } else {\\n                  this.setConverterFromError('');\\n                  this.setIsTimerVisible(true);\\n                  this.setAccountTransferAmount(amount);\\n                }\\n\\n              case 22:\\n                _context30.next = 25;\\n                break;\\n\\n              case 24:\\n                this.resetConverter();\\n\\n              case 25:\\n              case \\\"end\\\":\\n                return _context30.stop();\\n            }\\n          }\\n        }, _callee30, this);\\n      }));\\n\\n      function onChangeConverterToAmount(_x18, _x19, _x20) {\\n        return _onChangeConverterToAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterToAmount;\\n    }()\\n  }, {\\n    key: \\\"setTransferPercentageSelectorResult\\\",\\n    value: function setTransferPercentageSelectorResult(amount) {\\n      var selected_from_currency = this.config.account_transfer.selected_from.currency;\\n      var selected_to_currency = this.config.account_transfer.selected_to.currency;\\n\\n      if (amount > 0 || +this.config.account_transfer.selected_from.balance === 0) {\\n        this.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n        this.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, selected_from_currency, selected_to_currency);\\n      } else if (+this.config.account_transfer.selected_from.balance === 0) {\\n        this.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n      } else {\\n        this.resetConverter();\\n      }\\n\\n      this.setIsTimerVisible(false);\\n      this.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"setWithdrawPercentageSelectorResult\\\",\\n    value: function setWithdrawPercentageSelectorResult(amount) {\\n      if (amount > 0) {\\n        this.setConverterFromAmount(amount);\\n        this.validateWithdrawFromAmount();\\n        this.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, this.root_store.client.currency, this.root_store.client.current_fiat_currency || 'USD');\\n      } else {\\n        this.resetConverter();\\n      }\\n\\n      this.setIsTimerVisible(false);\\n      this.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"validateFromAmount\\\",\\n    value: function validateFromAmount() {\\n      if (this.active_container === this.config.account_transfer.container) {\\n        this.validateTransferFromAmount();\\n      } else {\\n        this.validateWithdrawFromAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"validateToAmount\\\",\\n    value: function validateToAmount() {\\n      if (this.active_container === this.config.account_transfer.container) {\\n        this.validateTransferToAmount();\\n      } else {\\n        this.validateWithdrawToAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"validateTransferFromAmount\\\",\\n    value: function validateTransferFromAmount() {\\n      if (!this.converter_from_amount) {\\n        this.setConverterFromError((0,translations_.localize)('This field is required.'));\\n      } else {\\n        var _validNumber = (0,shared_.validNumber)(this.converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(this.config.account_transfer.selected_from.currency),\\n          min: this.config.account_transfer.transfer_limit.min,\\n          max: this.config.account_transfer.transfer_limit.max\\n        }),\\n            is_ok = _validNumber.is_ok,\\n            message = _validNumber.message;\\n\\n        if (!is_ok) {\\n          this.setConverterFromError(message);\\n        } else if (+this.config.account_transfer.selected_from.balance < +this.converter_from_amount) {\\n          this.setConverterFromError((0,translations_.localize)('Insufficient funds'));\\n        } else {\\n          this.setConverterFromError('');\\n        }\\n      }\\n    }\\n  }, {\\n    key: \\\"validateTransferToAmount\\\",\\n    value: function validateTransferToAmount() {\\n      if (this.converter_to_amount) {\\n        var currency = this.config.account_transfer.selected_to.currency;\\n\\n        var _validNumber2 = (0,shared_.validNumber)(this.converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber2.is_ok,\\n            message = _validNumber2.message;\\n\\n        if (!is_ok) {\\n          this.setConverterToError(message);\\n        } else {\\n          this.setConverterToError('');\\n        }\\n      }\\n    }\\n  }, {\\n    key: \\\"validateWithdrawFromAmount\\\",\\n    value: function validateWithdrawFromAmount() {\\n      var error_message = '';\\n      var _this$root_store$clie6 = this.root_store.client,\\n          balance = _this$root_store$clie6.balance,\\n          currency = _this$root_store$clie6.currency,\\n          website_status = _this$root_store$clie6.website_status;\\n      var min_withdraw_amount = website_status.crypto_config[currency].minimum_withdrawal;\\n      var max_withdraw_amount = +this.max_withdraw_amount > +balance ? +balance : +this.max_withdraw_amount;\\n\\n      if (this.converter_from_amount) {\\n        var _validNumber3 = (0,shared_.validNumber)(this.converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber3.is_ok,\\n            message = _validNumber3.message;\\n\\n        if (!is_ok) error_message = message;\\n        if (+balance < +this.converter_from_amount) error_message = (0,translations_.localize)('Insufficient funds');\\n\\n        if (+this.converter_from_amount < +min_withdraw_amount || +this.converter_from_amount > +max_withdraw_amount) {\\n          error_message = /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n            i18n_default_text: \\\"The allowed withdraw amount is {{min_withdraw_amount}} to {{max_withdraw_amount}} {{currency}}\\\",\\n            values: {\\n              min_withdraw_amount: min_withdraw_amount,\\n              max_withdraw_amount: max_withdraw_amount,\\n              currency: currency\\n            }\\n          });\\n        }\\n      }\\n\\n      this.setConverterFromError(error_message);\\n    }\\n  }, {\\n    key: \\\"validateWithdrawToAmount\\\",\\n    value: function validateWithdrawToAmount() {\\n      var error_message = '';\\n      var current_fiat_currency = this.root_store.client.current_fiat_currency;\\n\\n      if (this.converter_to_amount) {\\n        var _validNumber4 = (0,shared_.validNumber)(this.converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(current_fiat_currency)\\n        }),\\n            is_ok = _validNumber4.is_ok,\\n            message = _validNumber4.message;\\n\\n        if (!is_ok) error_message = message;\\n      }\\n\\n      this.setConverterToError(error_message);\\n    }\\n  }, {\\n    key: \\\"resetConverter\\\",\\n    value: function resetConverter() {\\n      this.setConverterFromAmount('');\\n      this.setConverterToAmount('');\\n      this.setConverterFromError('');\\n      this.setConverterToError('');\\n      this.setIsTimerVisible(false);\\n      this.percentageSelectorSelectionStatus(true);\\n    }\\n  }]);\\n\\n  return CashierStore;\\n}(BaseStore), (_descriptor57 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor58 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_p2p_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor59 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"p2p_notification_count\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor60 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"cashier_route_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor61 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_10k_withdrawal_limit_reached\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), _descriptor62 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_deposit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor63 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"should_show_all_available_currencies\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor64 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), _descriptor65 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"deposit_target\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor66 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"crypto_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor67 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"fiat_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor68 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"insufficient_fund_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor69 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"all_payment_agent_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), _descriptor70 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"should_set_currency_modal_title_change\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor71 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"p2p_advertiser_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), _descriptor72 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"has_set_currency\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor73 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor74 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_from_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor75 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_to_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor76 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_from_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor77 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"converter_to_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor78 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_timer_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor79 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_crypto_transactions_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor80 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"blockchain_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor81 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"should_percentage_reset\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor82 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"percentage\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor83 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_withdraw_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor84 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"show_p2p_in_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor85 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"max_withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), _descriptor86 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"config\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {\\n      account_transfer: new ConfigAccountTransfer(),\\n      deposit: cashier_store_objectSpread(cashier_store_objectSpread({}, (0,external_mobx_.toJS)(new Config({\\n        container: 'deposit'\\n      }))), {}, {\\n        error: new ConfigError()\\n      }),\\n      payment_agent: new ConfigPaymentAgent(),\\n      payment_agent_transfer: new ConfigPaymentAgentTransfer(),\\n      withdraw: new ConfigWithdraw()\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_crypto\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_crypto\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_payment_agent_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_payment_agent_visible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_payment_agent_visible_in_onboarding\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_payment_agent_visible_in_onboarding\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_payment_agent_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_payment_agent_transfer_visible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_account_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_account_transfer_visible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_p2p_enabled\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_p2p_enabled\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"showP2pInCashierDefault\\\", [cashier_store_dec5], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"showP2pInCashierDefault\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"attachCashierToMenu\\\", [cashier_store_dec6], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"attachCashierToMenu\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"replaceCashierMenuOnclick\\\", [cashier_store_dec7], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"replaceCashierMenuOnclick\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setHasSetCurrency\\\", [cashier_store_dec8], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setHasSetCurrency\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"changeSetCurrencyModalTitle\\\", [cashier_store_dec9], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"changeSetCurrencyModalTitle\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountCashierDefault\\\", [cashier_store_dec10], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountCashierDefault\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsWithdrawConfirmed\\\", [cashier_store_dec11], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsWithdrawConfirmed\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setWithdrawAmount\\\", [cashier_store_dec12], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setWithdrawAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"calculatePercentage\\\", [cashier_store_dec13], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"calculatePercentage\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"percentageSelectorSelectionStatus\\\", [cashier_store_dec14], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"percentageSelectorSelectionStatus\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestWithdraw\\\", [cashier_store_dec15], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"requestWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetWithrawForm\\\", [cashier_store_dec16], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resetWithrawForm\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsDeposit\\\", [cashier_store_dec17], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsDeposit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setShouldShowAllAvailableCurrencies\\\", [cashier_store_dec18], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setShouldShowAllAvailableCurrencies\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setBlockchainAddress\\\", [cashier_store_dec19], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setBlockchainAddress\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsCashierDefault\\\", [cashier_store_dec20], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsCashierDefault\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setDepositTarget\\\", [cashier_store_dec21], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setDepositTarget\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"continueRoute\\\", [cashier_store_dec22], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"continueRoute\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAccountSwitchListener\\\", [_dec23], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAccountSwitchListener\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setActiveTabIndex\\\", [_dec24], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setActiveTabIndex\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"init\\\", [_dec25], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"init\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getAdvertizerError\\\", [_dec26], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getAdvertizerError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setP2pAdvertiserError\\\", [_dec27], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setP2pAdvertiserError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"checkP2pStatus\\\", [_dec28], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"checkP2pStatus\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountCommon\\\", [_dec29], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountCommon\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsCryptoTransactionsVisible\\\", [_dec30], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsCryptoTransactionsVisible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setCashierTabIndex\\\", [_dec31], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setCashierTabIndex\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"willMountWithdraw\\\", [_dec32], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"willMountWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountWithdraw\\\", [_dec33], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountDeposit\\\", [_dec34], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountDeposit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setNotificationCount\\\", [_dec35], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setNotificationCount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsP2pVisible\\\", [_dec36], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsP2pVisible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMount\\\", [_dec37], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_cashier_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_cashier_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_system_maintenance\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_system_maintenance\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_deposit_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_deposit_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_withdrawal_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_withdrawal_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"is_transfer_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"is_transfer_locked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setMaxWithdrawAmount\\\", [_dec38], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setMaxWithdrawAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"check10kLimit\\\", [_dec39], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"check10kLimit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"set10kLimitation\\\", [_dec40], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"set10kLimitation\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"checkIframeLoaded\\\", [_dec41], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"checkIframeLoaded\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIframeUrl\\\", [_dec42], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIframeUrl\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setContainerHeight\\\", [_dec43], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setContainerHeight\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setErrorMessage\\\", [_dec44], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setErrorMessage\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"handleCashierError\\\", [_dec45], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"handleCashierError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setErrorConfig\\\", [_dec46], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setErrorConfig\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"submitFundsProtection\\\", [_dec47], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"submitFundsProtection\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setLoading\\\", [_dec48], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setLoading\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setSessionTimeout\\\", [_dec49], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setSessionTimeout\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationButtonClicked\\\", [_dec50], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationButtonClicked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationEmailSent\\\", [_dec51], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationEmailSent\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationResendClicked\\\", [_dec52], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationResendClicked\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setVerificationResendTimeout\\\", [_dec53], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setVerificationResendTimeout\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTimeoutCashierUrl\\\", [_dec54], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTimeoutCashierUrl\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTimeoutVerification\\\", [_dec55], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTimeoutVerification\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"sendVerificationEmail\\\", [_dec56], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"sendVerificationEmail\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resendVerificationEmail\\\", [_dec57], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resendVerificationEmail\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTimerVisible\\\", [_dec58], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTimerVisible\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetTimer\\\", [_dec59], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resetTimer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getExchangeRate\\\", [_dec60], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getExchangeRate\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setActiveTab\\\", [_dec61], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setActiveTab\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountPaymentAgentList\\\", [_dec62], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getPaymentAgentList\\\", [_dec63], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAllPaymentAgentList\\\", [_dec64], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAllPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"getPaymentAgentDetails\\\", [_dec65], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"getPaymentAgentDetails\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"addSupportedBank\\\", [_dec66], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"addSupportedBank\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"sortSupportedBanks\\\", [_dec67], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"sortSupportedBanks\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setPaymentAgentList\\\", [_dec68], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"filterPaymentAgentList\\\", [_dec69], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"filterPaymentAgentList\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangePaymentMethod\\\", [_dec70], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangePaymentMethod\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountPaymentAgentWithdraw\\\", [_dec71], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountPaymentAgentWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsWithdraw\\\", [_dec72], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTryWithdrawSuccessful\\\", [_dec73], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTryWithdrawSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsWithdrawSuccessful\\\", [_dec74], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsWithdrawSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConfirmation\\\", [_dec75], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConfirmation\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setReceipt\\\", [_dec76], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setReceipt\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"addPaymentAgent\\\", [_dec77], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"addPaymentAgent\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestTryPaymentAgentWithdraw\\\", [_dec78], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"requestTryPaymentAgentWithdraw\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestPaymentAgentWithdraw\\\", [_dec79], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"requestPaymentAgentWithdraw\\\"), _class15.prototype), _descriptor87 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetPaymentAgent\\\", [_dec80], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this18 = this;\\n\\n    return function () {\\n      _this18.setErrorMessage('');\\n\\n      _this18.setIsWithdraw(false);\\n\\n      _this18.clearVerification();\\n\\n      _this18.setActiveTabIndex(0);\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountAccountTransfer\\\", [_dec81], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountAccountTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setHasNoAccountsBalance\\\", [_dec82], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setHasNoAccountsBalance\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setHasNoAccount\\\", [_dec83], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setHasNoAccount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTransferFee\\\", [_dec84], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTransferFee\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setMinimumFee\\\", [_dec85], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setMinimumFee\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTransferLimit\\\", [_dec86], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTransferLimit\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"sortAccountsTransfer\\\", [_dec87], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"sortAccountsTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setSelectedFrom\\\", [_dec88], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setSelectedFrom\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setSelectedTo\\\", [_dec89], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setSelectedTo\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAccounts\\\", [_dec90], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAccounts\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTryTransferSuccessful\\\", [_dec91], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTryTransferSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTransferConfirm\\\", [_dec92], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTransferConfirm\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setAccountTransferAmount\\\", [_dec93], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setAccountTransferAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsTransferSuccessful\\\", [_dec94], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsTransferSuccessful\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsMT5TransferInProgress\\\", [_dec95], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsMT5TransferInProgress\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"isMT5TransferInProgress\\\", [_dec96], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"isMT5TransferInProgress\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setReceiptTransfer\\\", [_dec97], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setReceiptTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeTransferFrom\\\", [_dec98], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeTransferFrom\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeTransferTo\\\", [_dec99], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeTransferTo\\\"), _class15.prototype), _descriptor88 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetAccountTransfer\\\", [_dec100], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this19 = this;\\n\\n    return /*#__PURE__*/cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {\\n      return regeneratorRuntime.wrap(function _callee31$(_context31) {\\n        while (1) {\\n          switch (_context31.prev = _context31.next) {\\n            case 0:\\n              _this19.setIsTransferConfirm(false);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context31.stop();\\n          }\\n        }\\n      }, _callee31);\\n    }));\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onMountPaymentAgentTransfer\\\", [_dec101], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onMountPaymentAgentTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setIsPaymentAgent\\\", [_dec102], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setIsPaymentAgent\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setMinMaxPaymentAgentTransfer\\\", [_dec103], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setMinMaxPaymentAgentTransfer\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConfirmationPaymentAgentTransfer\\\", [_dec104], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConfirmationPaymentAgentTransfer\\\"), _class15.prototype), _descriptor89 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestTryPaymentAgentTransfer\\\", [_dec105], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this20 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref26 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(_ref25) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee32$(_context32) {\\n          while (1) {\\n            switch (_context32.prev = _context32.next) {\\n              case 0:\\n                amount = _ref25.amount, currency = _ref25.currency, description = _ref25.description, transfer_to = _ref25.transfer_to;\\n\\n                _this20.setErrorMessage('');\\n\\n                _context32.next = 4;\\n                return _this20.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context32.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 2) {\\n                  // show confirmation screen\\n                  _this20.setConfirmationPaymentAgentTransfer({\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name,\\n                    amount: amount,\\n                    description: description\\n                  });\\n\\n                  _this20.setIsTryTransferSuccessful(true);\\n                } else {\\n                  _this20.setErrorMessage(payment_agent_transfer.error, _this20.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context32.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context32.stop();\\n            }\\n          }\\n        }, _callee32);\\n      }));\\n\\n      return function (_x21) {\\n        return _ref26.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setReceiptPaymentAgentTransfer\\\", [_dec106], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setReceiptPaymentAgentTransfer\\\"), _class15.prototype), _descriptor90 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"requestPaymentAgentTransfer\\\", [_dec107], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this21 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref28 = cashier_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(_ref27) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee33$(_context33) {\\n          while (1) {\\n            switch (_context33.prev = _context33.next) {\\n              case 0:\\n                amount = _ref27.amount, currency = _ref27.currency, description = _ref27.description, transfer_to = _ref27.transfer_to;\\n\\n                _this21.setErrorMessage('');\\n\\n                _context33.next = 4;\\n                return _this21.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context33.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 1) {\\n                  _this21.setReceiptPaymentAgentTransfer({\\n                    amount_transferred: amount,\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name\\n                  });\\n\\n                  _this21.setIsTransferSuccessful(true);\\n\\n                  _this21.setIsTryTransferSuccessful(false);\\n\\n                  _this21.setConfirmationPaymentAgentTransfer({});\\n                } else {\\n                  _this21.setErrorMessage(payment_agent_transfer.error, _this21.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context33.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context33.stop();\\n            }\\n          }\\n        }, _callee33);\\n      }));\\n\\n      return function (_x22) {\\n        return _ref28.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), _descriptor91 = cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetPaymentAgentTransfer\\\", [_dec108], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this22 = this;\\n\\n    return function () {\\n      _this22.setIsTransferSuccessful(false);\\n\\n      _this22.setErrorMessage('');\\n    };\\n  }\\n}), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"account_platform_icon\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"account_platform_icon\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterFromAmount\\\", [_dec109], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterToAmount\\\", [_dec110], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterFromError\\\", [_dec111], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterFromError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setConverterToError\\\", [_dec112], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setConverterToError\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeConverterFromAmount\\\", [_dec113], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeConverterFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"onChangeConverterToAmount\\\", [_dec114], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"onChangeConverterToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setTransferPercentageSelectorResult\\\", [_dec115], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setTransferPercentageSelectorResult\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"setWithdrawPercentageSelectorResult\\\", [_dec116], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"setWithdrawPercentageSelectorResult\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateFromAmount\\\", [_dec117], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateToAmount\\\", [_dec118], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateTransferFromAmount\\\", [_dec119], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateTransferFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateTransferToAmount\\\", [_dec120], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateTransferToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateWithdrawFromAmount\\\", [_dec121], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateWithdrawFromAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"validateWithdrawToAmount\\\", [_dec122], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"validateWithdrawToAmount\\\"), _class15.prototype), cashier_store_applyDecoratedDescriptor(_class15.prototype, \\\"resetConverter\\\", [_dec123], Object.getOwnPropertyDescriptor(_class15.prototype, \\\"resetConverter\\\"), _class15.prototype)), _class15));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9TdG9yZXMvQ2FzaGllci9jYXNoaWVyLXN0b3JlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFiQTtBQWVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbERBO0FBQUE7O0FBcURBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsQ0E7QUFBQTs7QUFxQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBVkE7QUFZQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2Q0E7QUFBQTs7QUEwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTs7OztBQ3RJQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTs7QUFpQ0E7QUFBQTtBQUFBOzs7QUFHQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7OztBQ3RHQTtBQUNBO0FBQUE7O0FBQ0E7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7O0FDdkNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7O0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBRUE7QUFDQTs7Ozs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FFL0dBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBbUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFLQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBSEE7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBOztBQUZBO0FBQUE7QUFBQTtBQUFBOztBQUlBO0FBQ0E7O0FBQ0E7QUFDQTtBQVBBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBaEJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0JBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBSUE7QUFDQTs7QUFDQTtBQUNBO0FBUEE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFoQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFvQkE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUZBO0FBRUE7O0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBemdCQTtBQUNBO0FBQ0E7QUFGQTs7Ozs7QUFNQTs7QUFFQTs7Ozs7QUFDQTs7QUF1QkE7Ozs7O0FBQUE7O0FBZ0lBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFlQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7O0FBQ0E7QUFBQTtBQUFBOztBQURBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBO0FBRUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUpBO0FBV0E7Ozs7QUFFQTtBQUVBO0FBRUE7QUFLQTs7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFMQTtBQVFBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFEQTtBQUVBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFLQTs7QUFMQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQVVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBTEE7QUFPQTs7QUFyQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBNEJBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUF4U0E7Ozs7O0FBQ0E7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7Ozs7Ozs7QUFDQTs7Ozs7OztBQUNBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQWlCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbENBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFVQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBOzs7O0FBQ0E7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFQQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFTQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTs7QUFIQTtBQUFBO0FBQUE7QUFBQTs7QUFNQTtBQU5BO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBU0E7O0FBVEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBYUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFQQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFVQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7O0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQVRBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBWUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7OztBQW5JQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmQTtBQUNBO0FBRUE7QUFDQTtBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUNBO0FBQ0E7Ozs7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBOztBQU5BO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBSkE7QUFBQTs7QUFBQTtBQU9BO0FBQ0E7QUFDQTs7QUFUQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQVlBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQXpEQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1hBO0FBRUE7Ozs7Ozs7Ozs7O0FBSUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7OztBQVpBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOzs7Ozs7Ozs7O0FDSkE7QUFDQTtBQUNBOztBQUVBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUhBOztBQU9BO0FBQ0E7QUFEQTtBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBS0E7O0FBRUE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBS0E7O0FBRUE7QUFTQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTs7QUFDQTtBQUNBOzs7OztBQUxBOztBQUNBOzs7OztBQUFBOzs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7O0FBR0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBO0FBRUE7QUFDQTs7OztBQWxCQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOzs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7QUFFQTtBQUFBO0FBQUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUE1QkE7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7OztBQWtCQTs7Ozs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQVJBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOztBQUNBOzs7OztBQUFBOzs7QUFPQTs7O0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBRUE7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7O0FBQ0E7Ozs7O0FBQUE7OztBQUdBOzs7OztBQUNBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTs7QUFBQTs7QUFDQTtBQUFBO0FBQUE7O0FBREE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUEya0RBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUtBOztBQUNBOztBQUVBO0FBR0E7QUFFQTtBQWJBO0FBQUE7O0FBQUE7QUFjQTtBQU9BOztBQXJCQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBMEJBOztBQUNBO0FBQ0E7QUFDQTs7QUE3QkE7QUErQkE7O0FBL0JBO0FBQUE7O0FBQUE7QUFpQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7O0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBbEVBO0FBb0VBOztBQXBFQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUEza0RBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUFBOztBQUVBO0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7O0FBRUE7O0FBeEJBO0FBeUJBOzs7O0FBc0RBO0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTs7O0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVVBOzs7QUFFQTtBQUVBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7O0FBRUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTs7QUFSQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBVUE7QUFDQTs7QUFYQTtBQWFBOztBQWJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBZ0JBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUVBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFqQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBb0JBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU9BO0FBUEE7O0FBQUE7QUFBQTtBQUFBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUF0QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUF5QkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBRUE7O0FBRkE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFLQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBTUE7O0FBTkE7QUFBQTtBQUFBO0FBQUE7O0FBUUE7QUFFQTs7O0FBVkE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWlCQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7Ozs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBRUE7QUFDQTs7QUFIQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQU1BO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQVFBOztBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUF0Q0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUEwQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBOztBQUhBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUpBOztBQVBBO0FBT0E7QUFQQTtBQUFBOztBQUFBO0FBY0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWRBO0FBaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQS9CQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFrQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7O0FBTkE7QUFBQTtBQUFBO0FBQUE7O0FBU0E7QUFUQTs7QUFBQTtBQWFBO0FBQ0E7O0FBZEE7QUFBQTtBQUFBO0FBQUE7O0FBbUJBO0FBRUE7O0FBckJBOztBQUFBO0FBQUE7QUFBQTtBQXlCQTtBQUFBOztBQXpCQTtBQXlCQTs7QUF6QkE7QUFBQTtBQUFBO0FBQUE7O0FBNkJBO0FBN0JBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBaUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQXhDQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBMENBO0FBQ0E7QUFDQTtBQUVBOztBQTlDQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQWlEQTtBQUNBO0FBQ0E7O0FBbkRBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBdURBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTs7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUZBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQVlBOztBQVpBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBZUE7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBOzs7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBV0E7QUFFQTtBQUVBOztBQUdBO0FBR0E7QUFBQTtBQUlBO0FBT0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUtBOzs7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPQTtBQUVBO0FBR0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7O0FBRUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFTQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7O0FBQ0E7O0FBakJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBb0JBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBREE7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBOztBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQW5DQTtBQXFDQTs7O0FBRUE7QUFFQTtBQUdBOzs7QUFFQTtBQUNBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7Ozs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQU1BO0FBQ0E7QUFDQTtBQVJBO0FBQUE7O0FBQUE7QUFZQTs7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBOUJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBaUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFGQTs7QUFGQTtBQUFBO0FBRUE7QUFGQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQVNBO0FBRUE7QUFDQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBSEE7QUFBQTs7QUFBQTtBQU1BOztBQU5BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQVNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUFZQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBS0E7QUFFQTtBQUNBOzs7O0FBRUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUVBO0FBRkE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFNQTtBQUVBO0FBQ0E7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7Ozs7QUFFQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFFQTs7QUFGQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTs7QUFRQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUExQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUE2QkE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBRUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUhBO0FBQUE7O0FBQUE7QUFNQTtBQUNBO0FBQ0E7O0FBUkE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQVdBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBSUE7QUFDQTs7QUFFQTtBQXRCQTtBQUFBOztBQUFBO0FBd0JBOztBQXhCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQTRCQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BOzs7QUFFQTtBQVFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFTQTs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBOztBQUhBO0FBR0E7O0FBT0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBSUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQXJCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7QUF3QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUpBOztBQUhBO0FBR0E7O0FBTUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFRQTtBQURBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTdCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQXdDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUhBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBT0E7QUFDQTtBQUdBO0FBQUE7O0FBSUE7QUFDQTtBQUNBO0FBR0E7QUFDQTs7O0FBckJBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUF1QkE7O0FBdkJBO0FBQUE7QUFBQTtBQUFBOztBQTBCQTtBQUNBO0FBM0JBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBb0NBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBckRBO0FBdURBOztBQXZEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7OztBQTBEQTtBQUNBOztBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFNQTtBQUNBOzs7QUFFQTtBQUVBOztBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFFQTtBQUlBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBS0E7QUFDQTs7QUFFQTtBQUNBO0FBSUE7QUFMQTtBQU9BOzs7O0FBRUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUVBOztBQUZBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQVNBO0FBVEE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQVdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFFQTtBQUFBO0FBQUE7QUFDQTs7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOztBQUVBO0FBQUE7O0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUpBOztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBRkE7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7QUFySUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUF3SUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTs7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFHQTs7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFHQTs7QUFDQTtBQUNBO0FBQ0E7Ozs7QUErRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUhBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBTUE7QUFOQTtBQUFBOztBQUFBO0FBT0E7QUFDQTs7QUFSQTtBQVVBOztBQVZBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7OztBQWFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUZBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUlBO0FBSkE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBUUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNBO0FBQ0E7O0FBRkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFLQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOzs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7OztBQTRCQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTs7O0FBaUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFFQTtBQUNBOzs7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFGQTtBQUFBO0FBQUE7QUFBQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUFQQTtBQUFBO0FBQUE7QUFBQTs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQVpBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBY0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBekJBO0FBQUE7QUFBQTs7QUFBQTtBQTRCQTs7QUE1QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7O0FBZ0NBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRkE7QUFBQTtBQUFBO0FBQUE7O0FBSUE7QUFDQTs7QUFMQTtBQUFBO0FBQUE7QUFBQTs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBWUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBOUJBO0FBQUE7QUFBQTs7QUFBQTtBQWlDQTs7QUFqQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7QUFxQ0E7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQUE7QUFBQTs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQUE7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQUE7O0FBSUE7QUFFQTs7QUFFQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBRkE7QUFTQTtBQUNBOztBQUNBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFBQTs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7OztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUEvaEVBOzs7OztBQTRCQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFDQTs7Ozs7QUFBQTs7QUFFQTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQVJBOztBQXNCQTs7Ozs7OztBQTZtQ0E7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFtZEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0FBeURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBOztBQURBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7O0FBRkE7QUFFQTs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBOztBQU1BO0FBQ0E7QUFDQTtBQUNBOztBQXBCQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBOztBQURBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUpBOztBQUZBO0FBRUE7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBOztBQUtBOztBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQW5CQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUF5QkE7QUFDQTs7QUFDQTtBQUNBOztBQXFCQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4vQ29uZmlnL29uLXJhbXAtcHJvdmlkZXJzLmpzPzYxOTMiLCJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi9fY29tbW9uL3V0aWxpdHkuanM/YjRiMCIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1V0aWxzL1ZhbGlkYXRvci9lcnJvcnMuanM/ZmM0ZiIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1V0aWxzL1ZhbGlkYXRvci92YWxpZGF0b3IuanM/ZTdmYiIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1V0aWxzL1ZhbGlkYXRvci9pbmRleC5qcz85N2M4Iiwid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4vU3RvcmVzL2Jhc2Utc3RvcmUuanM/YzRhMSIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1N0b3Jlcy9DYXNoaWVyL29uLXJhbXAtc3RvcmUuanM/MDQ0MCIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1N0b3Jlcy9DYXNoaWVyL3RyYW5zYWN0aW9uLWhpc3Rvcnktc3RvcmUuanM/MDAxYSIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1N0b3Jlcy9hY2NvdW50LXByb21wdC1kaWFsb2ctc3RvcmUuanM/N2NjNCIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL1N0b3Jlcy9lcnJvci1kaWFsb2ctc3RvcmUuanM/M2Y0YSIsIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uL0NvbnRhaW5lcnMvY2FzaGllci1ub3RpZmljYXRpb25zLmpzeD9mYjI0Iiwid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4vU3RvcmVzL0Nhc2hpZXIvY2FzaGllci1zdG9yZS5qcz85NmMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5cbmNvbnN0IGNyZWF0ZUJhbnhhUHJvdmlkZXIgPSBzdG9yZSA9PiAoe1xuICAgIGljb246IHsgZGFyazogJ0ljQ2FzaGllckJhbnhhRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyQmFueGFMaWdodCcgfSxcbiAgICBuYW1lOiAnQmFueGEnLFxuICAgIGdldERlc2NyaXB0aW9uOiAoKSA9PlxuICAgICAgICBsb2NhbGl6ZShcbiAgICAgICAgICAgICdBIGZhc3QgYW5kIHNlY3VyZSBmaWF0LXRvLWNyeXB0byBwYXltZW50IHNlcnZpY2UuIERlcG9zaXQgY3J5cHRvY3VycmVuY2llcyBmcm9tIGFueXdoZXJlIGluIHRoZSB3b3JsZCB1c2luZyB5b3VyIGNyZWRpdC9kZWJpdCBjYXJkcyBhbmQgYmFuayB0cmFuc2ZlcnMuJ1xuICAgICAgICApLFxuICAgIGdldEFsbG93ZWRSZXNpZGVuY2llczogKCkgPT4gWycqJ10sXG4gICAgZ2V0UGF5bWVudEljb25zOiAoKSA9PiBbXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclZpc2FEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJWaXNhTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllck1hc3RlcmNhcmREYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJNYXN0ZXJjYXJkTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllckJwYXlEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJCcGF5TGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclNlcGFEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJTZXBhTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllckJsdWVzaHlmdERhcmsnLCBsaWdodDogJ0ljQ2FzaGllckJsdWVzaHlmdExpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJGbGV4ZXBpbkRhcmsnLCBsaWdodDogJ0ljQ2FzaGllckZsZXhlcGluTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclBheUlkRGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyUGF5SWRMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyUG9saURhcmsnLCBsaWdodDogJ0ljQ2FzaGllclBvbGlMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyQXBwbGVQYXknLCBsaWdodDogJ0ljQ2FzaGllckFwcGxlUGF5JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJJbnRlcmFjRXRyYW5zZmVyJywgbGlnaHQ6ICdJY0Nhc2hpZXJJbnRlcmFjRXRyYW5zZmVyJyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJJZGVhbCcsIGxpZ2h0OiAnSWNDYXNoaWVySWRlYWwnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclBvc3RCaWxsUGF5RGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyUG9zdEJpbGxQYXlMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyU29mb3J0JywgbGlnaHQ6ICdJY0Nhc2hpZXJTb2ZvcnQnIH0sXG4gICAgXSxcbiAgICBnZXRTY3JpcHREZXBlbmRlbmNpZXM6ICgpID0+IFtdLCAvLyBOb25lLlxuICAgIGdldERlZmF1bHRGcm9tQ3VycmVuY3k6ICgpID0+ICcnLFxuICAgIGdldEZyb21DdXJyZW5jaWVzOiAoKSA9PiBbJyonXSxcbiAgICBnZXRUb0N1cnJlbmNpZXM6ICgpID0+IFsnKiddLFxuICAgIGdldFdpZGdldEh0bWw6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHN0b3JlLldTLnNlcnZpY2VUb2tlbih7XG4gICAgICAgICAgICAgICAgc2VydmljZV90b2tlbjogMSxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiAnYmFueGEnLFxuICAgICAgICAgICAgICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB1cmwgfSA9IHJlc3BvbnNlLnNlcnZpY2VfdG9rZW4uYmFueGE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc29sdmluZyBlbXB0eSB3aWxsL3Nob3VsZCByZWRpcmVjdCB1c2VyLlxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgb25Nb3VudFdpZGdldENvbnRhaW5lcjogKCkgPT4ge30sXG4gICAgc2hvdWxkX3Nob3dfZGVwb3NpdF9hZGRyZXNzOiBmYWxzZSxcbn0pO1xuXG5jb25zdCBjcmVhdGVDaGFuZ2VsbHlQcm92aWRlciA9IHN0b3JlID0+ICh7XG4gICAgaWNvbjogeyBkYXJrOiAnSWNDYXNoaWVyQ2hhbmdlbGx5RGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyQ2hhbmdlbGx5TGlnaHQnIH0sXG4gICAgbmFtZTogJ0NoYW5nZWxseScsXG4gICAgZ2V0RGVzY3JpcHRpb246ICgpID0+XG4gICAgICAgIGxvY2FsaXplKFxuICAgICAgICAgICAgJ1lvdXIgc2ltcGxlIGFjY2VzcyB0byBjcnlwdG8uIEZhc3QgYW5kIHNlY3VyZSB3YXkgdG8gZXhjaGFuZ2UgYW5kIHB1cmNoYXNlIGNyeXB0b2N1cnJlbmNpZXMuIDI0LzcgbGl2ZSBjaGF0IHN1cHBvcnQuJ1xuICAgICAgICApLFxuICAgIGdldEFsbG93ZWRSZXNpZGVuY2llczogKCkgPT4gWycqJ10sXG4gICAgZ2V0UGF5bWVudEljb25zOiAoKSA9PiBbXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclZpc2FEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJWaXNhTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllck1hc3RlcmNhcmREYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJNYXN0ZXJjYXJkTGlnaHQnIH0sXG4gICAgXSxcbiAgICBnZXRTY3JpcHREZXBlbmRlbmNpZXM6ICgpID0+IFtdLFxuICAgIGdldERlZmF1bHRGcm9tQ3VycmVuY3k6ICgpID0+ICd1c2QnLFxuICAgIGdldEZyb21DdXJyZW5jaWVzOiAoKSA9PiBbJ3VzZCcsICdldXInLCAnZ2JwJ10sXG4gICAgZ2V0VG9DdXJyZW5jaWVzOiAoKSA9PiBbJ2JjaCcsICdidGMnLCAnZXRjJywgJ2V0aCcsICdsdGMnLCAndXN0J10sXG4gICAgZ2V0V2lkZ2V0SHRtbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCgnaHR0cHM6Ly93aWRnZXQuY2hhbmdlbGx5LmNvbS8/dj0zJnRoZW1lPWRlZmF1bHQnKTtcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdmcm9tRGVmYXVsdCcsIHRoaXMuZ2V0RGVmYXVsdEZyb21DdXJyZW5jeSgpKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5ID0gc3RvcmUucm9vdF9zdG9yZS5jbGllbnQuY3VycmVuY3kudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdldFRvQ3VycmVuY2llcygpLmluY2x1ZGVzKGN1cnJlbmN5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvX2N1cnJlbmN5ID0gY3VycmVuY3kgPT09ICd1c3QnID8gJ3VzZHQnIDogY3VycmVuY3k7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3RvJywgdG9fY3VycmVuY3kpO1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCd0b0RlZmF1bHQnLCB0b19jdXJyZW5jeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdhbW91bnQnLCAxKTtcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdtZXJjaGFudF9pZCcsICdpaXEzamR0MnA0NHlyZmJ4Jyk7XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG9uTW91bnRXaWRnZXRDb250YWluZXI6ICgpID0+IHt9LFxuICAgIHNob3VsZF9zaG93X2RlcG9zaXRfYWRkcmVzczogdHJ1ZSxcbn0pO1xuXG5jb25zdCBjcmVhdGVYYW5Qb29sUHJvdmlkZXIgPSBzdG9yZSA9PiAoe1xuICAgIGljb246IHsgZGFyazogJ0ljQ2FzaGllclhhbnBvb2xEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJYYW5wb29sTGlnaHQnIH0sXG4gICAgbmFtZTogJ1hhblBvb2wnLFxuICAgIGdldERlc2NyaXB0aW9uOiAoKSA9PlxuICAgICAgICBsb2NhbGl6ZShcbiAgICAgICAgICAgICdCdXkgY3J5cHRvY3VycmVuY2llcyBpbiBhbiBpbnN0YW50LiBFbmpveSBlYXN5LCBxdWljaywgYW5kIHNlY3VyZSBleGNoYW5nZXMgdXNpbmcgeW91ciBsb2NhbCBwYXltZW50IG1ldGhvZHMuJ1xuICAgICAgICApLFxuICAgIGdldEFsbG93ZWRSZXNpZGVuY2llczogKCkgPT4gWycqJ10sXG4gICAgZ2V0UGF5bWVudEljb25zOiAoKSA9PiBbXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllckZwc0RhcmsnLCBsaWdodDogJ0ljQ2FzaGllckZwc0xpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJBbGlQYXlEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJBbGlQYXlMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyR29QYXlEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJHb1BheUxpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJNYW5kaXJpUGF5JywgbGlnaHQ6ICdJY0Nhc2hpZXJNYW5kaXJpUGF5JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJJbnN0YVBheUxpZ2h0JywgbGlnaHQ6ICdJY0Nhc2hpZXJJbnN0YVBheURhcmsnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllckNlYnVhbmFMaHVpbGxpZXJEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJDZWJ1YW5hTGh1aWxsaWVyTGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclBheU5vd0RhcmsnLCBsaWdodDogJ0ljQ2FzaGllclBheU5vd0xpZ2h0JyB9LFxuICAgICAgICB7IGRhcms6ICdJY0Nhc2hpZXJVcGlEYXJrJywgbGlnaHQ6ICdJY0Nhc2hpZXJVcGlMaWdodCcgfSxcbiAgICAgICAgeyBkYXJrOiAnSWNDYXNoaWVyUHJvbXB0UGF5RGFyaycsIGxpZ2h0OiAnSWNDYXNoaWVyUHJvbXB0UGF5TGlnaHQnIH0sXG4gICAgICAgIHsgZGFyazogJ0ljQ2FzaGllclZpZXR0bGVQYXknLCBsaWdodDogJ0ljQ2FzaGllclZpZXR0bGVQYXknIH0sXG4gICAgXSxcbiAgICBnZXRTY3JpcHREZXBlbmRlbmNpZXM6ICgpID0+IFtdLFxuICAgIGdldFRvQ3VycmVuY2llczogKCkgPT4gWydidGMnLCAnZXRoJywgJ3VzdCcsICd6aWwnLCAnbmVtJ10sXG4gICAgZ2V0V2lkZ2V0SHRtbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBjdXJyZW5jeSB9ID0gc3RvcmUucm9vdF9zdG9yZS5jbGllbnQ7XG5cbiAgICAgICAgICAgIGxldCB1cmwgPSAnaHR0cHM6Ly9jaGVja291dC54YW5wb29sLmNvbS8nO1xuXG4gICAgICAgICAgICB1cmwgKz0gYD9hcGlLZXk9ZGI0ZWM2MzhkZmY5YTY4YWJkYTFlZjZiNzYzOGMyMjBgO1xuICAgICAgICAgICAgdXJsICs9IGAmcmVkaXJlY3RVcmw9JHt3aW5kb3cubG9jYXRpb24uaHJlZn1gO1xuICAgICAgICAgICAgdXJsICs9IGAmd2FsbGV0PSR7c3RvcmUuZGVwb3NpdF9hZGRyZXNzfWA7XG4gICAgICAgICAgICB1cmwgKz0gYCZjcnlwdG9DdXJyZW5jeT0ke2N1cnJlbmN5ID09PSAnVVNUJyA/ICdVU0RUJyA6IGN1cnJlbmN5fWA7XG4gICAgICAgICAgICB1cmwgKz0gYCZ0cmFuc2FjdGlvblR5cGU9YnV5YDtcblxuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBvbk1vdW50V2lkZ2V0Q29udGFpbmVyOiAoKSA9PiB7fSxcbiAgICBzaG91bGRfc2hvd19kZXBvc2l0X2FkZHJlc3M6IGZhbHNlLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjcmVhdGVCYW54YVByb3ZpZGVyLFxuICAgIGNyZWF0ZUNoYW5nZWxseVByb3ZpZGVyLFxuICAgIGNyZWF0ZVhhblBvb2xQcm92aWRlcixcbn07XG4iLCJpbXBvcnQgeyBnZXRDdXJyZW5jeURpc3BsYXlDb2RlIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5cbmNvbnN0IHRlbXBsYXRlID0gKHN0cmluZywgY29udGVudCkgPT4ge1xuICAgIGxldCB0b19yZXBsYWNlID0gY29udGVudDtcbiAgICBpZiAoY29udGVudCAmJiAhQXJyYXkuaXNBcnJheShjb250ZW50KSkge1xuICAgICAgICB0b19yZXBsYWNlID0gW2NvbnRlbnRdO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcW18oXFxkKyldL2csIChzLCBpbmRleCkgPT4gdG9fcmVwbGFjZVsraW5kZXggLSAxXSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBET00gZWxlbWVudCBhbmQgYWRkcyBhbnkgYXR0cmlidXRlcyB0byBpdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGFnX25hbWU6IHRoZSB0YWcgdG8gY3JlYXRlLCBlLmcuICdkaXYnLCAnYScsIGV0Y1xuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXM6IGFsbCB0aGUgYXR0cmlidXRlcyB0byBhc3NpZ24sIGUuZy4geyBpZDogJy4uLicsIGNsYXNzOiAnLi4uJywgaHRtbDogJy4uLicsIC4uLiB9XG4gKiBAcmV0dXJuIHRoZSBjcmVhdGVkIERPTSBlbGVtZW50XG4gKi9cbmNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAodGFnX25hbWUsIGF0dHJpYnV0ZXMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdfbmFtZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgICAgICBpZiAoYXR0ciA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGF0dHIgPT09ICdodG1sJykge1xuICAgICAgICAgICAgZWwuaHRtbCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGVsO1xufTtcblxubGV0IHN0YXRpY19oYXNoO1xuY29uc3QgZ2V0U3RhdGljSGFzaCA9ICgpID0+IHtcbiAgICBzdGF0aWNfaGFzaCA9XG4gICAgICAgIHN0YXRpY19oYXNoIHx8IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHRbc3JjKj1cIm1haW5cIl0nKS5nZXRBdHRyaWJ1dGUoJ3NyYycpIHx8ICcnKS5zcGxpdCgnLicpWzFdO1xuICAgIHJldHVybiBzdGF0aWNfaGFzaDtcbn07XG5cbmNsYXNzIFByb21pc2VDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBjb3B5VG9DbGlwYm9hcmQgPSB0ZXh0ID0+IHtcbiAgICBjb25zdCB0ZXh0RmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHRleHRGaWVsZC5pbm5lclRleHQgPSB0ZXh0O1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGV4dEZpZWxkKTtcbiAgICB0ZXh0RmllbGQuc2VsZWN0KCk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICB0ZXh0RmllbGQucmVtb3ZlKCk7XG59O1xuLy8gZXUgY291bnRyaWVzIHRvIHN1cHBvcnRcbmNvbnN0IGV1X2NvdW50cmllcyA9IFtcbiAgICAnaXQnLFxuICAgICdkZScsXG4gICAgJ2ZyJyxcbiAgICAnbHUnLFxuICAgICdncicsXG4gICAgJ21mJyxcbiAgICAnZXMnLFxuICAgICdzaycsXG4gICAgJ2x0JyxcbiAgICAnbmwnLFxuICAgICdhdCcsXG4gICAgJ2JnJyxcbiAgICAnc2knLFxuICAgICdjeScsXG4gICAgJ2JlJyxcbiAgICAncm8nLFxuICAgICdocicsXG4gICAgJ3B0JyxcbiAgICAncGwnLFxuICAgICdsdicsXG4gICAgJ2VlJyxcbiAgICAnY3onLFxuICAgICdmaScsXG4gICAgJ2h1JyxcbiAgICAnZGsnLFxuICAgICdzZScsXG4gICAgJ2llJyxcbiAgICAnaW0nLFxuICAgICdnYicsXG4gICAgJ210Jyxcbl07XG4vLyBjaGVjayBpZiBjbGllbnQgaXMgZnJvbSBFVVxuY29uc3QgaXNFdUNvdW50cnkgPSBjb3VudHJ5ID0+IGV1X2NvdW50cmllcy5pbmNsdWRlcyhjb3VudHJ5KTtcblxuLy8gY2hlY2sgaWYgbWx0IG9yIGR4dHJhZGUgZm9yIGFjY291bnQgdGV4dFxuY29uc3QgZ2V0QWNjb3VudFRleHQgPSBhY2NvdW50ID0+IHtcbiAgICBsZXQgYWNjb3VudF90ZXh0ID0gJyc7XG4gICAgaWYgKGFjY291bnQuaXNfZHh0cmFkZSB8fCBhY2NvdW50LmlzX210KSB7XG4gICAgICAgIGFjY291bnRfdGV4dCA9IGFjY291bnQudGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhY2NvdW50X3RleHQgPSBnZXRDdXJyZW5jeURpc3BsYXlDb2RlKGFjY291bnQudGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY291bnRfdGV4dDtcbn07XG5cbmV4cG9ydCB7IGNvcHlUb0NsaXBib2FyZCwgY3JlYXRlRWxlbWVudCwgZ2V0QWNjb3VudFRleHQsIGdldFN0YXRpY0hhc2gsIGlzRXVDb3VudHJ5LCBQcm9taXNlQ2xhc3MsIHRlbXBsYXRlIH07XG4iLCJjbGFzcyBFcnJvcnMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVycm9ycyA9IHt9O1xuICAgIH1cblxuICAgIGFkZChhdHRyaWJ1dGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhcyhhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yc1thdHRyaWJ1dGVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5lcnJvcnNbYXR0cmlidXRlXS5pbmRleE9mKG1lc3NhZ2UpID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcnNbYXR0cmlidXRlXS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnM7XG4gICAgfVxuXG4gICAgZmlyc3QoYXR0cmlidXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmhhcyhhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnNbYXR0cmlidXRlXVswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXQoYXR0cmlidXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmhhcyhhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnNbYXR0cmlidXRlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBoYXMoYXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5lcnJvcnMsIGF0dHJpYnV0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFcnJvcnM7XG4iLCJpbXBvcnQgeyBnZXRQcmVCdWlsZERWUnMgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnX2NvbW1vbi91dGlsaXR5JztcbmltcG9ydCBFcnJvciBmcm9tICcuL2Vycm9ycyc7XG5cbmNsYXNzIFZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQsIHJ1bGVzLCBzdG9yZSA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBuZXcgRXJyb3IoKTtcblxuICAgICAgICB0aGlzLmVycm9yX2NvdW50ID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgZmFpbHVyZSBhbmQgZXJyb3IgbWVzc2FnZSBmb3IgZ2l2ZW4gcnVsZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBydWxlXG4gICAgICovXG4gICAgYWRkRmFpbHVyZShhdHRyaWJ1dGUsIHJ1bGUsIGVycm9yX21lc3NhZ2UpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBlcnJvcl9tZXNzYWdlIHx8IHJ1bGUub3B0aW9ucy5tZXNzYWdlIHx8IGdldFByZUJ1aWxkRFZScygpW3J1bGUubmFtZV0ubWVzc2FnZSgpO1xuICAgICAgICBpZiAocnVsZS5uYW1lID09PSAnbGVuZ3RoJykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRlbXBsYXRlKG1lc3NhZ2UsIFtcbiAgICAgICAgICAgICAgICBydWxlLm9wdGlvbnMubWluID09PSBydWxlLm9wdGlvbnMubWF4ID8gcnVsZS5vcHRpb25zLm1pbiA6IGAke3J1bGUub3B0aW9ucy5taW59LSR7cnVsZS5vcHRpb25zLm1heH1gLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocnVsZS5uYW1lID09PSAnbWluJykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRlbXBsYXRlKG1lc3NhZ2UsIFtydWxlLm9wdGlvbnMubWluXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocnVsZS5uYW1lID09PSAnbm90X2VxdWFsJykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRlbXBsYXRlKG1lc3NhZ2UsIFtydWxlLm9wdGlvbnMubmFtZTEsIHJ1bGUub3B0aW9ucy5uYW1lMl0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXJyb3JzLmFkZChhdHRyaWJ1dGUsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmVycm9yX2NvdW50Kys7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVucyB2YWxpZGF0b3JcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgaXQgcGFzc2VzOyB0cnVlID0gcGFzc2VzLCBmYWxzZSA9IGZhaWxzXG4gICAgICovXG4gICAgY2hlY2soKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuaW5wdXQpLmZvckVhY2goYXR0cmlidXRlID0+IHtcbiAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMucnVsZXMsIGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucnVsZXNbYXR0cmlidXRlXS5mb3JFYWNoKHJ1bGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bGVPYmplY3QgPSBWYWxpZGF0b3IuZ2V0UnVsZU9iamVjdChydWxlKTtcblxuICAgICAgICAgICAgICAgIGlmICghcnVsZU9iamVjdC52YWxpZGF0b3IgJiYgdHlwZW9mIHJ1bGVPYmplY3QudmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocnVsZU9iamVjdC5vcHRpb25zLmNvbmRpdGlvbiAmJiAhcnVsZU9iamVjdC5vcHRpb25zLmNvbmRpdGlvbih0aGlzLnN0b3JlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRbYXR0cmlidXRlXSA9PT0gJycgJiYgcnVsZU9iamVjdC5uYW1lICE9PSAncmVxJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGlzX3ZhbGlkLCBlcnJvcl9tZXNzYWdlO1xuICAgICAgICAgICAgICAgIGlmIChydWxlT2JqZWN0Lm5hbWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgaXNfb2ssIG1lc3NhZ2UgfSA9IHJ1bGVPYmplY3QudmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dFthdHRyaWJ1dGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU9iamVjdC5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaXNfdmFsaWQgPSBpc19vaztcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfbWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXNfdmFsaWQgPSBydWxlT2JqZWN0LnZhbGlkYXRvcih0aGlzLmlucHV0W2F0dHJpYnV0ZV0sIHJ1bGVPYmplY3Qub3B0aW9ucywgdGhpcy5zdG9yZSwgdGhpcy5pbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpc192YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmUoYXR0cmlidXRlLCBydWxlT2JqZWN0LCBlcnJvcl9tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAhdGhpcy5lcnJvcl9jb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgdmFsaWRhdGlvbiBwYXNzZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNQYXNzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIHJ1bGUgYXJyYXkgdG8gYW4gb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBydWxlXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSdWxlT2JqZWN0KHJ1bGUpIHtcbiAgICAgICAgY29uc3QgaXNfcnVsZV9zdHJpbmcgPSB0eXBlb2YgcnVsZSA9PT0gJ3N0cmluZyc7XG4gICAgICAgIGNvbnN0IHJ1bGVfb2JqZWN0ID0ge1xuICAgICAgICAgICAgbmFtZTogaXNfcnVsZV9zdHJpbmcgPyBydWxlIDogcnVsZVswXSxcbiAgICAgICAgICAgIG9wdGlvbnM6IGlzX3J1bGVfc3RyaW5nID8ge30gOiBydWxlWzFdIHx8IHt9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHJ1bGVfb2JqZWN0LnZhbGlkYXRvciA9IHJ1bGVfb2JqZWN0Lm5hbWUgPT09ICdjdXN0b20nID8gcnVsZVsxXS5mdW5jIDogZ2V0UHJlQnVpbGREVlJzKClbcnVsZV9vYmplY3QubmFtZV0uZnVuYztcblxuICAgICAgICByZXR1cm4gcnVsZV9vYmplY3Q7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWYWxpZGF0b3I7XG4iLCJleHBvcnQgZGVmYXVsdCBmcm9tICcuL3ZhbGlkYXRvcic7XG4iLCJpbXBvcnQgeyBhY3Rpb24sIGludGVyY2VwdCwgb2JzZXJ2YWJsZSwgcmVhY3Rpb24sIHRvSlMsIHdoZW4gfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IGlzUHJvZHVjdGlvbiwgaXNFbXB0eU9iamVjdCB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuXG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gJ1V0aWxzL1ZhbGlkYXRvcic7XG5cbi8qKlxuICogQmFzZVN0b3JlIGNsYXNzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhbGwgZGVmaW5lZCBzdG9yZXMgaW4gdGhlIGFwcGxpY2F0aW9uLiBJdCBoYW5kbGVzIHNvbWUgc3R1ZmYgc3VjaCBhczpcbiAqICAxLiBDcmVhdGluZyBzbmFwc2hvdCBvYmplY3QgZnJvbSB0aGUgc3RvcmUuXG4gKiAgMi4gU2F2aW5nIHRoZSBzdG9yZSdzIHNuYXBzaG90IGluIGxvY2FsL3Nlc3Npb24gc3RvcmFnZSBhbmQga2VlcGluZyB0aGVtIGluIHN5bmMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VTdG9yZSB7XG4gICAgLyoqXG4gICAgICogQW4gZW51bSBvYmplY3QgdG8gZGVmaW5lIExPQ0FMX1NUT1JBR0UgYW5kIFNFU1NJT05fU1RPUkFHRVxuICAgICAqL1xuICAgIHN0YXRpYyBTVE9SQUdFUyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBMT0NBTF9TVE9SQUdFOiBTeW1ib2woJ0xPQ0FMX1NUT1JBR0UnKSxcbiAgICAgICAgU0VTU0lPTl9TVE9SQUdFOiBTeW1ib2woJ1NFU1NJT05fU1RPUkFHRScpLFxuICAgIH0pO1xuXG4gICAgQG9ic2VydmFibGVcbiAgICB2YWxpZGF0aW9uX2Vycm9ycyA9IHt9O1xuXG4gICAgQG9ic2VydmFibGVcbiAgICB2YWxpZGF0aW9uX3J1bGVzID0ge307XG5cbiAgICBwcmVTd2l0Y2hBY2NvdW50RGlzcG9zZXIgPSBudWxsO1xuICAgIHByZV9zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IG51bGw7XG5cbiAgICBzd2l0Y2hBY2NvdW50RGlzcG9zZXIgPSBudWxsO1xuICAgIHN3aXRjaF9hY2NvdW50X2xpc3RlbmVyID0gbnVsbDtcblxuICAgIGxvZ291dERpc3Bvc2VyID0gbnVsbDtcbiAgICBsb2dvdXRfbGlzdGVuZXIgPSBudWxsO1xuXG4gICAgY2xpZW50SW5pdERpc3Bvc2VyID0gbnVsbDtcbiAgICBjbGllbnRfaW5pdF9saXN0ZW5lciA9IG51bGw7XG5cbiAgICBuZXR3b3JrU3RhdHVzQ2hhbmdlRGlzcG9zZXIgPSBudWxsO1xuICAgIG5ldHdvcmtfc3RhdHVzX2NoYW5nZV9saXN0ZW5lciA9IG51bGw7XG5cbiAgICB0aGVtZUNoYW5nZURpc3Bvc2VyID0gbnVsbDtcbiAgICB0aGVtZV9jaGFuZ2VfbGlzdGVuZXIgPSBudWxsO1xuXG4gICAgcmVhbEFjY291bnRTaWdudXBFbmRlZERpc3Bvc2VyID0gbnVsbDtcbiAgICByZWFsX2FjY291bnRfc2lnbnVwX2VuZGVkX2xpc3RlbmVyID0gbnVsbDtcblxuICAgIEBvYnNlcnZhYmxlIHBhcnRpYWxfZmV0Y2hfdGltZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgYmFzZSBjbGFzcyB0aGF0IGdldHMgcHJvcGVydGllcycgbmFtZSBvZiBjaGlsZCB3aGljaCBzaG91bGQgYmUgc2F2ZWQgaW4gc3RvcmFnZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqICAgICBAcHJvcGVydHkge09iamVjdH0gICByb290X3N0b3JlIC0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHJvb3Qgc3RvcmUgb2YgdGhlIGFwcC5cbiAgICAgKiAgICAgQHByb3BlcnR5IHtTdHJpbmdbXX0gbG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzIC0gQSBsaXN0IG9mIHByb3BlcnRpZXMnIG5hbWVzIHRoYXQgc2hvdWxkIGJlIGtlcHQgaW4gbG9jYWxTdG9yYWdlLlxuICAgICAqICAgICBAcHJvcGVydHkge1N0cmluZ1tdfSBzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcyAtIEEgbGlzdCBvZiBwcm9wZXJ0aWVzJyBuYW1lcyB0aGF0IHNob3VsZCBiZSBrZXB0IGluIHNlc3Npb25TdG9yYWdlLlxuICAgICAqICAgICBAcHJvcGVydHkge09iamVjdH0gICB2YWxpZGF0aW9uX3J1bGVzIC0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHZhbGlkYXRpb24gcnVsZXMgZm9yIGVhY2ggcHJvcGVydHkgb2YgdGhlIHN0b3JlLlxuICAgICAqICAgICBAcHJvcGVydHkge1N0cmluZ30gICBzdG9yZV9uYW1lIC0gRXhwbGljaXQgc3RvcmUgbmFtZSBmb3IgYnJvd3NlciBhcHBsaWNhdGlvbiBzdG9yYWdlICh0byBieXBhc3MgbWluaWZpY2F0aW9uKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IHJvb3Rfc3RvcmUsIGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcywgc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMsIHZhbGlkYXRpb25fcnVsZXMsIHN0b3JlX25hbWUgfSA9XG4gICAgICAgICAgICBvcHRpb25zO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncm9vdF9zdG9yZScsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xvY2FsX3N0b3JhZ2VfcHJvcGVydGllcycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Nlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgaGFzX2xvY2FsX29yX3Nlc3Npb25fc3RvcmFnZSA9XG4gICAgICAgICAgICAobG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzICYmIGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcy5sZW5ndGgpIHx8XG4gICAgICAgICAgICAoc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgJiYgc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMubGVuZ3RoKTtcblxuICAgICAgICBpZiAoaGFzX2xvY2FsX29yX3Nlc3Npb25fc3RvcmFnZSkge1xuICAgICAgICAgICAgaWYgKCFzdG9yZV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZV9uYW1lIGlzIHJlcXVpcmVkIGZvciBsb2NhbC9zZXNzaW9uIHN0b3JhZ2UnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdG9yZV9uYW1lJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBzdG9yZV9uYW1lLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yb290X3N0b3JlID0gcm9vdF9zdG9yZTtcbiAgICAgICAgdGhpcy5sb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMgPSBsb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMgfHwgW107XG4gICAgICAgIHRoaXMuc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMgPSBzZXNzaW9uX3N0b3JhZ2VfcHJvcGVydGllcyB8fCBbXTtcbiAgICAgICAgdGhpcy5zZXRWYWxpZGF0aW9uUnVsZXModmFsaWRhdGlvbl9ydWxlcyk7XG5cbiAgICAgICAgdGhpcy5zZXR1cFJlYWN0aW9uRm9yTG9jYWxTdG9yYWdlKCk7XG4gICAgICAgIHRoaXMuc2V0dXBSZWFjdGlvbkZvclNlc3Npb25TdG9yYWdlKCk7XG4gICAgICAgIHRoaXMucmV0cmlldmVGcm9tU3RvcmFnZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gc25hcHNob3Qgb2YgdGhlIGN1cnJlbnQgc3RvcmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nW119IHByb3BlcnRpZXMgLSBBIGxpc3Qgb2YgcHJvcGVydGllcycgbmFtZXMgdGhhdCBzaG91bGQgYmUgaW4gdGhlIHNuYXBzaG90LlxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGEgY2xvbmVkIG9iamVjdCBvZiB0aGUgc3RvcmUuXG4gICAgICovXG4gICAgZ2V0U25hcHNob3QocHJvcGVydGllcykge1xuICAgICAgICBsZXQgc25hcHNob3QgPSB0b0pTKHRoaXMpO1xuXG4gICAgICAgIGlmICghaXNFbXB0eU9iamVjdCh0aGlzLnJvb3Rfc3RvcmUpKSB7XG4gICAgICAgICAgICBzbmFwc2hvdC5yb290X3N0b3JlID0gdGhpcy5yb290X3N0b3JlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BlcnRpZXMgJiYgcHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNuYXBzaG90ID0gcHJvcGVydGllcy5yZWR1Y2UoKHJlc3VsdCwgcCkgPT4gT2JqZWN0LmFzc2lnbihyZXN1bHQsIHsgW3BdOiBzbmFwc2hvdFtwXSB9KSwge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgYSByZWFjdGlvbiBvbiBwcm9wZXJ0aWVzIHdoaWNoIGFyZSBtZW50aW9uZWQgaW4gYGxvY2FsX3N0b3JhZ2VfcHJvcGVydGllc2BcbiAgICAgKiAgYW5kIGludm9rZXMgYHNhdmVUb1N0b3JhZ2VgIHdoZW4gdGhlcmUgYXJlIGFueSBjaGFuZ2VzIG9uIHRoZW0uXG4gICAgICpcbiAgICAgKi9cbiAgICBzZXR1cFJlYWN0aW9uRm9yTG9jYWxTdG9yYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5sb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWFjdGlvbihcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLmxvY2FsX3N0b3JhZ2VfcHJvcGVydGllcy5tYXAoaSA9PiB0aGlzW2ldKSxcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnNhdmVUb1N0b3JhZ2UodGhpcy5sb2NhbF9zdG9yYWdlX3Byb3BlcnRpZXMsIEJhc2VTdG9yZS5TVE9SQUdFUy5MT0NBTF9TVE9SQUdFKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgYSByZWFjdGlvbiBvbiBwcm9wZXJ0aWVzIHdoaWNoIGFyZSBtZW50aW9uZWQgaW4gYHNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzYFxuICAgICAqICBhbmQgaW52b2tlcyBgc2F2ZVRvU3RvcmFnZWAgd2hlbiB0aGVyZSBhcmUgYW55IGNoYW5nZXMgb24gdGhlbS5cbiAgICAgKlxuICAgICAqL1xuICAgIHNldHVwUmVhY3Rpb25Gb3JTZXNzaW9uU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWFjdGlvbihcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzLm1hcChpID0+IHRoaXNbaV0pLFxuICAgICAgICAgICAgICAgICgpID0+IHRoaXMuc2F2ZVRvU3RvcmFnZSh0aGlzLnNlc3Npb25fc3RvcmFnZV9wcm9wZXJ0aWVzLCBCYXNlU3RvcmUuU1RPUkFHRVMuU0VTU0lPTl9TVE9SQUdFKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgcHJvcGVydGllcyB0aGF0IGFyZSBub3QgcGFzc2VkIGZyb20gdGhlIHNuYXBzaG90IG9mIHRoZSBzdG9yZSBhbmQgc2F2ZXMgaXQgdG8gdGhlIHBhc3NlZCBzdG9yYWdlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBwcm9wZXJ0aWVzIC0gQSBsaXN0IG9mIHRoZSBzdG9yZSdzIHByb3BlcnRpZXMnIG5hbWVzIHdoaWNoIHNob3VsZCBiZSBzYXZlZCBpbiB0aGUgc3RvcmFnZS5cbiAgICAgKiBAcGFyYW0ge1N5bWJvbH0gICBzdG9yYWdlICAgIC0gQSBzeW1ib2wgb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgc3RvcmFnZSB3aGljaCB0aGUgc25hcHNob3Qgc2hvdWxkIGJlIHN0b3JlZCBpbiBpdC5cbiAgICAgKlxuICAgICAqL1xuICAgIHNhdmVUb1N0b3JhZ2UocHJvcGVydGllcywgc3RvcmFnZSkge1xuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0U25hcHNob3QocHJvcGVydGllcyksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzdG9yYWdlID09PSBCYXNlU3RvcmUuU1RPUkFHRVMuTE9DQUxfU1RPUkFHRSkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yZV9uYW1lLCBzbmFwc2hvdCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RvcmFnZSA9PT0gQmFzZVN0b3JlLlNUT1JBR0VTLlNFU1NJT05fU1RPUkFHRSkge1xuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JlX25hbWUsIHNuYXBzaG90KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBzYXZlZCBzbmFwc2hvdCBvZiB0aGUgc3RvcmUgYW5kIGFzc2lnbnMgdG8gdGhlIGN1cnJlbnQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKi9cbiAgICBAYWN0aW9uXG4gICAgcmV0cmlldmVGcm9tU3RvcmFnZSgpIHtcbiAgICAgICAgY29uc3QgbG9jYWxfc3RvcmFnZV9zbmFwc2hvdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5zdG9yZV9uYW1lLCB7fSkpO1xuICAgICAgICBjb25zdCBzZXNzaW9uX3N0b3JhZ2Vfc25hcHNob3QgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0odGhpcy5zdG9yZV9uYW1lLCB7fSkpO1xuXG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0geyAuLi5sb2NhbF9zdG9yYWdlX3NuYXBzaG90LCAuLi5zZXNzaW9uX3N0b3JhZ2Vfc25hcHNob3QgfTtcblxuICAgICAgICBPYmplY3Qua2V5cyhzbmFwc2hvdCkuZm9yRWFjaChrID0+ICh0aGlzW2tdID0gc25hcHNob3Rba10pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHZhbGlkYXRpb24gZXJyb3IgbWVzc2FnZXMgZm9yIGFuIG9ic2VydmFibGUgcHJvcGVydHkgb2YgdGhlIHN0b3JlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lIC0gVGhlIG9ic2VydmFibGUgcHJvcGVydHkncyBuYW1lXG4gICAgICogQHBhcmFtIFt7U3RyaW5nfV0gbWVzc2FnZXMgLSBBbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgY29udGFpbnMgdmFsaWRhdGlvbiBlcnJvciBtZXNzYWdlcyBmb3IgdGhlIHBhcnRpY3VsYXIgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKi9cbiAgICBAYWN0aW9uXG4gICAgc2V0VmFsaWRhdGlvbkVycm9yTWVzc2FnZXMocHJvcGVydHlOYW1lLCBtZXNzYWdlcykge1xuICAgICAgICBjb25zdCBpc19kaWZmZXJlbnQgPSAoKSA9PlxuICAgICAgICAgICAgISF0aGlzLnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV1cbiAgICAgICAgICAgICAgICAuZmlsdGVyKHggPT4gIW1lc3NhZ2VzLmluY2x1ZGVzKHgpKVxuICAgICAgICAgICAgICAgIC5jb25jYXQobWVzc2FnZXMuZmlsdGVyKHggPT4gIXRoaXMudmFsaWRhdGlvbl9lcnJvcnNbcHJvcGVydHlOYW1lXS5pbmNsdWRlcyh4KSkpLmxlbmd0aDtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25fZXJyb3JzW3Byb3BlcnR5TmFtZV0gfHwgaXNfZGlmZmVyZW50KCkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbl9lcnJvcnNbcHJvcGVydHlOYW1lXSA9IG1lc3NhZ2VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2YWxpZGF0aW9uIHJ1bGVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcnVsZXNcbiAgICAgKlxuICAgICAqL1xuICAgIEBhY3Rpb25cbiAgICBzZXRWYWxpZGF0aW9uUnVsZXMocnVsZXMgPSB7fSkge1xuICAgICAgICBPYmplY3Qua2V5cyhydWxlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRSdWxlKGtleSwgcnVsZXNba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgcnVsZXMgdG8gdGhlIHBhcnRpY3VsYXIgcHJvcGVydHlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBydWxlc1xuICAgICAqXG4gICAgICovXG4gICAgQGFjdGlvblxuICAgIGFkZFJ1bGUocHJvcGVydHksIHJ1bGVzKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbl9ydWxlc1twcm9wZXJ0eV0gPSBydWxlcztcblxuICAgICAgICBpbnRlcmNlcHQodGhpcywgcHJvcGVydHksIGNoYW5nZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlUHJvcGVydHkocHJvcGVydHksIGNoYW5nZS5uZXdWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgYSBwYXJ0aWN1bGFyIHByb3BlcnR5IG9mIHRoZSBzdG9yZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGluIHRoZSBzdG9yZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZSAgICAtIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHksIGl0IGNhbiBiZSB1bmRlZmluZWQuXG4gICAgICpcbiAgICAgKi9cbiAgICBAYWN0aW9uXG4gICAgdmFsaWRhdGVQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMudmFsaWRhdGlvbl9ydWxlc1twcm9wZXJ0eV0udHJpZ2dlcjtcbiAgICAgICAgY29uc3QgaW5wdXRzID0geyBbcHJvcGVydHldOiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB0aGlzW3Byb3BlcnR5XSB9O1xuICAgICAgICBjb25zdCB2YWxpZGF0aW9uX3J1bGVzID0geyBbcHJvcGVydHldOiB0aGlzLnZhbGlkYXRpb25fcnVsZXNbcHJvcGVydHldLnJ1bGVzIHx8IFtdIH07XG5cbiAgICAgICAgaWYgKCEhdHJpZ2dlciAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCB0cmlnZ2VyKSkge1xuICAgICAgICAgICAgaW5wdXRzW3RyaWdnZXJdID0gdGhpc1t0cmlnZ2VyXTtcbiAgICAgICAgICAgIHZhbGlkYXRpb25fcnVsZXNbdHJpZ2dlcl0gPSB0aGlzLnZhbGlkYXRpb25fcnVsZXNbdHJpZ2dlcl0ucnVsZXMgfHwgW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKGlucHV0cywgdmFsaWRhdGlvbl9ydWxlcywgdGhpcyk7XG5cbiAgICAgICAgdmFsaWRhdG9yLmlzUGFzc2VkKCk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbGlkYXRpb25FcnJvck1lc3NhZ2VzKGtleSwgdmFsaWRhdG9yLmVycm9ycy5nZXQoa2V5KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyBhbGwgcHJvcGVydGllcyB3aGljaCB2YWxpZGF0aW9uIHJ1bGUgaGFzIGJlZW4gc2V0IGZvci5cbiAgICAgKlxuICAgICAqL1xuICAgIEBhY3Rpb25cbiAgICB2YWxpZGF0ZUFsbFByb3BlcnRpZXMoKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb25fcnVsZXMgPSBPYmplY3Qua2V5cyh0aGlzLnZhbGlkYXRpb25fcnVsZXMpO1xuICAgICAgICBjb25zdCB2YWxpZGF0aW9uX2Vycm9ycyA9IE9iamVjdC5rZXlzKHRoaXMudmFsaWRhdGlvbl9lcnJvcnMpO1xuXG4gICAgICAgIHZhbGlkYXRpb25fcnVsZXMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVQcm9wZXJ0eShwLCB0aGlzW3BdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGtleXMgdGhhdCBhcmUgcHJlc2VudCBpbiBlcnJvciwgYnV0IG5vdCBpbiBydWxlczpcbiAgICAgICAgdmFsaWRhdGlvbl9lcnJvcnMuZm9yRWFjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRpb25fcnVsZXMuaW5jbHVkZXMoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudmFsaWRhdGlvbl9lcnJvcnNbZXJyb3JdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25Td2l0Y2hBY2NvdW50KGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IGxpc3RlbmVyO1xuXG4gICAgICAgICAgICB0aGlzLnN3aXRjaEFjY291bnREaXNwb3NlciA9IHdoZW4oXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290X3N0b3JlLmNsaWVudC5zd2l0Y2hfYnJvYWRjYXN0LFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc3dpdGNoX2FjY291bnRfbGlzdGVuZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4gJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnN3aXRjaEVuZFNpZ25hbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU3dpdGNoQWNjb3VudCh0aGlzLnN3aXRjaF9hY2NvdW50X2xpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTd2l0Y2hpbmcgYWNjb3VudCBsaXN0ZW5lcnMgYXJlIHJlcXVpcmVkIHRvIHJldHVybiBhIHByb21pc2UuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvZHVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25QcmVTd2l0Y2hBY2NvdW50KGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5wcmVfc3dpdGNoX2FjY291bnRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgICAgICAgIHRoaXMucHJlU3dpdGNoQWNjb3VudERpc3Bvc2VyID0gd2hlbihcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnByZV9zd2l0Y2hfYnJvYWRjYXN0LFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucHJlX3N3aXRjaF9hY2NvdW50X2xpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zZXRQcmVTd2l0Y2hBY2NvdW50KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByZVN3aXRjaEFjY291bnQodGhpcy5wcmVfc3dpdGNoX2FjY291bnRfbGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByZS1zd2l0Y2ggYWNjb3VudCBsaXN0ZW5lcnMgYXJlIHJlcXVpcmVkIHRvIHJldHVybiBhIHByb21pc2UuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvZHVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25Mb2dvdXQobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5sb2dvdXREaXNwb3NlciA9IHdoZW4oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50Lmhhc19sb2dnZWRfb3V0LFxuICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubG9nb3V0X2xpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4gJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zZXRMb2dvdXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Mb2dvdXQodGhpcy5sb2dvdXRfbGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ291dCBsaXN0ZW5lcnMgYXJlIHJlcXVpcmVkIHRvIHJldHVybiBhIHByb21pc2UuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgbnVsbCBvYmplY3QgYXMgYSBmdW5jdGlvbi4gQWx0aG91Z2gsIGluIGRldmVsb3BtZW50IG1vZGUsIHdlIHRocm93IGEgY29uc29sZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Byb2R1Y3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5sb2dvdXRfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25DbGllbnRJbml0KGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuY2xpZW50SW5pdERpc3Bvc2VyID0gd2hlbihcbiAgICAgICAgICAgICgpID0+IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaW5pdGlhbGl6ZWRfYnJvYWRjYXN0LFxuICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY2xpZW50X2luaXRfbGlzdGVuZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQudGhlbiAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnNldEluaXRpYWxpemVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xpZW50SW5pdCh0aGlzLmNsaWVudF9pbml0X2xpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQgaW5pdCBsaXN0ZW5lcnMgYXJlIHJlcXVpcmVkIHRvIHJldHVybiBhIHByb21pc2UuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBsaXN0ZW5lciBjdXJyZW50bHkgYWN0aXZlLiBzbyB3ZSBjYW4ganVzdCBpZ25vcmUgdGhlIGVycm9yIHJhaXNlZCBmcm9tIHRyZWF0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgbnVsbCBvYmplY3QgYXMgYSBmdW5jdGlvbi4gQWx0aG91Z2gsIGluIGRldmVsb3BtZW50IG1vZGUsIHdlIHRocm93IGEgY29uc29sZSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Byb2R1Y3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jbGllbnRfaW5pdF9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvbk5ldHdvcmtTdGF0dXNDaGFuZ2UobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5uZXR3b3JrU3RhdHVzQ2hhbmdlRGlzcG9zZXIgPSByZWFjdGlvbihcbiAgICAgICAgICAgICgpID0+IHRoaXMucm9vdF9zdG9yZS5jb21tb24uaXNfbmV0d29ya19vbmxpbmUsXG4gICAgICAgICAgICBpc19vbmxpbmUgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV0d29ya19zdGF0dXNfY2hhbmdlX2xpc3RlbmVyKGlzX29ubGluZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uZXR3b3JrX3N0YXR1c19jaGFuZ2VfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25UaGVtZUNoYW5nZShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnRoZW1lQ2hhbmdlRGlzcG9zZXIgPSByZWFjdGlvbihcbiAgICAgICAgICAgICgpID0+IHRoaXMucm9vdF9zdG9yZS51aS5pc19kYXJrX21vZGVfb24sXG4gICAgICAgICAgICBpc19kYXJrX21vZGVfb24gPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGhlbWVfY2hhbmdlX2xpc3RlbmVyKGlzX2RhcmtfbW9kZV9vbik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gbGlzdGVuZXIgY3VycmVudGx5IGFjdGl2ZS4gc28gd2UgY2FuIGp1c3QgaWdub3JlIHRoZSBlcnJvciByYWlzZWQgZnJvbSB0cmVhdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBhIG51bGwgb2JqZWN0IGFzIGEgZnVuY3Rpb24uIEFsdGhvdWdoLCBpbiBkZXZlbG9wbWVudCBtb2RlLCB3ZSB0aHJvdyBhIGNvbnNvbGUgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy50aGVtZV9jaGFuZ2VfbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25SZWFsQWNjb3VudFNpZ251cEVuZChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlciA9IHdoZW4oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJvb3Rfc3RvcmUudWkuaGFzX3JlYWxfYWNjb3VudF9zaWdudXBfZW5kZWQsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWFsX2FjY291bnRfc2lnbnVwX2VuZGVkX2xpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4gJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLnVpLnNldFJlYWxBY2NvdW50U2lnbnVwRW5kKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUmVhbEFjY291bnRTaWdudXBFbmQodGhpcy5yZWFsX2FjY291bnRfc2lnbnVwX2VuZGVkX2xpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFsIGFjY291bnQgc2lnbnVwIGxpc3RlbmVycyBhcmUgcmVxdWlyZWQgdG8gcmV0dXJuIGEgcHJvbWlzZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGxpc3RlbmVyIGN1cnJlbnRseSBhY3RpdmUuIHNvIHdlIGNhbiBqdXN0IGlnbm9yZSB0aGUgZXJyb3IgcmFpc2VkIGZyb20gdHJlYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBudWxsIG9iamVjdCBhcyBhIGZ1bmN0aW9uLiBBbHRob3VnaCwgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgd2UgdGhyb3cgYSBjb25zb2xlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvZHVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZF9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBkaXNwb3NlUHJlU3dpdGNoQWNjb3VudCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZVN3aXRjaEFjY291bnREaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5wcmVTd2l0Y2hBY2NvdW50RGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZV9zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGRpc3Bvc2VTd2l0Y2hBY2NvdW50KCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc3dpdGNoQWNjb3VudERpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnN3aXRjaEFjY291bnREaXNwb3NlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3dpdGNoX2FjY291bnRfbGlzdGVuZXIgPSBudWxsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBkaXNwb3NlTG9nb3V0KCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMubG9nb3V0RGlzcG9zZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMubG9nb3V0RGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ291dF9saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGRpc3Bvc2VDbGllbnRJbml0KCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY2xpZW50SW5pdERpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudEluaXREaXNwb3NlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xpZW50X2luaXRfbGlzdGVuZXIgPSBudWxsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBkaXNwb3NlTmV0d29ya1N0YXR1c0NoYW5nZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm5ldHdvcmtTdGF0dXNDaGFuZ2VEaXNwb3NlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5uZXR3b3JrU3RhdHVzQ2hhbmdlRGlzcG9zZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5ldHdvcmtfc3RhdHVzX2NoYW5nZV9saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGRpc3Bvc2VUaGVtZUNoYW5nZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRoZW1lQ2hhbmdlRGlzcG9zZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudGhlbWVDaGFuZ2VEaXNwb3NlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGhlbWVfY2hhbmdlX2xpc3RlbmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgZGlzcG9zZVJlYWxBY2NvdW50U2lnbnVwRW5kKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVhbEFjY291bnRTaWdudXBFbmRlZERpc3Bvc2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWxBY2NvdW50U2lnbnVwRW5kZWREaXNwb3NlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhbF9hY2NvdW50X3NpZ251cF9lbmRlZF9saXN0ZW5lciA9IG51bGw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlUHJlU3dpdGNoQWNjb3VudCgpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VTd2l0Y2hBY2NvdW50KCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZUxvZ291dCgpO1xuICAgICAgICB0aGlzLmRpc3Bvc2VDbGllbnRJbml0KCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZU5ldHdvcmtTdGF0dXNDaGFuZ2UoKTtcbiAgICAgICAgdGhpcy5kaXNwb3NlVGhlbWVDaGFuZ2UoKTtcbiAgICAgICAgdGhpcy5kaXNwb3NlUmVhbEFjY291bnRTaWdudXBFbmQoKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXNzZXJ0SGFzVmFsaWRDYWNoZShsb2dpbmlkLCAuLi5yZWFjdGlvbnMpIHtcbiAgICAgICAgLy8gYWNjb3VudCB3YXMgY2hhbmdlZCB3aGVuIHRoaXMgd2FzIHVubW91bnRlZC5cbiAgICAgICAgaWYgKHRoaXMucm9vdF9zdG9yZS5jbGllbnQubG9naW5pZCAhPT0gbG9naW5pZCkge1xuICAgICAgICAgICAgcmVhY3Rpb25zLmZvckVhY2goYWN0ID0+IGFjdCgpKTtcbiAgICAgICAgICAgIHRoaXMucGFydGlhbF9mZXRjaF90aW1lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBhY3Rpb24sIGNvbXB1dGVkLCBvYnNlcnZhYmxlLCByZWFjdGlvbiB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcbmltcG9ydCB7IGdldEtlYmFiQ2FzZSwgaXNDcnlwdG9jdXJyZW5jeSwgcm91dGVzLCB3ZWJzaXRlVXJsIH0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgT25yYW1wUHJvdmlkZXJzIGZyb20gJ0NvbmZpZy9vbi1yYW1wLXByb3ZpZGVycyc7XG5pbXBvcnQgQmFzZVN0b3JlIGZyb20gJy4uL2Jhc2Utc3RvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPblJhbXBTdG9yZSBleHRlbmRzIEJhc2VTdG9yZSB7XG4gICAgQG9ic2VydmFibGUgYXBpX2Vycm9yID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSBkZXBvc2l0X2FkZHJlc3MgPSBudWxsO1xuICAgIEBvYnNlcnZhYmxlIGlzX2RlcG9zaXRfYWRkcmVzc19sb2FkaW5nID0gdHJ1ZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19kZXBvc2l0X2FkZHJlc3NfcG9wb3Zlcl9vcGVuID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfb25yYW1wX21vZGFsX29wZW4gPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19yZXF1ZXN0aW5nX3dpZGdldF9odG1sID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUuc2hhbGxvdyBvbnJhbXBfcHJvdmlkZXJzID0gW107XG4gICAgQG9ic2VydmFibGUucmVmIHNlbGVjdGVkX3Byb3ZpZGVyID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSBzaG91bGRfc2hvd193aWRnZXQgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSB3aWRnZXRfZXJyb3IgPSBudWxsO1xuICAgIEBvYnNlcnZhYmxlIHdpZGdldF9odG1sID0gbnVsbDtcblxuICAgIGRlcG9zaXRfYWRkcmVzc19yZWYgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoeyBXUywgcm9vdF9zdG9yZSB9KSB7XG4gICAgICAgIHN1cGVyKHsgcm9vdF9zdG9yZSB9KTtcbiAgICAgICAgdGhpcy5XUyA9IFdTO1xuXG4gICAgICAgIHRoaXMub25DbGllbnRJbml0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0T25yYW1wUHJvdmlkZXJzKFtcbiAgICAgICAgICAgICAgICBPbnJhbXBQcm92aWRlcnMuY3JlYXRlQ2hhbmdlbGx5UHJvdmlkZXIodGhpcyksXG4gICAgICAgICAgICAgICAgT25yYW1wUHJvdmlkZXJzLmNyZWF0ZVhhblBvb2xQcm92aWRlcih0aGlzKSxcbiAgICAgICAgICAgICAgICBPbnJhbXBQcm92aWRlcnMuY3JlYXRlQmFueGFQcm92aWRlcih0aGlzKSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfb25yYW1wX3RhYl92aXNpYmxlKCkge1xuICAgICAgICBjb25zdCB7IGNsaWVudCB9ID0gdGhpcy5yb290X3N0b3JlO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBjbGllbnQuaXNfdmlydHVhbCA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIGlzQ3J5cHRvY3VycmVuY3koY2xpZW50LmN1cnJlbmN5KSAmJlxuICAgICAgICAgICAgdGhpcy5maWx0ZXJlZF9vbnJhbXBfcHJvdmlkZXJzLmxlbmd0aCA+IDBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgZmlsdGVyZWRfb25yYW1wX3Byb3ZpZGVycygpIHtcbiAgICAgICAgY29uc3QgeyBjbGllbnQgfSA9IHRoaXMucm9vdF9zdG9yZTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5vbnJhbXBfcHJvdmlkZXJzXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHByb3ZpZGVyIHN1cHBvcnRzIHRoaXMgdXNlcidzIGFjY291bnQgY3VycmVuY3kuXG4gICAgICAgICAgICAgICAgLmZpbHRlcihwcm92aWRlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvX2N1cnJlbmNpZXMgPSBwcm92aWRlci5nZXRUb0N1cnJlbmNpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvX2N1cnJlbmNpZXMuaW5jbHVkZXMoJyonKSB8fCB0b19jdXJyZW5jaWVzLmluY2x1ZGVzKGNsaWVudC5jdXJyZW5jeS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBwcm92aWRlciBzdXBwb3J0cyB0aGlzIHVzZXIncyByZXNpZGVuY3kuXG4gICAgICAgICAgICAgICAgLmZpbHRlcihwcm92aWRlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWRfcmVzaWRlbmNpZXMgPSBwcm92aWRlci5nZXRBbGxvd2VkUmVzaWRlbmNpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWRfcmVzaWRlbmNpZXMuaW5jbHVkZXMoJyonKSB8fCBhbGxvd2VkX3Jlc2lkZW5jaWVzLmluY2x1ZGVzKGNsaWVudC5yZXNpZGVuY2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IG9ucmFtcF9wb3B1cF9tb2RhbF90aXRsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkX3Nob3dfd2lkZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxpemUoJ1BheW1lbnQgY2hhbm5lbCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRfcHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZF9zaG93X2RpYWxvZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGl6ZSgnT3VyIHNlcnZlciBjYW5ub3QgcmV0cmlldmUgYW4gYWRkcmVzcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnICc7IC8vIEVtcHR5IHN0cmluZyB0byByZW5kZXIgaGVhZGVyICsgY2xvc2UgaWNvbi5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBzaG91bGRfc2hvd19kaWFsb2coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaV9lcnJvcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25Nb3VudE9ucmFtcCgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlVGhpcmRQYXJ0eUpzUmVhY3Rpb24gPSByZWFjdGlvbihcbiAgICAgICAgICAgICgpID0+IHRoaXMuc2VsZWN0ZWRfcHJvdmlkZXIsXG4gICAgICAgICAgICBhc3luYyBwcm92aWRlciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gcHJvdmlkZXIuZ2V0U2NyaXB0RGVwZW5kZW5jaWVzKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVuY2llcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGVmYXVsdDogbG9hZGpzIH0gPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogXCJsb2FkanNcIiAqLyAnbG9hZGpzJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0X25hbWUgPSBgJHtnZXRLZWJhYkNhc2UocHJvdmlkZXIubmFtZSl9LW9ucmFtcGA7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWxvYWRqcy5pc0RlZmluZWQoc2NyaXB0X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRqcyhkZXBlbmRlbmNpZXMsIHNjcmlwdF9uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBEZXBlbmRlbmNpZXMgZm9yIG9ucmFtcCBwcm92aWRlciAke3Byb3ZpZGVyLm5hbWV9IGNvdWxkIG5vdCBiZSBsb2FkZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFByb3ZpZGVyKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFdoZW4gXCJzaG91bGRfc2hvd193aWRnZXRcIiwgYXR0ZW1wdCB0byBmZXRjaCBcInNlbGVjdGVkX3Byb3ZpZGVyXCIncyBcIndpZGdldF9odG1sXCIuXG4gICAgICAgIHRoaXMuZGlzcG9zZUdldFdpZGdldEh0bWxSZWFjdGlvbiA9IHJlYWN0aW9uKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5zaG91bGRfc2hvd193aWRnZXQsXG4gICAgICAgICAgICBzaG91bGRfc2hvd193aWRnZXQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRfc2hvd193aWRnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc1JlcXVlc3RpbmdXaWRnZXRIdG1sKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3Byb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0V2lkZ2V0SHRtbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbih3aWRnZXRfaHRtbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZGdldF9odG1sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZ3VsYXIgcHJvdmlkZXJzIChpZnJhbWUvSlMgZW1iZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0V2lkZ2V0SHRtbCh3aWRnZXRfaHRtbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW4gZW1wdHkgcmVzb2x2ZSAod2lkZ2V0X2h0bWwpIGlkZW50aWZpZXMgYSByZWRpcmVjdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTaG91bGRTaG93V2lkZ2V0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFdpZGdldEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluYWxseSgoKSA9PiB0aGlzLnNldElzUmVxdWVzdGluZ1dpZGdldEh0bWwoZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uVW5tb3VudE9ucmFtcCgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmRpc3Bvc2VUaGlyZFBhcnR5SnNSZWFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlVGhpcmRQYXJ0eUpzUmVhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZGlzcG9zZUdldFdpZGdldEh0bWxSZWFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlR2V0V2lkZ2V0SHRtbFJlYWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25DbGlja0NvcHlEZXBvc2l0QWRkcmVzcygpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy5kZXBvc2l0X2FkZHJlc3NfcmVmKTtcblxuICAgICAgICBjb25zdCBzZWxlY3Rpb25zID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICBzZWxlY3Rpb25zLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb25zLmFkZFJhbmdlKHJhbmdlKTtcblxuICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0aGlzLmRlcG9zaXRfYWRkcmVzcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldElzRGVwb3NpdEFkZHJlc3NQb3BvdmVyT3Blbih0cnVlKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRJc0RlcG9zaXRBZGRyZXNzUG9wb3Zlck9wZW4oZmFsc2UpLCA1MDApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgb25DbGlja0Rpc2NsYWltZXJDb250aW51ZSgpIHtcbiAgICAgICAgdGhpcy5zZXRTaG91bGRTaG93V2lkZ2V0KHRydWUpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvbkNsaWNrR29Ub0RlcG9zaXRQYWdlKCkge1xuICAgICAgICB0aGlzLnBvbGxBcGlGb3JEZXBvc2l0QWRkcmVzcyhmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5vcGVuKHdlYnNpdGVVcmwoKSArIHJvdXRlcy5jYXNoaWVyX2RlcG9zaXQuc3Vic3RyaW5nKDEpKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcG9sbEFwaUZvckRlcG9zaXRBZGRyZXNzKHNob3VsZF9hbGxvd19lbXB0eV9hZGRyZXNzKSB7XG4gICAgICAgIC8vIHNob3VsZF9hbGxvd19lbXB0eV9hZGRyZXNzOiBBUEkgcmV0dXJucyBlbXB0eSBkZXBvc2l0IGFkZHJlc3MgZm9yIGxlZ2FjeSBhY2NvdW50c1xuICAgICAgICAvLyB0aGF0IGhhdmUgbmV2ZXIgZ2VuZXJhdGVkIGEgZGVwb3NpdCBhZGRyZXNzLiBTZXR0aW5nIHRoaXMgdG8gXCJ0cnVlXCIgd2lsbCBhbGxvd1xuICAgICAgICAvLyB0aGUgdXNlciB0byBiZSByZWRpcmVjdGVkIHRvIHRoZSBEZXBvc2l0IHBhZ2UgKHdoZXJlIGFuIGFkZHJlc3Mgd2lsbCBiZSBnZW5lcmF0ZWQpLlxuICAgICAgICAvLyBTZXR0aW5nIHRoaXMgdG8gXCJmYWxzZVwiIHdpbGwgc3RhcnQgcG9sbGluZyB0aGUgQVBJIGZvciB0aGlzIGRlcG9zaXQgYWRkcmVzcy5cblxuICAgICAgICB0aGlzLnNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nKHRydWUpO1xuICAgICAgICB0aGlzLnNldEFwaUVycm9yKG51bGwpO1xuXG4gICAgICAgIGNvbnN0IGRlcG9zaXRfYWRkcmVzc19pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IGdldERlcG9zaXRBZGRyZXNzRnJvbUFwaSwgMzAwMCk7XG4gICAgICAgIGNvbnN0IGdldERlcG9zaXRBZGRyZXNzRnJvbUFwaSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5tb2R1bGVzLmNhc2hpZXIuV1MuYXV0aG9yaXplZFxuICAgICAgICAgICAgICAgIC5jYXNoaWVyKCdkZXBvc2l0JywgeyBwcm92aWRlcjogJ2NyeXB0bycsIHR5cGU6ICdhcGknIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hvdWxkX2NsZWFyX2ludGVydmFsID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFwaUVycm9yKHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9jbGVhcl9pbnRlcnZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGFkZHJlc3MgfSA9IHJlc3BvbnNlLmNhc2hpZXIuZGVwb3NpdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHJlc3MgfHwgc2hvdWxkX2FsbG93X2VtcHR5X2FkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERlcG9zaXRBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9jbGVhcl9pbnRlcnZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkX2NsZWFyX2ludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGRlcG9zaXRfYWRkcmVzc19pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdldERlcG9zaXRBZGRyZXNzRnJvbUFwaSgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZGVwb3NpdF9hZGRyZXNzX2ludGVydmFsKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICB9LCAzMDAwMCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2V0UG9wdXAoKSB7XG4gICAgICAgIHRoaXMuc2V0QXBpRXJyb3IobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0RGVwb3NpdEFkZHJlc3MobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0RGVwb3NpdEFkZHJlc3NSZWYobnVsbCk7XG4gICAgICAgIHRoaXMuc2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRQcm92aWRlcihudWxsKTtcbiAgICAgICAgdGhpcy5zZXRTaG91bGRTaG93V2lkZ2V0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRXaWRnZXRFcnJvcihudWxsKTtcbiAgICAgICAgdGhpcy5zZXRXaWRnZXRIdG1sKG51bGwpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBcGlFcnJvcihhcGlfZXJyb3IpIHtcbiAgICAgICAgdGhpcy5hcGlfZXJyb3IgPSBhcGlfZXJyb3I7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvcHlJY29uUmVmKHJlZikge1xuICAgICAgICB0aGlzLmNvcHlfaWNvbl9yZWYgPSByZWY7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldERlcG9zaXRBZGRyZXNzKGRlcG9zaXRfYWRkcmVzcykge1xuICAgICAgICB0aGlzLmRlcG9zaXRfYWRkcmVzcyA9IGRlcG9zaXRfYWRkcmVzcztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0RGVwb3NpdEFkZHJlc3NSZWYocmVmKSB7XG4gICAgICAgIHRoaXMuZGVwb3NpdF9hZGRyZXNzX3JlZiA9IHJlZjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNEZXBvc2l0QWRkcmVzc0xvYWRpbmcoaXNfbG9hZGluZykge1xuICAgICAgICB0aGlzLmlzX2RlcG9zaXRfYWRkcmVzc19sb2FkaW5nID0gaXNfbG9hZGluZztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNEZXBvc2l0QWRkcmVzc1BvcG92ZXJPcGVuKGlzX29wZW4pIHtcbiAgICAgICAgdGhpcy5pc19kZXBvc2l0X2FkZHJlc3NfcG9wb3Zlcl9vcGVuID0gaXNfb3BlbjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNPblJhbXBNb2RhbE9wZW4oaXNfb3Blbikge1xuICAgICAgICB0aGlzLmlzX29ucmFtcF9tb2RhbF9vcGVuID0gaXNfb3BlbjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNSZXF1ZXN0aW5nV2lkZ2V0SHRtbChpc19yZXF1ZXN0aW5nX3dpZGdldF9odG1sKSB7XG4gICAgICAgIHRoaXMuaXNfcmVxdWVzdGluZ193aWRnZXRfaHRtbCA9IGlzX3JlcXVlc3Rpbmdfd2lkZ2V0X2h0bWw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlbGVjdGVkUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICAgICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICAgICAgICB0aGlzLnNldElzT25SYW1wTW9kYWxPcGVuKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5wb2xsQXBpRm9yRGVwb3NpdEFkZHJlc3ModHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldElzT25SYW1wTW9kYWxPcGVuKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfcHJvdmlkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNob3VsZFNob3dXaWRnZXQoc2hvdWxkX3Nob3cpIHtcbiAgICAgICAgdGhpcy5zaG91bGRfc2hvd193aWRnZXQgPSBzaG91bGRfc2hvdztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0T25yYW1wUHJvdmlkZXJzKG9ucmFtcF9wcm92aWRlcnMpIHtcbiAgICAgICAgdGhpcy5vbnJhbXBfcHJvdmlkZXJzID0gb25yYW1wX3Byb3ZpZGVycy5zbGljZSgpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRXaWRnZXRFcnJvcih3aWRnZXRfZXJyb3IpIHtcbiAgICAgICAgdGhpcy53aWRnZXRfZXJyb3IgPSB3aWRnZXRfZXJyb3I7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFdpZGdldEh0bWwod2lkZ2V0X2h0bWwpIHtcbiAgICAgICAgdGhpcy53aWRnZXRfaHRtbCA9IHdpZGdldF9odG1sO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGFjdGlvbiwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgaXNDcnlwdG9jdXJyZW5jeSB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2FjdGlvbkhpc3RvcnlTdG9yZSB7XG4gICAgY29uc3RydWN0b3IoeyBXUywgcm9vdF9zdG9yZSB9KSB7XG4gICAgICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XG4gICAgICAgIHRoaXMuV1MgPSBXUztcbiAgICB9XG4gICAgQG9ic2VydmFibGUgY3J5cHRvX3RyYW5zYWN0aW9ucyA9IFtdO1xuICAgIEBvYnNlcnZhYmxlIGlzX2NyeXB0b190cmFuc2FjdGlvbnNfY2FuY2VsX21vZGFsX3Zpc2libGUgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19jcnlwdG9fdHJhbnNhY3Rpb25zX3N0YXR1c19tb2RhbF92aXNpYmxlID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfY3J5cHRvX3RyYW5zYWN0aW9uc192aXNpYmxlID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfbG9hZGluZyA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIHNlbGVjdGVkX2NyeXB0b190cmFuc2FjdGlvbl9pZCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIHNlbGVjdGVkX2NyeXB0b19zdGF0dXMgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBzZWxlY3RlZF9jcnlwdG9fc3RhdHVzX2Rlc2NyaXB0aW9uID0gJyc7XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgdXBkYXRlQ3J5cHRvVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9ucykge1xuICAgICAgICB0cmFuc2FjdGlvbnMuZm9yRWFjaCh0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY3J5cHRvX3RyYW5zYWN0aW9ucy5maW5kSW5kZXgoY3J5cHRvID0+IGNyeXB0by5pZCA9PT0gdHJhbnNhY3Rpb24uaWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3J5cHRvX3RyYW5zYWN0aW9ucy5wdXNoKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNyeXB0b190cmFuc2FjdGlvbnNbaW5kZXhdLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNvcnRDcnlwdG9UcmFuc2FjdGlvbnMoKTtcbiAgICB9XG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENyeXB0b1RyYW5zYWN0aW9uc0hpc3RvcnkodHJhbnNhY3Rpb25zKSB7XG4gICAgICAgIHRoaXMuY3J5cHRvX3RyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9ucztcbiAgICAgICAgdGhpcy5zb3J0Q3J5cHRvVHJhbnNhY3Rpb25zKCk7XG4gICAgfVxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzb3J0Q3J5cHRvVHJhbnNhY3Rpb25zKCkge1xuICAgICAgICB0aGlzLmNyeXB0b190cmFuc2FjdGlvbnMgPSB0aGlzLmNyeXB0b190cmFuc2FjdGlvbnMuc29ydCgoYSwgYikgPT4gYi5zdWJtaXRfZGF0ZSAtIGEuc3VibWl0X2RhdGUpO1xuICAgIH1cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgZ2V0Q3J5cHRvVHJhbnNhY3Rpb25zKCkge1xuICAgICAgICBhd2FpdCB0aGlzLldTLnN1YnNjcmliZUNhc2hpZXJQYXltZW50cyhyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjcnlwdG8gfSA9IHJlc3BvbnNlLmNhc2hpZXJfcGF5bWVudHM7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDcnlwdG9UcmFuc2FjdGlvbnMoY3J5cHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50KCkge1xuICAgICAgICBjb25zdCB7IGN1cnJlbmN5LCBzd2l0Y2hlZCB9ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudDtcbiAgICAgICAgY29uc3QgaXNfY3J5cHRvID0gISFjdXJyZW5jeSAmJiBpc0NyeXB0b2N1cnJlbmN5KGN1cnJlbmN5KTtcblxuICAgICAgICBpZiAoaXNfY3J5cHRvICYmICFzd2l0Y2hlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy51bnN1YnNjcmliZUNyeXB0b1RyYW5zYWN0aW9ucygpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRDcnlwdG9UcmFuc2FjdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgdW5zdWJzY3JpYmVDcnlwdG9UcmFuc2FjdGlvbnMoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5jYXNoaWVyUGF5bWVudHMoeyBwcm92aWRlcjogJ2NyeXB0bycsIHRyYW5zYWN0aW9uX3R5cGU6ICdhbGwnIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY3J5cHRvIH0gPSByZXNwb25zZS5jYXNoaWVyX3BheW1lbnRzO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3J5cHRvVHJhbnNhY3Rpb25zSGlzdG9yeShjcnlwdG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgY2FuY2VsQ3J5cHRvVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25faWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5XUy5jYW5jZWxDcnlwdG9UcmFuc2FjdGlvbih0cmFuc2FjdGlvbl9pZCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQoJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNlbGVjdGVkQ3J5cHRvVHJhbnNhY3Rpb25JZChpZCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NyeXB0b190cmFuc2FjdGlvbl9pZCA9IGlkO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc0NyeXB0b1RyYW5zYWN0aW9uc0NhbmNlbE1vZGFsVmlzaWJsZShpc192aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuaXNfY3J5cHRvX3RyYW5zYWN0aW9uc19jYW5jZWxfbW9kYWxfdmlzaWJsZSA9IGlzX3Zpc2libGU7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNob3dDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbChpZCkge1xuICAgICAgICB0aGlzLnNldFNlbGVjdGVkQ3J5cHRvVHJhbnNhY3Rpb25JZChpZCk7XG4gICAgICAgIHRoaXMuc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbFZpc2libGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGhpZGVDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbCgpIHtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZENyeXB0b1RyYW5zYWN0aW9uSWQoJycpO1xuICAgICAgICB0aGlzLnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zQ2FuY2VsTW9kYWxWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY3J5cHRvX3N0YXR1cyA9IHN0YXR1cztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXNEZXNjcmlwdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NyeXB0b19zdGF0dXNfZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbFZpc2libGUoaXNfdmlzaWJsZSkge1xuICAgICAgICB0aGlzLmlzX2NyeXB0b190cmFuc2FjdGlvbnNfc3RhdHVzX21vZGFsX3Zpc2libGUgPSBpc192aXNpYmxlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzaG93Q3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWwoZGVzY3JpcHRpb24sIG5hbWUpIHtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZENyeXB0b1N0YXR1c0Rlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZENyeXB0b1N0YXR1cyhuYW1lKTtcbiAgICAgICAgdGhpcy5zZXRJc0NyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsVmlzaWJsZSh0cnVlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgaGlkZUNyeXB0b1RyYW5zYWN0aW9uc1N0YXR1c01vZGFsKCkge1xuICAgICAgICB0aGlzLnNldElzQ3J5cHRvVHJhbnNhY3Rpb25zU3RhdHVzTW9kYWxWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0TG9hZGluZyhpc19sb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNfbG9hZGluZyA9IGlzX2xvYWRpbmc7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzQ3J5cHRvVHJhbnNhY3Rpb25zVmlzaWJsZShpc192aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuaXNfY3J5cHRvX3RyYW5zYWN0aW9uc192aXNpYmxlID0gaXNfdmlzaWJsZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBvYnNlcnZhYmxlLCBhY3Rpb24gfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IGlzQ3J5cHRvY3VycmVuY3kgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudFByb21wdERpYWxvZ1N0b3JlIHtcbiAgICBjb25zdHJ1Y3Rvcihyb290X3N0b3JlKSB7XG4gICAgICAgIHRoaXMucm9vdF9zdG9yZSA9IHJvb3Rfc3RvcmU7XG4gICAgfVxuXG4gICAgQG9ic2VydmFibGUgc2hvdWxkX3Nob3cgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19jb25maXJtZWQgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBsYXN0X2xvY2F0aW9uID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSBjdXJyZW50X2xvY2F0aW9uID0gbnVsbDtcblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzaG91bGROYXZpZ2F0ZUFmdGVyUHJvbXB0KG5leHRfbG9jYXRpb24sIGN1cnJlbnRfbG9jYXRpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzX2NvbmZpcm1lZCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0X2xvY2F0aW9uID0gbmV4dF9sb2NhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkX3Nob3cgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2xvY2F0aW9uID0gY3VycmVudF9sb2NhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNldExhc3RMb2NhdGlvbigpIHtcbiAgICAgICAgdGhpcy5sYXN0X2xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVzZXRJc0NvbmZpcm1lZCgpIHtcbiAgICAgICAgdGhpcy5pc19jb25maXJtZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Db25maXJtKCkge1xuICAgICAgICB0aGlzLnNob3VsZF9zaG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfY29uZmlybWVkID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBoYXNfZmlhdF9hY2NvdW50ID0gdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllci5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0LnNvbWUoXG4gICAgICAgICAgICB4ID0+ICF4LmlzX2NyeXB0b1xuICAgICAgICApO1xuICAgICAgICBpZiAoaXNDcnlwdG9jdXJyZW5jeSh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50Py5jdXJyZW5jeSkgJiYgaGFzX2ZpYXRfYWNjb3VudCkgYXdhaXQgdGhpcy5kb1N3aXRjaCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGRvU3dpdGNoKCkge1xuICAgICAgICBjb25zdCBub25fY3J5cHRvX2FjY291bnRzID0gdGhpcy5yb290X3N0b3JlLm1vZHVsZXMuY2FzaGllci5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0LmZpbHRlcihcbiAgICAgICAgICAgIHggPT4gIXguaXNfY3J5cHRvXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGxvZ2luaWQgPSBub25fY3J5cHRvX2FjY291bnRzLm1hcCh4ID0+IHgudmFsdWUpWzBdO1xuICAgICAgICBhd2FpdCB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnN3aXRjaEFjY291bnQobG9naW5pZCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9sb2NhdGlvbiA9PT0gJ2RlcG9zaXQnKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUubW9kdWxlcy5jYXNoaWVyLnNldElzRGVwb3NpdCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvbkNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5zaG91bGRfc2hvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBjb250aW51ZVJvdXRlKCkge1xuICAgICAgICBpZiAodGhpcy5pc19jb25maXJtZWQgJiYgdGhpcy5sYXN0X2xvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8odGhpcy5sYXN0X2xvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IG9ic2VydmFibGUsIGFjdGlvbiB9IGZyb20gJ21vYngnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcnJvckRpYWxvZ1N0b3JlIHtcbiAgICBAb2JzZXJ2YWJsZSBlcnJvcl9tZXNzYWdlID0gJyc7XG4gICAgQG9ic2VydmFibGUgc2hvdWxkX3Nob3cgPSBmYWxzZTtcblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRTaG91bGRTaG93KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkX3Nob3cgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0RXJyb3JNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5lcnJvcl9tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5zZXRTaG91bGRTaG93KHRydWUpO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgSWNvbiwgQ291bnRlciB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcblxuY29uc3QgQ2FzaGllck5vdGlmaWNhdGlvbnMgPSAoeyBwMnBfbm90aWZpY2F0aW9uX2NvdW50IH0pID0+IChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxJY29uIGljb249J0ljQ2FzaGllcicgY2xhc3NOYW1lPSdoZWFkZXJfX2ljb24nIC8+XG4gICAgICAgIHshIXAycF9ub3RpZmljYXRpb25fY291bnQgJiYgPENvdW50ZXIgY2xhc3NOYW1lPSdjYXNoaWVyX19jb3VudGVyJyBjb3VudD17cDJwX25vdGlmaWNhdGlvbl9jb3VudH0gLz59XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbik7XG5cbkNhc2hpZXJOb3RpZmljYXRpb25zLnByb3BUeXBlcyA9IHtcbiAgICBwMnBfbm90aWZpY2F0aW9uX2NvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FzaGllck5vdGlmaWNhdGlvbnM7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGFjdGlvbiwgY29tcHV0ZWQsIG9ic2VydmFibGUsIHRvSlMsIHJlYWN0aW9uLCB3aGVuIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQge1xuICAgIGZvcm1hdE1vbmV5LFxuICAgIGlzRW1wdHlPYmplY3QsXG4gICAgaXNDcnlwdG9jdXJyZW5jeSxcbiAgICBnZXRDdXJyZW5jaWVzLFxuICAgIGdldEN1cnJlbmN5RGlzcGxheUNvZGUsXG4gICAgZ2V0RGVjaW1hbFBsYWNlcyxcbiAgICBnZXRNaW5XaXRoZHJhd2FsLFxuICAgIGdldENGREFjY291bnREaXNwbGF5LFxuICAgIGdldENGREFjY291bnQsXG4gICAgZ2V0UHJvcGVydHlWYWx1ZSxcbiAgICByb3V0ZXMsXG4gICAgdmFsaWROdW1iZXIsXG4gICAgQ0ZEX1BMQVRGT1JNUyxcbn0gZnJvbSAnQGRlcml2L3NoYXJlZCc7XG5pbXBvcnQgeyBsb2NhbGl6ZSwgTG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcbmltcG9ydCBPblJhbXBTdG9yZSBmcm9tICcuL29uLXJhbXAtc3RvcmUnO1xuaW1wb3J0IFRyYW5zYWN0aW9uSGlzdG9yeVN0b3JlIGZyb20gJy4vdHJhbnNhY3Rpb24taGlzdG9yeS1zdG9yZSc7XG5pbXBvcnQgQWNjb3VudFByb21wdERpYWxvZyBmcm9tICcuLi9hY2NvdW50LXByb21wdC1kaWFsb2ctc3RvcmUnO1xuaW1wb3J0IEVycm9yRGlhbG9nIGZyb20gJy4uL2Vycm9yLWRpYWxvZy1zdG9yZSc7XG5pbXBvcnQgQmFzZVN0b3JlIGZyb20gJy4uL2Jhc2Utc3RvcmUnO1xuaW1wb3J0IENhc2hpZXJOb3RpZmljYXRpb25zIGZyb20gJy4uLy4uL0NvbnRhaW5lcnMvY2FzaGllci1ub3RpZmljYXRpb25zLmpzeCc7XG5cbmNvbnN0IGhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQgPSBsb2dpbmlkID0+IGxvZ2luaWQuc3RhcnRzV2l0aCgnTVgnKTtcblxuY29uc3QgZ2V0U2VsZWN0ZWRFcnJvciA9IChzZWxlY3RlZF92YWx1ZSwgaXNfZnJvbV9hY2NvdW50KSA9PiB7XG4gICAgaWYgKGlzX2Zyb21fYWNjb3VudCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPExvY2FsaXplXG4gICAgICAgICAgICAgICAgaTE4bl9kZWZhdWx0X3RleHQ9J1RyYW5zZmVyIGZyb20ge3tzZWxlY3RlZF92YWx1ZX19IGlzIG5vdCBhbGxvd2VkLCBQbGVhc2UgY2hvb3NlIGFub3RoZXIgYWNjb3VudCBmcm9tIGRyb3Bkb3duJ1xuICAgICAgICAgICAgICAgIHZhbHVlcz17eyBzZWxlY3RlZF92YWx1ZSB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8TG9jYWxpemVcbiAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0PSdUcmFuc2ZlciB0byB7e3NlbGVjdGVkX3ZhbHVlfX0gaXMgbm90IGFsbG93ZWQsIFBsZWFzZSBjaG9vc2UgYW5vdGhlciBhY2NvdW50IGZyb20gZHJvcGRvd24nXG4gICAgICAgICAgICB2YWx1ZXM9e3sgc2VsZWN0ZWRfdmFsdWUgfX1cbiAgICAgICAgLz5cbiAgICApO1xufTtcblxuY2xhc3MgQ29uZmlnIHtcbiAgICBjb250YWluZXIgPSAnJztcbiAgICBpc19zZXNzaW9uX3RpbWVvdXQgPSB0cnVlO1xuICAgIG9uSWZyYW1lTG9hZGVkID0gJyc7XG4gICAgdGltZW91dF9zZXNzaW9uID0gJyc7XG5cbiAgICBAb2JzZXJ2YWJsZSBpZnJhbWVfaGVpZ2h0ID0gMDtcbiAgICBAb2JzZXJ2YWJsZSBpZnJhbWVfdXJsID0gJyc7XG5cbiAgICBjb25zdHJ1Y3Rvcih7IGNvbnRhaW5lciB9KSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH1cbn1cblxuY2xhc3MgQ29uZmlnRXJyb3Ige1xuICAgIEBvYnNlcnZhYmxlIG1lc3NhZ2UgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBjb2RlID0gJyc7XG4gICAgQG9ic2VydmFibGUgZmllbGRzID0gJyc7XG4gICAgQG9ic2VydmFibGUgaXNfc2hvd19mdWxsX3BhZ2UgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBvbkNsaWNrQnV0dG9uID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSBpc19hc2tfdWtfZnVuZHNfcHJvdGVjdGlvbiA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX3NlbGZfZXhjbHVzaW9uX21heF90dXJub3Zlcl9zZXQgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19hc2tfYXV0aGVudGljYXRpb24gPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWwgPSBmYWxzZTtcbn1cblxuY2xhc3MgQ29uZmlnUGF5bWVudEFnZW50IHtcbiAgICBsaXN0ID0gW107XG5cbiAgICBAb2JzZXJ2YWJsZSBhZ2VudHMgPSBbXTtcbiAgICBAb2JzZXJ2YWJsZSBjb250YWluZXIgPSAncGF5bWVudF9hZ2VudCc7XG4gICAgQG9ic2VydmFibGUgZXJyb3IgPSBuZXcgQ29uZmlnRXJyb3IoKTtcbiAgICBAb2JzZXJ2YWJsZSBmaWx0ZXJlZF9saXN0ID0gW107XG4gICAgQG9ic2VydmFibGUgaXNfbmFtZV9zZWxlY3RlZCA9IHRydWU7XG4gICAgQG9ic2VydmFibGUgaXNfd2l0aGRyYXcgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX3dpdGhkcmF3X3N1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBjb25maXJtID0ge307XG4gICAgQG9ic2VydmFibGUgcmVjZWlwdCA9IHt9O1xuICAgIEBvYnNlcnZhYmxlIHNlbGVjdGVkX2JhbmsgPSAwO1xuICAgIEBvYnNlcnZhYmxlIHN1cHBvcnRlZF9iYW5rcyA9IFtdO1xuICAgIEBvYnNlcnZhYmxlIHZlcmlmaWNhdGlvbiA9IG5ldyBDb25maWdWZXJpZmljYXRpb24oKTtcbiAgICBAb2JzZXJ2YWJsZSBhY3RpdmVfdGFiX2luZGV4ID0gMDtcblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBY3RpdmVUYWJJbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLmFjdGl2ZV90YWJfaW5kZXggPSBpbmRleDtcbiAgICB9XG59XG5cbmNsYXNzIENvbmZpZ1BheW1lbnRBZ2VudFRyYW5zZmVyIHtcbiAgICBAb2JzZXJ2YWJsZSBjb250YWluZXIgPSAncGF5bWVudF9hZ2VudF90cmFuc2Zlcic7XG4gICAgQG9ic2VydmFibGUgZXJyb3IgPSBuZXcgQ29uZmlnRXJyb3IoKTtcbiAgICBAb2JzZXJ2YWJsZSBpc19wYXltZW50X2FnZW50ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfdHJ5X3RyYW5zZmVyX3N1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc190cmFuc2Zlcl9zdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgY29uZmlybSA9IHt9O1xuICAgIEBvYnNlcnZhYmxlIHJlY2VpcHQgPSB7fTtcbiAgICBAb2JzZXJ2YWJsZSB0cmFuc2Zlcl9saW1pdCA9IHt9O1xufVxuXG5jbGFzcyBDb25maWdBY2NvdW50VHJhbnNmZXIge1xuICAgIEBvYnNlcnZhYmxlIGFjY291bnRzX2xpc3QgPSBbXTtcbiAgICBAb2JzZXJ2YWJsZSBjb250YWluZXIgPSAnYWNjb3VudF90cmFuc2Zlcic7XG4gICAgQG9ic2VydmFibGUgZXJyb3IgPSBuZXcgQ29uZmlnRXJyb3IoKTtcbiAgICBAb2JzZXJ2YWJsZSBoYXNfbm9fYWNjb3VudCA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGhhc19ub19hY2NvdW50c19iYWxhbmNlID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfdHJhbnNmZXJfY29uZmlybSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIG1pbmltdW1fZmVlID0gbnVsbDtcbiAgICBAb2JzZXJ2YWJsZSByZWNlaXB0ID0ge307XG4gICAgQG9ic2VydmFibGUgc2VsZWN0ZWRfZnJvbSA9IHt9O1xuICAgIEBvYnNlcnZhYmxlIHNlbGVjdGVkX3RvID0ge307XG4gICAgQG9ic2VydmFibGUgYWNjb3VudF90cmFuc2Zlcl9hbW91bnQgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSB0cmFuc2Zlcl9mZWUgPSBudWxsO1xuICAgIEBvYnNlcnZhYmxlIHRyYW5zZmVyX2xpbWl0ID0ge307XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QmFsYW5jZUJ5TG9naW5JZChsb2dpbmlkLCBiYWxhbmNlKSB7XG4gICAgICAgIHRoaXMuYWNjb3VudHNfbGlzdC5maW5kKGFjYyA9PiBsb2dpbmlkID09PSBhY2MudmFsdWUpLmJhbGFuY2UgPSBiYWxhbmNlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRCYWxhbmNlU2VsZWN0ZWRGcm9tKGJhbGFuY2UpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9mcm9tLmJhbGFuY2UgPSBiYWxhbmNlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRCYWxhbmNlU2VsZWN0ZWRUbyhiYWxhbmNlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfdG8uYmFsYW5jZSA9IGJhbGFuY2U7XG4gICAgfVxufVxuXG5jbGFzcyBDb25maWdXaXRoZHJhdyB7XG4gICAgQG9ic2VydmFibGUgY29udGFpbmVyID0gJ3dpdGhkcmF3JztcbiAgICBAb2JzZXJ2YWJsZSBpZnJhbWVfaGVpZ2h0ID0gMDtcbiAgICBAb2JzZXJ2YWJsZSBpZnJhbWVfdXJsID0gJyc7XG4gICAgQG9ic2VydmFibGUgZXJyb3IgPSBuZXcgQ29uZmlnRXJyb3IoKTtcbiAgICBAb2JzZXJ2YWJsZSB2ZXJpZmljYXRpb24gPSBuZXcgQ29uZmlnVmVyaWZpY2F0aW9uKCk7XG5cbiAgICBpc19zZXNzaW9uX3RpbWVvdXQgPSB0cnVlO1xuICAgIG9uSWZyYW1lTG9hZGVkID0gJyc7XG4gICAgdGltZW91dF9zZXNzaW9uID0gJyc7XG59XG5cbmNsYXNzIENvbmZpZ1ZlcmlmaWNhdGlvbiB7XG4gICAgaXNfYnV0dG9uX2NsaWNrZWQgPSBmYWxzZTtcbiAgICB0aW1lb3V0X2J1dHRvbiA9ICcnO1xuXG4gICAgQG9ic2VydmFibGUgZXJyb3IgPSBuZXcgQ29uZmlnRXJyb3IoKTtcbiAgICBAb2JzZXJ2YWJsZSBpc19lbWFpbF9zZW50ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgaXNfcmVzZW5kX2NsaWNrZWQgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSByZXNlbmRfdGltZW91dCA9IDYwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXNoaWVyU3RvcmUgZXh0ZW5kcyBCYXNlU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKHsgcm9vdF9zdG9yZSwgV1MgfSkge1xuICAgICAgICBzdXBlcih7IHJvb3Rfc3RvcmUgfSk7XG4gICAgICAgIHRoaXMuV1MgPSBXUztcblxuICAgICAgICB3aGVuKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW4sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hDYXNoaWVyVG9NZW51KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmhhc19zZXRfY3VycmVuY3kpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU2V0Q3VycmVuY3lNb2RhbFRpdGxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9ucmFtcCA9IG5ldyBPblJhbXBTdG9yZSh7XG4gICAgICAgICAgICByb290X3N0b3JlOiB0aGlzLnJvb3Rfc3RvcmUsXG4gICAgICAgICAgICBXUzogdGhpcy5XUyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hY2NvdW50X3Byb21wdF9kaWFsb2cgPSBuZXcgQWNjb3VudFByb21wdERpYWxvZyh0aGlzLnJvb3Rfc3RvcmUpO1xuICAgICAgICB0aGlzLmVycm9yX2RpYWxvZyA9IG5ldyBFcnJvckRpYWxvZygpO1xuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uX2hpc3RvcnkgPSBuZXcgVHJhbnNhY3Rpb25IaXN0b3J5U3RvcmUoeyByb290X3N0b3JlOiB0aGlzLnJvb3Rfc3RvcmUsIFdTOiB0aGlzLldTIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIEBvYnNlcnZhYmxlIGlzX2xvYWRpbmcgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19wMnBfdmlzaWJsZSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIHAycF9ub3RpZmljYXRpb25fY291bnQgPSAwO1xuICAgIEBvYnNlcnZhYmxlIGNhc2hpZXJfcm91dGVfdGFiX2luZGV4ID0gMDtcbiAgICBAb2JzZXJ2YWJsZSBpc18xMGtfd2l0aGRyYXdhbF9saW1pdF9yZWFjaGVkID0gdW5kZWZpbmVkO1xuICAgIEBvYnNlcnZhYmxlIGlzX2RlcG9zaXQgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBzaG91bGRfc2hvd19hbGxfYXZhaWxhYmxlX2N1cnJlbmNpZXMgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBpc19jYXNoaWVyX2RlZmF1bHQgPSB0cnVlO1xuICAgIEBvYnNlcnZhYmxlIGRlcG9zaXRfdGFyZ2V0ID0gJyc7XG4gICAgQG9ic2VydmFibGUgY3J5cHRvX2Ftb3VudCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGZpYXRfYW1vdW50ID0gJyc7XG4gICAgQG9ic2VydmFibGUgaW5zdWZmaWNpZW50X2Z1bmRfZXJyb3IgPSAnJztcbiAgICBAb2JzZXJ2YWJsZSBhbGxfcGF5bWVudF9hZ2VudF9saXN0ID0gW107XG4gICAgQG9ic2VydmFibGUgc2hvdWxkX3NldF9jdXJyZW5jeV9tb2RhbF90aXRsZV9jaGFuZ2UgPSBmYWxzZTtcbiAgICBAb2JzZXJ2YWJsZSBwMnBfYWR2ZXJ0aXNlcl9lcnJvciA9IHVuZGVmaW5lZDtcbiAgICBAb2JzZXJ2YWJsZSBoYXNfc2V0X2N1cnJlbmN5ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgd2l0aGRyYXdfYW1vdW50ID0gJyc7XG4gICAgQG9ic2VydmFibGUgY29udmVydGVyX2Zyb21fYW1vdW50ID0gJyc7XG4gICAgQG9ic2VydmFibGUgY29udmVydGVyX3RvX2Ftb3VudCA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIGNvbnZlcnRlcl9mcm9tX2Vycm9yID0gJyc7XG4gICAgQG9ic2VydmFibGUgY29udmVydGVyX3RvX2Vycm9yID0gJyc7XG4gICAgQG9ic2VydmFibGUgaXNfdGltZXJfdmlzaWJsZSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGlzX2NyeXB0b190cmFuc2FjdGlvbnNfdmlzaWJsZSA9IGZhbHNlO1xuICAgIEBvYnNlcnZhYmxlIGJsb2NrY2hhaW5fYWRkcmVzcyA9ICcnO1xuICAgIEBvYnNlcnZhYmxlIHNob3VsZF9wZXJjZW50YWdlX3Jlc2V0ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgcGVyY2VudGFnZSA9IDA7XG4gICAgQG9ic2VydmFibGUgaXNfd2l0aGRyYXdfY29uZmlybWVkID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgc2hvd19wMnBfaW5fY2FzaGllcl9kZWZhdWx0ID0gZmFsc2U7XG4gICAgQG9ic2VydmFibGUgbWF4X3dpdGhkcmF3X2Ftb3VudCA9IDA7XG5cbiAgICBAb2JzZXJ2YWJsZSBjb25maWcgPSB7XG4gICAgICAgIGFjY291bnRfdHJhbnNmZXI6IG5ldyBDb25maWdBY2NvdW50VHJhbnNmZXIoKSxcbiAgICAgICAgZGVwb3NpdDoge1xuICAgICAgICAgICAgLi4udG9KUyhuZXcgQ29uZmlnKHsgY29udGFpbmVyOiAnZGVwb3NpdCcgfSkpLFxuICAgICAgICAgICAgZXJyb3I6IG5ldyBDb25maWdFcnJvcigpLFxuICAgICAgICB9LFxuICAgICAgICBwYXltZW50X2FnZW50OiBuZXcgQ29uZmlnUGF5bWVudEFnZW50KCksXG4gICAgICAgIHBheW1lbnRfYWdlbnRfdHJhbnNmZXI6IG5ldyBDb25maWdQYXltZW50QWdlbnRUcmFuc2ZlcigpLFxuICAgICAgICB3aXRoZHJhdzogbmV3IENvbmZpZ1dpdGhkcmF3KCksXG4gICAgfTtcblxuICAgIGFjdGl2ZV9jb250YWluZXIgPSB0aGlzLmNvbmZpZy5kZXBvc2l0LmNvbnRhaW5lcjtcbiAgICBvblJlbW91bnQgPSAoKSA9PiB7fTtcbiAgICBpc19wb3B1bGF0aW5nX3ZhbHVlcyA9IGZhbHNlO1xuXG4gICAgY29udGFpbmVycyA9IFt0aGlzLmNvbmZpZy5kZXBvc2l0LmNvbnRhaW5lciwgdGhpcy5jb25maWcud2l0aGRyYXcuY29udGFpbmVyXTtcblxuICAgIG1hcF9hY3Rpb24gPSB7XG4gICAgICAgIFt0aGlzLmNvbmZpZy53aXRoZHJhdy5jb250YWluZXJdOiAncGF5bWVudF93aXRoZHJhdycsXG4gICAgICAgIFt0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmNvbnRhaW5lcl06ICdwYXltZW50X2FnZW50X3dpdGhkcmF3JyxcbiAgICB9O1xuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX2NyeXB0bygpIHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW5jeSB9ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudDtcbiAgICAgICAgcmV0dXJuICEhY3VycmVuY3kgJiYgaXNDcnlwdG9jdXJyZW5jeShjdXJyZW5jeSk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuZmlsdGVyZWRfbGlzdC5sZW5ndGggfHwgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5hZ2VudHMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfcGF5bWVudF9hZ2VudF92aXNpYmxlX2luX29uYm9hcmRpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYWxsX3BheW1lbnRfYWdlbnRfbGlzdD8ucGF5bWVudGFnZW50X2xpc3Q/Lmxpc3Q/Lmxlbmd0aDtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfcGF5bWVudF9hZ2VudF90cmFuc2Zlcl92aXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcucGF5bWVudF9hZ2VudF90cmFuc2Zlci5pc19wYXltZW50X2FnZW50O1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc19hY2NvdW50X3RyYW5zZmVyX3Zpc2libGUoKSB7XG4gICAgICAgIC8vIGNhc2hpZXIgVHJhbnNmZXIgYWNjb3VudCB0YWIgaXMgaGlkZGVuIGZvciBpb20gY2xpZW50c1xuICAgICAgICAvLyBjaGVjayBmb3IgcmVzaWRlbmNlIHRvIGhpZGUgdGhlIHRhYiBiZWZvcmUgY3JlYXRpbmcgYSByZWFsIG1vbmV5IGFjY291bnRcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF9zdG9yZS5jbGllbnQucmVzaWRlbmNlICE9PSAnaW0nO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc19wMnBfZW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNfcDJwX3Zpc2libGUgJiYgIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfZXU7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNob3dQMnBJbkNhc2hpZXJEZWZhdWx0KCkge1xuICAgICAgICBjb25zdCBpc19wMnBfcmVzdHJpY3RlZCA9IHRoaXMucDJwX2FkdmVydGlzZXJfZXJyb3IgPT09ICdSZXN0cmljdGVkQ291bnRyeSc7XG4gICAgICAgIGNvbnN0IGhhc191c2RfY3VycmVuY3kgPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfbGlzdC5zb21lKGFjY291bnQgPT4gYWNjb3VudC50aXRsZSA9PT0gJ1VTRCcpO1xuICAgICAgICBjb25zdCBoYXNfdXNlcl9maWF0X2N1cnJlbmN5ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X2xpc3Quc29tZShcbiAgICAgICAgICAgIGFjY291bnQgPT4gIWlzQ3J5cHRvY3VycmVuY3koYWNjb3VudC50aXRsZSkgJiYgYWNjb3VudC50aXRsZSAhPT0gJ1JlYWwnXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGlzX3AycF9yZXN0cmljdGVkIHx8IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfdmlydHVhbCB8fCAoaGFzX3VzZXJfZmlhdF9jdXJyZW5jeSAmJiAhaGFzX3VzZF9jdXJyZW5jeSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd19wMnBfaW5fY2FzaGllcl9kZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3dfcDJwX2luX2Nhc2hpZXJfZGVmYXVsdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXR0YWNoQ2FzaGllclRvTWVudSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc19zZXRfY3VycmVuY3kpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzU2V0Q3VycmVuY3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucm9vdF9zdG9yZS5tZW51LmF0dGFjaCh7XG4gICAgICAgICAgICBpZDogJ2R0X2Nhc2hpZXJfdGFiJyxcbiAgICAgICAgICAgIGljb246IDxDYXNoaWVyTm90aWZpY2F0aW9ucyBwMnBfbm90aWZpY2F0aW9uX2NvdW50PXt0aGlzLnAycF9ub3RpZmljYXRpb25fY291bnR9IC8+LFxuICAgICAgICAgICAgdGV4dDogKCkgPT4gbG9jYWxpemUoJ0Nhc2hpZXInKSxcbiAgICAgICAgICAgIGxpbmtfdG86IHRoaXMuaGFzX3NldF9jdXJyZW5jeSAmJiByb3V0ZXMuY2FzaGllcixcbiAgICAgICAgICAgIG9uQ2xpY2s6ICF0aGlzLmhhc19zZXRfY3VycmVuY3kgJiYgdGhpcy5yb290X3N0b3JlLnVpLnRvZ2dsZVNldEN1cnJlbmN5TW9kYWwsXG4gICAgICAgICAgICBsb2dpbl9vbmx5OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVwbGFjZUNhc2hpZXJNZW51T25jbGljaygpIHtcbiAgICAgICAgdGhpcy5zZXRIYXNTZXRDdXJyZW5jeSgpO1xuXG4gICAgICAgIHRoaXMucm9vdF9zdG9yZS5tZW51LnVwZGF0ZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2R0X2Nhc2hpZXJfdGFiJyxcbiAgICAgICAgICAgICAgICBpY29uOiA8Q2FzaGllck5vdGlmaWNhdGlvbnMgcDJwX25vdGlmaWNhdGlvbl9jb3VudD17dGhpcy5wMnBfbm90aWZpY2F0aW9uX2NvdW50fSAvPixcbiAgICAgICAgICAgICAgICB0ZXh0OiAoKSA9PiBsb2NhbGl6ZSgnQ2FzaGllcicpLFxuICAgICAgICAgICAgICAgIGxpbmtfdG86IHRoaXMuaGFzX3NldF9jdXJyZW5jeSAmJiByb3V0ZXMuY2FzaGllcixcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAhdGhpcy5oYXNfc2V0X2N1cnJlbmN5ID8gdGhpcy5yb290X3N0b3JlLnVpLnRvZ2dsZVNldEN1cnJlbmN5TW9kYWwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsb2dpbl9vbmx5OiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SGFzU2V0Q3VycmVuY3koKSB7XG4gICAgICAgIHRoaXMuaGFzX3NldF9jdXJyZW5jeSA9XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfbGlzdFxuICAgICAgICAgICAgICAgIC5maWx0ZXIoYWNjb3VudCA9PiAhYWNjb3VudC5pc192aXJ0dWFsKVxuICAgICAgICAgICAgICAgIC5zb21lKGFjY291bnQgPT4gYWNjb3VudC50aXRsZSAhPT0gJ1JlYWwnKSB8fCAhdGhpcy5yb290X3N0b3JlLmNsaWVudC5oYXNfYWN0aXZlX3JlYWxfYWNjb3VudDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgY2hhbmdlU2V0Q3VycmVuY3lNb2RhbFRpdGxlKCkge1xuICAgICAgICB0aGlzLnNob3VsZF9zZXRfY3VycmVuY3lfbW9kYWxfdGl0bGVfY2hhbmdlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudENhc2hpZXJEZWZhdWx0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzX3NldF9jdXJyZW5jeSkge1xuICAgICAgICAgICAgdGhpcy5zZXRIYXNTZXRDdXJyZW5jeSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0SXNDYXNoaWVyRGVmYXVsdCh0cnVlKTtcbiAgICAgICAgdGhpcy5hY2NvdW50X3Byb21wdF9kaWFsb2cucmVzZXRJc0NvbmZpcm1lZCgpO1xuXG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMuYWxsX3BheW1lbnRfYWdlbnRfbGlzdD8ucGF5bWVudGFnZW50X2xpc3Q/Lmxpc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF9saXN0ID0gYXdhaXQgdGhpcy5nZXRBbGxQYXltZW50QWdlbnRMaXN0KCk7XG4gICAgICAgICAgICB0aGlzLnNldEFsbFBheW1lbnRBZ2VudExpc3QocGF5bWVudF9hZ2VudF9saXN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc1dpdGhkcmF3Q29uZmlybWVkKGlzX3dpdGhkcmF3X2NvbmZpcm1lZCkge1xuICAgICAgICB0aGlzLmlzX3dpdGhkcmF3X2NvbmZpcm1lZCA9IGlzX3dpdGhkcmF3X2NvbmZpcm1lZDtcblxuICAgICAgICBpZiAoaXNfd2l0aGRyYXdfY29uZmlybWVkKSB0aGlzLnNldFdpdGhkcmF3QW1vdW50KHRoaXMuY29udmVydGVyX2Zyb21fYW1vdW50KTtcblxuICAgICAgICBpZiAoIWlzX3dpdGhkcmF3X2NvbmZpcm1lZCAmJiB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFdpdGhkcmF3QW1vdW50KGFtb3VudCkge1xuICAgICAgICB0aGlzLndpdGhkcmF3X2Ftb3VudCA9IGFtb3VudDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgY2FsY3VsYXRlUGVyY2VudGFnZShhbW91bnQgPSB0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVfY29udGFpbmVyID09PSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gKygoYW1vdW50IC8gK3RoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5iYWxhbmNlKSAqIDEwMCkudG9GaXhlZCgwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9ICsoKGFtb3VudCAvICt0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmJhbGFuY2UpICogMTAwKS50b0ZpeGVkKDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyhzaG91bGRfcGVyY2VudGFnZV9yZXNldCkge1xuICAgICAgICB0aGlzLnNob3VsZF9wZXJjZW50YWdlX3Jlc2V0ID0gc2hvdWxkX3BlcmNlbnRhZ2VfcmVzZXQ7XG5cbiAgICAgICAgaWYgKHNob3VsZF9wZXJjZW50YWdlX3Jlc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVdpdGhkcmF3KHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgYXdhaXQgdGhpcy5XUy5jcnlwdG9XaXRoZHJhdyh7XG4gICAgICAgICAgICBhZGRyZXNzOiB0aGlzLmJsb2NrY2hhaW5fYWRkcmVzcyxcbiAgICAgICAgICAgIGFtb3VudDogK3RoaXMuY29udmVydGVyX2Zyb21fYW1vdW50LFxuICAgICAgICAgICAgdmVyaWZpY2F0aW9uX2NvZGUsXG4gICAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmICh2ZXJpZmljYXRpb25fY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhciB2ZXJpZmljYXRpb24gY29kZSBvbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRXaXRocmF3Rm9ybSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzV2l0aGRyYXdDb25maXJtZWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyByZXF1ZXN0V2l0aGRyYXcodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2xvZ2dlZF9pbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IobG9jYWxpemUoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5XUy5jcnlwdG9XaXRoZHJhdyh7XG4gICAgICAgICAgICBhZGRyZXNzOiB0aGlzLmJsb2NrY2hhaW5fYWRkcmVzcyxcbiAgICAgICAgICAgIGFtb3VudDogK3RoaXMuY29udmVydGVyX2Zyb21fYW1vdW50LFxuICAgICAgICAgICAgdmVyaWZpY2F0aW9uX2NvZGUsXG4gICAgICAgICAgICBkcnlfcnVuOiAxLFxuICAgICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JfZGlhbG9nLnNldEVycm9yTWVzc2FnZShyZXNwb25zZS5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlV2l0aGRyYXcodmVyaWZpY2F0aW9uX2NvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVzZXRXaXRocmF3Rm9ybSgpIHtcbiAgICAgICAgdGhpcy5zZXRCbG9ja2NoYWluQWRkcmVzcygnJyk7XG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUFtb3VudCgnJyk7XG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9BbW91bnQoJycpO1xuICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzRGVwb3NpdChpc19kZXBvc2l0KSB7XG4gICAgICAgIHRoaXMuaXNfZGVwb3NpdCA9IGlzX2RlcG9zaXQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFNob3VsZFNob3dBbGxBdmFpbGFibGVDdXJyZW5jaWVzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkX3Nob3dfYWxsX2F2YWlsYWJsZV9jdXJyZW5jaWVzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEJsb2NrY2hhaW5BZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5ibG9ja2NoYWluX2FkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc0Nhc2hpZXJEZWZhdWx0KGlzX2Nhc2hpZXJfZGVmYXVsdCkge1xuICAgICAgICB0aGlzLmlzX2Nhc2hpZXJfZGVmYXVsdCA9IGlzX2Nhc2hpZXJfZGVmYXVsdDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0RGVwb3NpdFRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5kZXBvc2l0X3RhcmdldCA9IHRhcmdldDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgY29udGludWVSb3V0ZSgpIHtcbiAgICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHRoaXMuZGVwb3NpdF90YXJnZXQpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBY2NvdW50U3dpdGNoTGlzdGVuZXIoKSB7XG4gICAgICAgIC8vIGNhc2hpZXIgaW5pdHMgb25jZSBhbmQgdHJpZXMgdG8gc3RheSBhY3RpdmUgdW50aWwgc3dpdGNoaW5nIGFjY291bnRcbiAgICAgICAgLy8gc2luY2UgY2FzaGllciBjYWxscyB0YWtlIGEgbG9uZyB0aW1lIHRvIHJlc3BvbmQgb3IgZGlzcGxheSBpbiBpZnJhbWVcbiAgICAgICAgLy8gc28gd2UgZG9uJ3QgaGF2ZSBhbnkgdW5tb3VudCBmdW5jdGlvbiBoZXJlIGFuZCBldmVyeXRoaW5nIGdldHMgcmVzZXQgb24gc3dpdGNoIGluc3RlYWRcbiAgICAgICAgdGhpcy5kaXNwb3NlU3dpdGNoQWNjb3VudCgpO1xuICAgICAgICB0aGlzLm9uU3dpdGNoQWNjb3VudCh0aGlzLmFjY291bnRTd2l0Y2hlckxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0QWN0aXZlVGFiSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5zZXRBY3RpdmVUYWJJbmRleChpbmRleCk7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRWZXJpZmljYXRpb25FbWFpbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGlzZSBQMlAgYXR0cmlidXRlcyBvbiBhcHAgbG9hZCB3aXRob3V0IG1vdW50aW5nIHRoZSBlbnRpcmUgY2FzaGllclxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBpbml0KCkge1xuICAgICAgICB3aGVuKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW4sXG4gICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRBZHZlcnRpemVyRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUDJwU3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVjazEwa0xpbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHdoZW4oXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmlzX3BheW1lbnRfYWdlbnRfdmlzaWJsZSxcbiAgICAgICAgICAgICgpID0+IHRoaXMuZmlsdGVyUGF5bWVudEFnZW50TGlzdCgpXG4gICAgICAgICk7XG5cbiAgICAgICAgcmVhY3Rpb24oXG4gICAgICAgICAgICAoKSA9PiBbXG4gICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zd2l0Y2hlZCxcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2xvZ2dlZF9pbixcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmN1cnJlbmN5LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB3YWl0IGZvciBjbGllbnQgc2V0dGluZ3MgdG8gYmUgcG9wdWxhdGVkIGluIGNsaWVudC1zdG9yZVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuV1Mud2FpdCgnZ2V0X3NldHRpbmdzJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290X3N0b3JlLmNsaWVudC5pc19sb2dnZWRfaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRBZHZlcnRpemVyRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2NvdW50X3Byb21wdF9kaWFsb2cucmVzZXRMYXN0TG9jYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnN3aXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUDJwU3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB3aXRoZHJhd2FsIGxpbWl0IGlzIHJlYWNoZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHllcywgdGhpcyB3aWxsIHRyaWdnZXIgdG8gc2hvdyBhIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVjazEwa0xpbWl0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmVhY3Rpb24oXG4gICAgICAgICAgICAoKSA9PiBbdGhpcy5yb290X3N0b3JlLmNsaWVudC5jdXJyZW5jeV0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJc1dpdGhkcmF3Q29uZmlybWVkKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgZ2V0QWR2ZXJ0aXplckVycm9yKCkge1xuICAgICAgICBjb25zdCBhZHZlcnRpc2VyX2luZm8gPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQucDJwQWR2ZXJ0aXNlckluZm8oKTtcbiAgICAgICAgdGhpcy5zZXRQMnBBZHZlcnRpc2VyRXJyb3IoZ2V0UHJvcGVydHlWYWx1ZShhZHZlcnRpc2VyX2luZm8sIFsnZXJyb3InLCAnY29kZSddKSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFAycEFkdmVydGlzZXJFcnJvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnAycF9hZHZlcnRpc2VyX2Vycm9yID0gdmFsdWU7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGNoZWNrUDJwU3RhdHVzKCkge1xuICAgICAgICBjb25zdCBhZHZlcnRpc2VyX2Vycm9yID0gdGhpcy5wMnBfYWR2ZXJ0aXNlcl9lcnJvcjtcbiAgICAgICAgY29uc3QgaXNfcDJwX3Jlc3RyaWN0ZWQgPSBhZHZlcnRpc2VyX2Vycm9yID09PSAnUmVzdHJpY3RlZENvdW50cnknIHx8IGFkdmVydGlzZXJfZXJyb3IgPT09ICdSZXN0cmljdGVkQ3VycmVuY3knO1xuICAgICAgICB0aGlzLnNldElzUDJwVmlzaWJsZSghKGlzX3AycF9yZXN0cmljdGVkIHx8IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfdmlydHVhbCkpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50Q29tbW9uKHNob3VsZF9yZW1vdW50KSB7XG4gICAgICAgIGlmICh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2xvZ2dlZF9pbikge1xuICAgICAgICAgICAgLy8gYXZvaWQgY2FsbGluZyB0aGlzIGFnYWluXG4gICAgICAgICAgICBpZiAodGhpcy5pc19wb3B1bGF0aW5nX3ZhbHVlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pc19wb3B1bGF0aW5nX3ZhbHVlcyA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChzaG91bGRfcmVtb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50Q29tbW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBzZWUgaWYgY2xpZW50J3MgY291bnRyeSBoYXMgUEFcbiAgICAgICAgICAgIC8vIGlmIHllcywgd2UgY2FuIHNob3cgdGhlIFBBIHRhYiBpbiBjYXNoaWVyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQubGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBheW1lbnRBZ2VudExpc3QoKS50aGVuKHRoaXMuZmlsdGVyUGF5bWVudEFnZW50TGlzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcucGF5bWVudF9hZ2VudF90cmFuc2Zlci5pc19wYXltZW50X2FnZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0lzUGF5bWVudEFnZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ydEFjY291bnRzVHJhbnNmZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLm9ucmFtcC5pc19vbnJhbXBfdGFiX3Zpc2libGUgJiYgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmVuZHNXaXRoKHJvdXRlcy5jYXNoaWVyX29ucmFtcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8ocm91dGVzLmNhc2hpZXJfZGVwb3NpdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdGhpcy5pc19jcnlwdG9fdHJhbnNhY3Rpb25zX3Zpc2libGUgJiZcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuZW5kc1dpdGgocm91dGVzLmNhc2hpZXJfY3J5cHRvX3RyYW5zYWN0aW9ucylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jb21tb24ucm91dGVUbyhyb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zYWN0aW9uX2hpc3Rvcnkuc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25faGlzdG9yeS5vbk1vdW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNWaXNpYmxlKGlzX3Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5pc19jcnlwdG9fdHJhbnNhY3Rpb25zX3Zpc2libGUgPSBpc192aXNpYmxlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDYXNoaWVyVGFiSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jYXNoaWVyX3JvdXRlX3RhYl9pbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICB3aWxsTW91bnRXaXRoZHJhdyh2ZXJpZmljYXRpb25fY29kZSkge1xuICAgICAgICBpZiAodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWZXJpZmljYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50V2l0aGRyYXcodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICBjb25zdCBzdHJSZWdFeHAgPSAvXlxcd3s4LDEyOH0kLztcbiAgICAgICAgbGV0IHJlc3BvbnNlX2Nhc2hpZXI7XG5cbiAgICAgICAgaWYgKHN0clJlZ0V4cC50ZXN0KHZlcmlmaWNhdGlvbl9jb2RlKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VfY2FzaGllciA9IGF3YWl0IHRoaXMuV1MuY3J5cHRvV2l0aGRyYXcoe1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYmxvY2tjaGFpbl9hZGRyZXNzLFxuICAgICAgICAgICAgICAgIGFtb3VudDogK3RoaXMuY29udmVydGVyX2Zyb21fYW1vdW50LFxuICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvbl9jb2RlLFxuICAgICAgICAgICAgICAgIGRyeV9ydW46IDEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlX2Nhc2hpZXIgPSB7IGVycm9yOiB7IGNvZGU6ICdJbnZhbGlkVG9rZW4nLCBtZXNzYWdlOiAnWW91ciB0b2tlbiBoYXMgZXhwaXJlZCBvciBpcyBpbnZhbGlkLicgfSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlX2Nhc2hpZXIuZXJyb3IuY29kZSA9PT0gJ0ludmFsaWRUb2tlbicpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FzaGllckVycm9yKHJlc3BvbnNlX2Nhc2hpZXIuZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U2Vzc2lvblRpbWVvdXQodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dENhc2hpZXJVcmwoKTtcbiAgICAgICAgICAgIGlmICh2ZXJpZmljYXRpb25fY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHZlcmlmaWNhdGlvbiBjb2RlIG9uIGVycm9yXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclZlcmlmaWNhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25maWcud2l0aGRyYXcuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHRoaXMuY29uZmlnLndpdGhkcmF3LmVycm9yLCB0aGlzLm9uTW91bnRXaXRoZHJhdyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudERlcG9zaXQodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXI7XG5cbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICB0aGlzLnNldENvbnRhaW5lckhlaWdodCgwKTtcbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpO1xuXG4gICAgICAgIGlmICghdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5pc19zZXNzaW9uX3RpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tJZnJhbWVMb2FkZWQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHNlc3Npb24gaGFzIHRpbWVkIG91dCByZXNldCBldmVyeXRoaW5nXG4gICAgICAgIHRoaXMuc2V0SWZyYW1lVXJsKCcnKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHRoaXMuYWN0aXZlX2NvbnRhaW5lciA9PT0gdGhpcy5jb25maWcud2l0aGRyYXcuY29udGFpbmVyICYmICF2ZXJpZmljYXRpb25fY29kZSkgfHxcbiAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfdmlydHVhbFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAvLyBpZiB2aXJ0dWFsLCBjbGVhciBldmVyeXRoaW5nIGFuZCBkb24ndCBwcm9jZWVkIGZ1cnRoZXJcbiAgICAgICAgICAgIC8vIGlmIG5vIHZlcmlmaWNhdGlvbiBjb2RlLCB3ZSBzaG91bGQgcmVxdWVzdCBhZ2FpblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VfY2FzaGllciA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5jYXNoaWVyKHRoaXMuYWN0aXZlX2NvbnRhaW5lciwgeyB2ZXJpZmljYXRpb25fY29kZSB9KTtcblxuICAgICAgICAvLyBpZiB0YWIgY2hhbmdlZCB3aGlsZSB3YWl0aW5nIGZvciByZXNwb25zZSwgaWdub3JlIGl0XG4gICAgICAgIGlmIChjdXJyZW50X2NvbnRhaW5lciAhPT0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZV9jYXNoaWVyLmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNhc2hpZXJFcnJvcihyZXNwb25zZV9jYXNoaWVyLmVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNldFNlc3Npb25UaW1lb3V0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRDYXNoaWVyVXJsKCk7XG4gICAgICAgICAgICBpZiAodmVyaWZpY2F0aW9uX2NvZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB2ZXJpZmljYXRpb24gY29kZSBvbiBlcnJvclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJWZXJpZmljYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0NyeXB0b2N1cnJlbmN5KHRoaXMucm9vdF9zdG9yZS5jbGllbnQuY3VycmVuY3kpKSB7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRDb250YWluZXJIZWlnaHQoJzM4MCcpO1xuICAgICAgICAgICAgdGhpcy5zZXRJZnJhbWVVcmwocmVzcG9uc2VfY2FzaGllci5jYXNoaWVyKTtcbiAgICAgICAgICAgIC8vIGNyeXB0byBjYXNoaWVyIGNhbiBvbmx5IGJlIGFjY2Vzc2VkIG9uY2UgYW5kIHRoZSBzZXNzaW9uIGV4cGlyZXNcbiAgICAgICAgICAgIC8vIHNvIG5vIG5lZWQgdG8gc2V0IHRpbWVvdXRzIHRvIGtlZXAgdGhlIHNlc3Npb24gYWxpdmVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tJZnJhbWVMb2FkZWQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SWZyYW1lVXJsKHJlc3BvbnNlX2Nhc2hpZXIuY2FzaGllcik7XG4gICAgICAgICAgICB0aGlzLnNldFNlc3Npb25UaW1lb3V0KGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dENhc2hpZXJVcmwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXROb3RpZmljYXRpb25Db3VudChub3RpZmljYXRpb25fY291bnQpIHtcbiAgICAgICAgdGhpcy5wMnBfbm90aWZpY2F0aW9uX2NvdW50ID0gbm90aWZpY2F0aW9uX2NvdW50O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc1AycFZpc2libGUoaXNfcDJwX3Zpc2libGUpIHtcbiAgICAgICAgdGhpcy5pc19wMnBfdmlzaWJsZSA9IGlzX3AycF92aXNpYmxlO1xuICAgICAgICBpZiAoIWlzX3AycF92aXNpYmxlICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChyb3V0ZXMuY2FzaGllcl9wMnApKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY29tbW9uLnJvdXRlVG8odGhpcy5hY2NvdW50X3Byb21wdF9kaWFsb2cubGFzdF9sb2NhdGlvbiA/PyByb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50KHZlcmlmaWNhdGlvbl9jb2RlKSB7XG4gICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50O1xuICAgICAgICBhd2FpdCB0aGlzLm9uTW91bnRDb21tb24oKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcnMuaW5kZXhPZih0aGlzLmFjdGl2ZV9jb250YWluZXIpID09PSAtMSAmJlxuICAgICAgICAgICAgIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfc3dpdGNoaW5nICYmXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9jb250YWluZXIgIT09IHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuY29udGFpbmVyXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYXNoaWVyIFN0b3JlIG9uTW91bnQgcmVxdWlyZXMgYSB2YWxpZCBjb250YWluZXIgbmFtZS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uTW91bnREZXBvc2l0KHZlcmlmaWNhdGlvbl9jb2RlKTtcbiAgICB9XG5cbiAgICBAY29tcHV0ZWRcbiAgICBnZXQgaXNfY2FzaGllcl9sb2NrZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X3N0YXR1cz8uc3RhdHVzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfc3RhdHVzO1xuXG4gICAgICAgIHJldHVybiBzdGF0dXMuc29tZShzdGF0dXNfbmFtZSA9PiBzdGF0dXNfbmFtZSA9PT0gJ2Nhc2hpZXJfbG9ja2VkJyk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGlzX3N5c3RlbV9tYWludGVuYW5jZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfc3RhdHVzPy5jYXNoaWVyX3ZhbGlkYXRpb24pIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgeyBjYXNoaWVyX3ZhbGlkYXRpb24gfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWNjb3VudF9zdGF0dXM7XG5cbiAgICAgICAgcmV0dXJuIGNhc2hpZXJfdmFsaWRhdGlvbi5zb21lKHZhbGlkYXRpb24gPT4gdmFsaWRhdGlvbiA9PT0gJ3N5c3RlbV9tYWludGVuYW5jZScpO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc19kZXBvc2l0X2xvY2tlZCgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaXNfYXV0aGVudGljYXRpb25fbmVlZGVkLFxuICAgICAgICAgICAgaXNfdG5jX25lZWRlZCxcbiAgICAgICAgICAgIGlzX2ZpbmFuY2lhbF9hY2NvdW50LFxuICAgICAgICAgICAgaXNfZmluYW5jaWFsX2luZm9ybWF0aW9uX2luY29tcGxldGUsXG4gICAgICAgICAgICBpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSxcbiAgICAgICAgICAgIGFjY291bnRfc3RhdHVzLFxuICAgICAgICAgICAgaXNfZXUsXG4gICAgICAgICAgICBtdDVfbG9naW5fbGlzdCxcbiAgICAgICAgICAgIGlzX2RlcG9zaXRfbG9jayxcbiAgICAgICAgfSA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQ7XG4gICAgICAgIGlmICghYWNjb3VudF9zdGF0dXM/LnN0YXR1cykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IG5lZWRfYXV0aGVudGljYXRpb24gPVxuICAgICAgICAgICAgdGhpcy5jb25maWcuZGVwb3NpdC5lcnJvci5pc19hc2tfYXV0aGVudGljYXRpb24gfHwgKGlzX2F1dGhlbnRpY2F0aW9uX25lZWRlZCAmJiBpc19ldSk7XG4gICAgICAgIGNvbnN0IG5lZWRfZmluYW5jaWFsX2Fzc2Vzc21lbnQgPVxuICAgICAgICAgICAgaXNfZmluYW5jaWFsX2FjY291bnQgJiYgKGlzX2ZpbmFuY2lhbF9pbmZvcm1hdGlvbl9pbmNvbXBsZXRlIHx8IGlzX3RyYWRpbmdfZXhwZXJpZW5jZV9pbmNvbXBsZXRlKTtcbiAgICAgICAgLy8gQ1IgY2FuIGRlcG9zaXQgd2l0aG91dCBhY2NlcHRpbmcgbGF0ZXN0IHRuYyBleGNlcHQgdGhvc2Ugd2l0aCBGaW5hbmNpYWwgU1RQXG4gICAgICAgIGNvbnN0IG5lZWRfdG5jID1cbiAgICAgICAgICAgIChpc19ldSB8fFxuICAgICAgICAgICAgICAgIG10NV9sb2dpbl9saXN0LnNvbWUoXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5hY2NvdW50X3R5cGUgPT09ICdyZWFsJyAmJiBpdGVtLnN1Yl9hY2NvdW50X3R5cGUgPT09ICdmaW5hbmNpYWxfc3RwJ1xuICAgICAgICAgICAgICAgICkpICYmXG4gICAgICAgICAgICBpc190bmNfbmVlZGVkO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpc19kZXBvc2l0X2xvY2sgfHxcbiAgICAgICAgICAgIG5lZWRfYXV0aGVudGljYXRpb24gfHxcbiAgICAgICAgICAgIG5lZWRfdG5jIHx8XG4gICAgICAgICAgICBuZWVkX2ZpbmFuY2lhbF9hc3Nlc3NtZW50IHx8XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5kZXBvc2l0LmVycm9yLmlzX2Fza19maW5hbmNpYWxfcmlza19hcHByb3ZhbFxuICAgICAgICApO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc193aXRoZHJhd2FsX2xvY2tlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmFjY291bnRfc3RhdHVzPy5zdGF0dXMpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgeyBhdXRoZW50aWNhdGlvbiB9ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY2NvdW50X3N0YXR1cztcbiAgICAgICAgY29uc3QgbmVlZF9wb2kgPSBhdXRoZW50aWNhdGlvbi5uZWVkc192ZXJpZmljYXRpb24uaW5jbHVkZXMoJ2lkZW50aXR5Jyk7XG5cbiAgICAgICAgY29uc3QgbmVlZF9hdXRoZW50aWNhdGlvbiA9IHRoaXMuY29uZmlnLndpdGhkcmF3LmVycm9yLmlzX2Fza19hdXRoZW50aWNhdGlvbiAmJiBuZWVkX3BvaTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5pc193aXRoZHJhd2FsX2xvY2sgfHxcbiAgICAgICAgICAgIG5lZWRfYXV0aGVudGljYXRpb24gfHxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLndpdGhkcmF3LmVycm9yLmlzX2Fza19maW5hbmNpYWxfcmlza19hcHByb3ZhbFxuICAgICAgICApO1xuICAgIH1cblxuICAgIEBjb21wdXRlZFxuICAgIGdldCBpc190cmFuc2Zlcl9sb2NrZWQoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGlzX2ZpbmFuY2lhbF9hY2NvdW50LFxuICAgICAgICAgICAgaXNfZmluYW5jaWFsX2luZm9ybWF0aW9uX2luY29tcGxldGUsXG4gICAgICAgICAgICBpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSxcbiAgICAgICAgICAgIGFjY291bnRfc3RhdHVzLFxuICAgICAgICB9ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudDtcblxuICAgICAgICBpZiAoIWFjY291bnRfc3RhdHVzPy5zdGF0dXMpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjb25zdCBuZWVkX2ZpbmFuY2lhbF9hc3Nlc3NtZW50ID1cbiAgICAgICAgICAgIGlzX2ZpbmFuY2lhbF9hY2NvdW50ICYmIChpc19maW5hbmNpYWxfaW5mb3JtYXRpb25faW5jb21wbGV0ZSB8fCBpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSk7XG5cbiAgICAgICAgcmV0dXJuIG5lZWRfZmluYW5jaWFsX2Fzc2Vzc21lbnQgJiYgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5lcnJvci5pc19hc2tfZmluYW5jaWFsX3Jpc2tfYXBwcm92YWw7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldE1heFdpdGhkcmF3QW1vdW50KGFtb3VudCkge1xuICAgICAgICB0aGlzLm1heF93aXRoZHJhd19hbW91bnQgPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIGNoZWNrMTBrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmRlciA9IChhd2FpdCB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmdldExpbWl0cygpKT8uZ2V0X2xpbWl0cz8ucmVtYWluZGVyO1xuICAgICAgICB0aGlzLnNldE1heFdpdGhkcmF3QW1vdW50KHJlbWFpbmRlcik7XG4gICAgICAgIGNvbnN0IG1pbl93aXRoZHJhd2FsID0gZ2V0TWluV2l0aGRyYXdhbCh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmN1cnJlbmN5KTtcbiAgICAgICAgY29uc3QgaXNfbGltaXRfcmVhY2hlZCA9ICEhKHR5cGVvZiByZW1haW5kZXIgIT09ICd1bmRlZmluZWQnICYmICtyZW1haW5kZXIgPCBtaW5fd2l0aGRyYXdhbCk7XG4gICAgICAgIHRoaXMuc2V0MTBrTGltaXRhdGlvbihpc19saW1pdF9yZWFjaGVkKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0MTBrTGltaXRhdGlvbihpc19saW1pdF9yZWFjaGVkKSB7XG4gICAgICAgIHRoaXMuaXNfMTBrX3dpdGhkcmF3YWxfbGltaXRfcmVhY2hlZCA9IGlzX2xpbWl0X3JlYWNoZWQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIGNoZWNrSWZyYW1lTG9hZGVkKCkge1xuICAgICAgICB0aGlzLnJlbW92ZU9uSWZyYW1lTG9hZGVkKCk7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0ub25JZnJhbWVMb2FkZWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKC9jYXNoaWVyfGRvdWdoZmxvdy8udGVzdChlLm9yaWdpbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgYWZ0ZXIgY29udGVudCBsb2FkcyBzbyB0aGF0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGxvYWRpbmcgYmFyIHN0YXlzIHZlcnRpY2FsbHkgY2VudGVyZWQgdW50aWwgdGhlIGVuZFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3Rfc3RvcmUudWkuaXNfbW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udGFpbmVySGVpZ2h0KHdpbmRvdy5pbm5lckhlaWdodCAtIDEwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb250YWluZXJIZWlnaHQod2luZG93LmlubmVySGVpZ2h0IC0gMTkwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlbW92ZSB0aGUgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICAvLyBvbiBldmVyeSBpZnJhbWUgc2NyZWVuIGNoYW5nZSB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0IHRvIG1vcmUvbGVzcyB0byBtYXRjaCB0aGUgbmV3IGNvbnRlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0ub25JZnJhbWVMb2FkZWQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVPbklmcmFtZUxvYWRlZChjb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnW2NvbnRhaW5lcl0ub25JZnJhbWVMb2FkZWQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5jb25maWdbY29udGFpbmVyXS5vbklmcmFtZUxvYWRlZCwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5jb25maWdbY29udGFpbmVyXS5vbklmcmFtZUxvYWRlZCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElmcmFtZVVybCh1cmwsIGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1tjb250YWluZXJdLmlmcmFtZV91cmwgPSBgJHt1cmx9JnRoZW1lPSR7dGhpcy5yb290X3N0b3JlLnVpLmlzX2RhcmtfbW9kZV9vbiA/ICdkYXJrJyA6ICdsaWdodCd9YDtcbiAgICAgICAgICAgIC8vIGFmdGVyIHdlIHNldCBpZnJhbWUgdXJsIHdlIGNhbiBjbGVhciB2ZXJpZmljYXRpb24gY29kZVxuICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5zZXRWZXJpZmljYXRpb25Db2RlKCcnLCB0aGlzLm1hcF9hY3Rpb25bY29udGFpbmVyXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1tjb250YWluZXJdLmlmcmFtZV91cmwgPSB1cmw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0Q29udGFpbmVySGVpZ2h0KGhlaWdodCkge1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmlmcmFtZV9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEVycm9yTWVzc2FnZShlcnJvciwgb25DbGlja0J1dHRvbiwgaXNfc2hvd19mdWxsX3BhZ2UsIGlzX3ZlcmlmaWNhdGlvbl9lcnJvcikge1xuICAgICAgICAvLyBmb3IgZXJyb3JzIHRoYXQgbmVlZCB0byBzaG93IGEgYnV0dG9uLCByZXNldCB0aGUgZm9ybVxuICAgICAgICBjb25zdCBlcnJvcl9vYmplY3QgPSB7XG4gICAgICAgICAgICBvbkNsaWNrQnV0dG9uLFxuICAgICAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICBpc19zaG93X2Z1bGxfcGFnZTogaXNfc2hvd19mdWxsX3BhZ2UgfHwgL0ludmFsaWRUb2tlbnxXcm9uZ1Jlc3BvbnNlLy50ZXN0KGVycm9yLmNvZGUpLFxuICAgICAgICAgICAgLi4uKGdldFByb3BlcnR5VmFsdWUoZXJyb3IsIFsnZGV0YWlscycsICdmaWVsZHMnXSkgJiYge1xuICAgICAgICAgICAgICAgIGZpZWxkczogZXJyb3IuZGV0YWlscy5maWVsZHMsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaXNfdmVyaWZpY2F0aW9uX2Vycm9yICYmIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbi5lcnJvciA9IGVycm9yX29iamVjdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uZXJyb3IgPSBlcnJvcl9vYmplY3Q7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgaGFuZGxlQ2FzaGllckVycm9yKGVycm9yKSB7XG4gICAgICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xuICAgICAgICAgICAgY2FzZSAnQVNLX1ROQ19BUFBST1ZBTCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoZXJyb3IsIG51bGwsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQVNLX0ZJWF9ERVRBSUxTJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShlcnJvciwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBU0tfVUtfRlVORFNfUFJPVEVDVElPTic6XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5lcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXNfYXNrX3VrX2Z1bmRzX3Byb3RlY3Rpb246IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FTS19TRUxGX0VYQ0xVU0lPTl9NQVhfVFVSTk9WRVJfU0VUJzpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBpc19zZWxmX2V4Y2x1c2lvbl9tYXhfdHVybm92ZXJfc2V0OiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBU0tfQVVUSEVOVElDQVRFJzpcbiAgICAgICAgICAgIGNhc2UgJ0FTS19BR0VfVkVSSUZJQ0FUSU9OJzpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBpc19hc2tfYXV0aGVudGljYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FTS19GSU5BTkNJQUxfUklTS19BUFBST1ZBTCc6XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5lcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXNfYXNrX2ZpbmFuY2lhbF9yaXNrX2FwcHJvdmFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX2Fza191a19mdW5kc19wcm90ZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNfc2VsZl9leGNsdXNpb25fbWF4X3R1cm5vdmVyX3NldDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzX2Fza19hdXRoZW50aWNhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzX2Fza19maW5hbmNpYWxfcmlza19hcHByb3ZhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0RXJyb3JDb25maWcoY29uZmlnX25hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uZXJyb3IgPSB7XG4gICAgICAgICAgICBbY29uZmlnX25hbWVdOiB2YWx1ZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc3VibWl0RnVuZHNQcm90ZWN0aW9uKCkge1xuICAgICAgICB0aGlzLldTLnNlbmQoeyB1a2djX2Z1bmRzX3Byb3RlY3Rpb246IDEsIHRuY19hcHByb3ZhbDogMSB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JDb25maWcoJ21lc3NhZ2UnLCByZXNwb25zZS5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRMb2FkaW5nKGlzX2xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc19sb2FkaW5nID0gaXNfbG9hZGluZztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0U2Vzc2lvblRpbWVvdXQoaXNfc2Vzc2lvbl90aW1lX291dCwgY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW2NvbnRhaW5lcl0uaXNfc2Vzc2lvbl90aW1lb3V0ID0gaXNfc2Vzc2lvbl90aW1lX291dDtcbiAgICAgICAgaWYgKGlzX3Nlc3Npb25fdGltZV9vdXQpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlT25JZnJhbWVMb2FkZWQoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRWZXJpZmljYXRpb25CdXR0b25DbGlja2VkKGlzX2J1dHRvbl9jbGlja2VkLCBjb250YWluZXIgPSB0aGlzLmFjdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgdGhpcy5jb25maWdbY29udGFpbmVyXS52ZXJpZmljYXRpb24uaXNfYnV0dG9uX2NsaWNrZWQgPSBpc19idXR0b25fY2xpY2tlZDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0VmVyaWZpY2F0aW9uRW1haWxTZW50KGlzX2VtYWlsX3NlbnQsIGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbmZpZ1tjb250YWluZXJdLnZlcmlmaWNhdGlvbi5pc19lbWFpbF9zZW50ID0gaXNfZW1haWxfc2VudDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0VmVyaWZpY2F0aW9uUmVzZW5kQ2xpY2tlZChpc19yZXNlbmRfY2xpY2tlZCwgY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLmlzX3Jlc2VuZF9jbGlja2VkID0gaXNfcmVzZW5kX2NsaWNrZWQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFZlcmlmaWNhdGlvblJlc2VuZFRpbWVvdXQocmVzZW5kX3RpbWVvdXQsIGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbmZpZ1tjb250YWluZXJdLnZlcmlmaWNhdGlvbi5yZXNlbmRfdGltZW91dCA9IHJlc2VuZF90aW1lb3V0O1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dENhc2hpZXJVcmwoY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1tjb250YWluZXJdLnRpbWVvdXRfc2Vzc2lvbikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29uZmlnW2NvbnRhaW5lcl0udGltZW91dF9zZXNzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNhc2hpZXIgc2Vzc2lvbiBleHBpcmVzIGFmdGVyIG9uZSBtaW51dGVcbiAgICAvLyBzbyB3ZSBzaG91bGQgcmVzZW5kIHRoZSByZXF1ZXN0IGZvciBjb250YWluZXIgKGRlcG9zaXR8d2l0aGRyYXcpIHVybCBvbiBuZXh0IG1vdW50XG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFRpbWVvdXRDYXNoaWVyVXJsKCkge1xuICAgICAgICB0aGlzLmNsZWFyVGltZW91dENhc2hpZXJVcmwoKTtcbiAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS50aW1lb3V0X3Nlc3Npb24gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2Vzc2lvblRpbWVvdXQodHJ1ZSk7XG4gICAgICAgIH0sIDYwMDAwKTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXRWZXJpZmljYXRpb24oY29udGFpbmVyID0gdGhpcy5hY3RpdmVfY29udGFpbmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1tjb250YWluZXJdLnZlcmlmaWNhdGlvbi50aW1lb3V0X2J1dHRvbikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29uZmlnW2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLnRpbWVvdXRfYnV0dG9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHZlcmlmaWNhdGlvbiB0b2tlbiBleHBpcmVzIGFmdGVyIG9uZSBob3VyXG4gICAgLy8gc28gd2Ugc2hvdWxkIHNob3cgdGhlIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGJ1dHRvbiBhZ2FpbiBhZnRlciB0aGF0XG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFRpbWVvdXRWZXJpZmljYXRpb24oKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0VmVyaWZpY2F0aW9uKCk7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLnRpbWVvdXRfYnV0dG9uID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgICAgIH0sIDM2MDAwMDApO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBzZW5kVmVyaWZpY2F0aW9uRW1haWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLnZlcmlmaWNhdGlvbi5pc19idXR0b25fY2xpY2tlZCB8fCAhdGhpcy5yb290X3N0b3JlLmNsaWVudC5lbWFpbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvbkJ1dHRvbkNsaWNrZWQodHJ1ZSk7XG4gICAgICAgIGNvbnN0IHdpdGhkcmF3YWxfdHlwZSA9IGBwYXltZW50JHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2NvbnRhaW5lciA9PT0gdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5jb250YWluZXIgPyAnYWdlbnQnIDogJydcbiAgICAgICAgfV93aXRoZHJhd2A7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VfdmVyaWZ5X2VtYWlsID0gYXdhaXQgdGhpcy5XUy52ZXJpZnlFbWFpbCh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmVtYWlsLCB3aXRoZHJhd2FsX3R5cGUpO1xuICAgICAgICBpZiAocmVzcG9uc2VfdmVyaWZ5X2VtYWlsLmVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVmVyaWZpY2F0aW9uKCk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VfdmVyaWZ5X2VtYWlsLmVycm9yLmNvZGUgPT09ICdQYXltZW50QWdlbnRXaXRoZHJhd0Vycm9yJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHJlc3BvbnNlX3ZlcmlmeV9lbWFpbC5lcnJvciwgdGhpcy5yZXNldFBheW1lbnRBZ2VudCwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZV92ZXJpZnlfZW1haWwuZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvbkVtYWlsU2VudCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dFZlcmlmaWNhdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsKCkge1xuICAgICAgICAvLyBkb24ndCBhbGxvdyBjbGlja2luZyB3aGlsZSBvbmdvaW5nIHRpbWVvdXRcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLnJlc2VuZF90aW1lb3V0IDwgNjApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvbkJ1dHRvbkNsaWNrZWQoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldENvdW50RG93blJlc2VuZFZlcmlmaWNhdGlvbigpO1xuICAgICAgICB0aGlzLnNlbmRWZXJpZmljYXRpb25FbWFpbCgpO1xuICAgIH1cblxuICAgIHNldENvdW50RG93blJlc2VuZFZlcmlmaWNhdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25SZXNlbmRUaW1lb3V0KHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLnJlc2VuZF90aW1lb3V0IC0gMSk7XG4gICAgICAgIGNvbnN0IHJlc2VuZF9pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXSB8fCAhdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS52ZXJpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHJlc2VuZF9pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS52ZXJpZmljYXRpb24ucmVzZW5kX3RpbWVvdXQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvblJlc2VuZFRpbWVvdXQoNjApO1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVzZW5kX2ludGVydmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWZXJpZmljYXRpb25SZXNlbmRUaW1lb3V0KHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0udmVyaWZpY2F0aW9uLnJlc2VuZF90aW1lb3V0IC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIGNsZWFyVmVyaWZpY2F0aW9uKGNvbnRhaW5lciA9IHRoaXMuYWN0aXZlX2NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNsZWFyVGltZW91dFZlcmlmaWNhdGlvbihjb250YWluZXIpO1xuICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvbkJ1dHRvbkNsaWNrZWQoZmFsc2UsIGNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuc2V0VmVyaWZpY2F0aW9uRW1haWxTZW50KGZhbHNlLCBjb250YWluZXIpO1xuICAgICAgICB0aGlzLnNldFZlcmlmaWNhdGlvblJlc2VuZENsaWNrZWQoZmFsc2UsIGNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuc2V0VmVyaWZpY2F0aW9uUmVzZW5kVGltZW91dCg2MCwgY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycsIG51bGwsIG51bGwsIHRydWUpO1xuICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnNldFZlcmlmaWNhdGlvbkNvZGUoJycsIHRoaXMubWFwX2FjdGlvbltjb250YWluZXJdKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNUaW1lclZpc2libGUoaXNfdGltZXJfdmlzaWJsZSkge1xuICAgICAgICB0aGlzLmlzX3RpbWVyX3Zpc2libGUgPSBpc190aW1lcl92aXNpYmxlO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNldFRpbWVyKCkge1xuICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgZ2V0RXhjaGFuZ2VSYXRlKGZyb21fY3VycmVuY3ksIHRvX2N1cnJlbmN5KSB7XG4gICAgICAgIGNvbnN0IHsgZXhjaGFuZ2VfcmF0ZXMgfSA9IGF3YWl0IHRoaXMuV1Muc2VuZCh7XG4gICAgICAgICAgICBleGNoYW5nZV9yYXRlczogMSxcbiAgICAgICAgICAgIGJhc2VfY3VycmVuY3k6IGZyb21fY3VycmVuY3ksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZXhjaGFuZ2VfcmF0ZXMucmF0ZXNbdG9fY3VycmVuY3ldO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBY3RpdmVUYWIoY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudFBheW1lbnRBZ2VudExpc3QoKSB7XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgdGhpcy5vblJlbW91bnQgPSB0aGlzLm9uTW91bnRQYXltZW50QWdlbnRMaXN0O1xuICAgICAgICBhd2FpdCB0aGlzLm9uTW91bnRDb21tb24oKTtcblxuICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBnZXRQYXltZW50QWdlbnRMaXN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuV1Mud2FpdCgncGF5bWVudGFnZW50X2xpc3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdhaXQgZm9yIGdldF9zZXR0aW5ncyBzbyByZXNpZGVuY2UgZ2V0cyBwb3B1bGF0ZWQgaW4gY2xpZW50LXN0b3JlXG4gICAgICAgIC8vIFRPRE86IHNldCByZXNpZGVuY2UgaW4gY2xpZW50LXN0b3JlIGZyb20gYXV0aG9yaXplIHNvIGl0J3MgZmFzdGVyXG4gICAgICAgIGF3YWl0IHRoaXMuV1Mud2FpdCgnZ2V0X3NldHRpbmdzJyk7XG4gICAgICAgIHJldHVybiB0aGlzLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50TGlzdCh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnJlc2lkZW5jZSwgdGhpcy5yb290X3N0b3JlLmNsaWVudC5jdXJyZW5jeSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsUGF5bWVudEFnZW50TGlzdCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5XUy53YWl0KCdnZXRfc2V0dGluZ3MnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuV1MuYWxsUGF5bWVudEFnZW50TGlzdCh0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnJlc2lkZW5jZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEFsbFBheW1lbnRBZ2VudExpc3QobGlzdCkge1xuICAgICAgICB0aGlzLmFsbF9wYXltZW50X2FnZW50X2xpc3QgPSBsaXN0O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBnZXRQYXltZW50QWdlbnREZXRhaWxzKCkge1xuICAgICAgICBjb25zdCB7IHBheW1lbnRhZ2VudF9kZXRhaWxzIH0gPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50RGV0YWlscygpO1xuICAgICAgICByZXR1cm4gcGF5bWVudGFnZW50X2RldGFpbHM7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFkZFN1cHBvcnRlZEJhbmsoYmFuaykge1xuICAgICAgICBjb25zdCBzdXBwb3J0ZWRfYmFua19leGlzdHMgPSB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcy5maW5kKFxuICAgICAgICAgICAgc3VwcG9ydGVkX2JhbmsgPT4gc3VwcG9ydGVkX2JhbmsudmFsdWUgPT09IGJhbmsudG9Mb3dlckNhc2UoKVxuICAgICAgICApO1xuICAgICAgICBpZiAoIXN1cHBvcnRlZF9iYW5rX2V4aXN0cykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3MucHVzaCh7IHRleHQ6IGJhbmssIHZhbHVlOiBiYW5rLnRvTG93ZXJDYXNlKCkgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc29ydFN1cHBvcnRlZEJhbmtzKCkge1xuICAgICAgICAvLyBzb3J0IHN1cHBvcnRlZCBiYW5rcyBhbHBoYWJldGljYWxseSBieSB2YWx1ZSwgdGhlIG9wdGlvbiAnQWxsIHBheW1lbnQgYWdlbnRzJyB3aXRoIHZhbHVlIDAgc2hvdWxkIGJlIG9uIHRvcFxuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcy5yZXBsYWNlKFxuICAgICAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5zdXBwb3J0ZWRfYmFua3Muc2xpY2UoKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGEudmFsdWUgPCBiLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGEudmFsdWUgPiBiLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIHNldFBheW1lbnRBZ2VudExpc3QocGFfbGlzdCkge1xuICAgICAgICBjb25zdCBwYXltZW50X2FnZW50X2xpc3QgPSBwYV9saXN0IHx8IChhd2FpdCB0aGlzLmdldFBheW1lbnRBZ2VudExpc3QoKSk7XG4gICAgICAgIGlmICghcGF5bWVudF9hZ2VudF9saXN0IHx8ICFwYXltZW50X2FnZW50X2xpc3QucGF5bWVudGFnZW50X2xpc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBPbmNlIHRlbGVwaG9uZSwgdXJsIGFuZCBzdXBwb3J0ZWRfYmFua3MgcmVtb3ZlZCBmcm9tIHBheW1lbnRhZ2VudF9saXN0Lmxpc3Qgd2UgY2FuIHJlbW92ZSB0aGVtIGFuZCBqdXN0IHVzZSB0aGUgcGx1cmFsIG9uZXNcbiAgICAgICAgcGF5bWVudF9hZ2VudF9saXN0LnBheW1lbnRhZ2VudF9saXN0Lmxpc3QuZm9yRWFjaChwYXltZW50X2FnZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQubGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogcGF5bWVudF9hZ2VudC5lbWFpbCxcbiAgICAgICAgICAgICAgICBwaG9uZXM6IHBheW1lbnRfYWdlbnQ/LnBob25lX251bWJlcnMgfHwgcGF5bWVudF9hZ2VudD8udGVsZXBob25lLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBheW1lbnRfYWdlbnQubmFtZSxcbiAgICAgICAgICAgICAgICBzdXBwb3J0ZWRfYmFua3M6IHBheW1lbnRfYWdlbnQ/LnN1cHBvcnRlZF9wYXltZW50X21ldGhvZHMgfHwgcGF5bWVudF9hZ2VudD8uc3VwcG9ydGVkX2JhbmtzLFxuICAgICAgICAgICAgICAgIHVybHM6IHBheW1lbnRfYWdlbnQ/LnVybHMgfHwgcGF5bWVudF9hZ2VudD8udXJsLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChwYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1cHBvcnRlZF9iYW5rc19hcnJheSA9IHBheW1lbnRfYWdlbnQ/LnN1cHBvcnRlZF9wYXltZW50X21ldGhvZHNcbiAgICAgICAgICAgICAgICAgICAgPyBwYXltZW50X2FnZW50LnN1cHBvcnRlZF9wYXltZW50X21ldGhvZHMubWFwKGJhbmsgPT4gYmFuay5wYXltZW50X21ldGhvZClcbiAgICAgICAgICAgICAgICAgICAgOiBwYXltZW50X2FnZW50LnN1cHBvcnRlZF9iYW5rcy5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIHN1cHBvcnRlZF9iYW5rc19hcnJheS5mb3JFYWNoKGJhbmsgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFN1cHBvcnRlZEJhbmsoYmFuayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc29ydFN1cHBvcnRlZEJhbmtzKCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGZpbHRlclBheW1lbnRBZ2VudExpc3QoYmFuaykge1xuICAgICAgICBpZiAoYmFuaykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5maWx0ZXJlZF9saXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50Lmxpc3QuZm9yRWFjaChwYXltZW50X2FnZW50ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnQuc3VwcG9ydGVkX2JhbmtzICYmXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnQuc3VwcG9ydGVkX2JhbmtzLnRvTG93ZXJDYXNlKCkuc3BsaXQoJywnKS5pbmRleE9mKGJhbmspICE9PSAtMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmZpbHRlcmVkX2xpc3QucHVzaChwYXltZW50X2FnZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuZmlsdGVyZWRfbGlzdCA9IHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQubGlzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNfcGF5bWVudF9hZ2VudF92aXNpYmxlICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChyb3V0ZXMuY2FzaGllcl9wYSkpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jb21tb24ucm91dGVUbyhyb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBvbkNoYW5nZVBheW1lbnRNZXRob2QoeyB0YXJnZXQgfSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldC52YWx1ZSA9PT0gJzAnID8gcGFyc2VJbnQodGFyZ2V0LnZhbHVlKSA6IHRhcmdldC52YWx1ZTtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5zZWxlY3RlZF9iYW5rID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZmlsdGVyUGF5bWVudEFnZW50TGlzdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uTW91bnRQYXltZW50QWdlbnRXaXRoZHJhdygpIHtcbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICB0aGlzLm9uUmVtb3VudCA9IHRoaXMub25Nb3VudFBheW1lbnRBZ2VudFdpdGhkcmF3O1xuICAgICAgICBhd2FpdCB0aGlzLm9uTW91bnRDb21tb24oKTtcblxuICAgICAgICB0aGlzLnNldElzV2l0aGRyYXcodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0SXNXaXRoZHJhd1N1Y2Nlc3NmdWwoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldFJlY2VpcHQoe30pO1xuXG4gICAgICAgIGlmICghdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5hZ2VudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50X2FnZW50X2xpc3QgPSBhd2FpdCB0aGlzLmdldFBheW1lbnRBZ2VudExpc3QoKTtcbiAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfbGlzdC5wYXltZW50YWdlbnRfbGlzdC5saXN0LmZvckVhY2gocGF5bWVudF9hZ2VudCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRQYXltZW50QWdlbnQocGF5bWVudF9hZ2VudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhcGF5bWVudF9hZ2VudF9saXN0LnBheW1lbnRhZ2VudF9saXN0Lmxpc3QubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmVuZHNXaXRoKHJvdXRlcy5jYXNoaWVyX3BhKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNvbW1vbi5yb3V0ZVRvKHJvdXRlcy5jYXNoaWVyX2RlcG9zaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc1dpdGhkcmF3KGlzX3dpdGhkcmF3ID0gIXRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuaXNfd2l0aGRyYXcpIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5pc193aXRoZHJhdyA9IGlzX3dpdGhkcmF3O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc1RyeVdpdGhkcmF3U3VjY2Vzc2Z1bChpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bCkge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuaXNfdHJ5X3dpdGhkcmF3X3N1Y2Nlc3NmdWwgPSBpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNXaXRoZHJhd1N1Y2Nlc3NmdWwoaXNfd2l0aGRyYXdfc3VjY2Vzc2Z1bCkge1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmlzX3dpdGhkcmF3X3N1Y2Nlc3NmdWwgPSBpc193aXRoZHJhd19zdWNjZXNzZnVsO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDb25maXJtYXRpb24oeyBhbW91bnQsIGN1cnJlbmN5LCBsb2dpbmlkLCBwYXltZW50X2FnZW50X25hbWUgfSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmNvbmZpcm0gPSB7XG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgIGxvZ2luaWQsXG4gICAgICAgICAgICBwYXltZW50X2FnZW50X25hbWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFJlY2VpcHQoe1xuICAgICAgICBhbW91bnRfdHJhbnNmZXJyZWQsXG4gICAgICAgIHBheW1lbnRfYWdlbnRfZW1haWwsXG4gICAgICAgIHBheW1lbnRfYWdlbnRfaWQsXG4gICAgICAgIHBheW1lbnRfYWdlbnRfbmFtZSxcbiAgICAgICAgcGF5bWVudF9hZ2VudF9waG9uZSxcbiAgICAgICAgcGF5bWVudF9hZ2VudF91cmwsXG4gICAgfSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LnJlY2VpcHQgPSB7XG4gICAgICAgICAgICBhbW91bnRfdHJhbnNmZXJyZWQsXG4gICAgICAgICAgICBwYXltZW50X2FnZW50X2VtYWlsLFxuICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9pZCxcbiAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfbmFtZSxcbiAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfcGhvbmUsXG4gICAgICAgICAgICBwYXltZW50X2FnZW50X3VybCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYWRkUGF5bWVudEFnZW50KHBheW1lbnRfYWdlbnQpIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5hZ2VudHMucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiBwYXltZW50X2FnZW50Lm5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogcGF5bWVudF9hZ2VudC5wYXltZW50YWdlbnRfbG9naW5pZCxcbiAgICAgICAgICAgIG1heF93aXRoZHJhd2FsOiBwYXltZW50X2FnZW50Lm1heF93aXRoZHJhd2FsLFxuICAgICAgICAgICAgbWluX3dpdGhkcmF3YWw6IHBheW1lbnRfYWdlbnQubWluX3dpdGhkcmF3YWwsXG4gICAgICAgICAgICBlbWFpbDogcGF5bWVudF9hZ2VudC5lbWFpbCxcbiAgICAgICAgICAgIHBob25lOiBwYXltZW50X2FnZW50LnRlbGVwaG9uZSxcbiAgICAgICAgICAgIHVybDogcGF5bWVudF9hZ2VudC51cmwsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyByZXF1ZXN0VHJ5UGF5bWVudEFnZW50V2l0aGRyYXcoeyBsb2dpbmlkLCBjdXJyZW5jeSwgYW1vdW50LCB2ZXJpZmljYXRpb25fY29kZSB9KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgY29uc3QgcGF5bWVudF9hZ2VudF93aXRoZHJhdyA9IGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5wYXltZW50QWdlbnRXaXRoZHJhdyh7XG4gICAgICAgICAgICBsb2dpbmlkLFxuICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICB2ZXJpZmljYXRpb25fY29kZSxcbiAgICAgICAgICAgIGRyeV9ydW46IDEsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoK3BheW1lbnRfYWdlbnRfd2l0aGRyYXcucGF5bWVudGFnZW50X3dpdGhkcmF3ID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZF9hZ2VudCA9IHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnQuYWdlbnRzLmZpbmQoYWdlbnQgPT4gYWdlbnQudmFsdWUgPT09IGxvZ2luaWQpO1xuICAgICAgICAgICAgdGhpcy5zZXRDb25maXJtYXRpb24oe1xuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgICAgICBsb2dpbmlkLFxuICAgICAgICAgICAgICAgIC4uLihzZWxlY3RlZF9hZ2VudCAmJiB7IHBheW1lbnRfYWdlbnRfbmFtZTogc2VsZWN0ZWRfYWdlbnQudGV4dCB9KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRJc1RyeVdpdGhkcmF3U3VjY2Vzc2Z1bCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHBheW1lbnRfYWdlbnRfd2l0aGRyYXcuZXJyb3IsIHRoaXMucmVzZXRQYXltZW50QWdlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIHJlcXVlc3RQYXltZW50QWdlbnRXaXRoZHJhdyh7IGxvZ2luaWQsIGN1cnJlbmN5LCBhbW91bnQsIHZlcmlmaWNhdGlvbl9jb2RlIH0pIHtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICBjb25zdCBwYXltZW50X2FnZW50X3dpdGhkcmF3ID0gYXdhaXQgdGhpcy5XUy5hdXRob3JpemVkLnBheW1lbnRBZ2VudFdpdGhkcmF3KHtcbiAgICAgICAgICAgIGxvZ2luaWQsXG4gICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbl9jb2RlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCtwYXltZW50X2FnZW50X3dpdGhkcmF3LnBheW1lbnRhZ2VudF93aXRoZHJhdyA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRfYWdlbnQgPSB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50LmFnZW50cy5maW5kKGFnZW50ID0+IGFnZW50LnZhbHVlID09PSBsb2dpbmlkKTtcbiAgICAgICAgICAgIHRoaXMuc2V0UmVjZWlwdCh7XG4gICAgICAgICAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkOiBmb3JtYXRNb25leShjdXJyZW5jeSwgYW1vdW50LCB0cnVlKSxcbiAgICAgICAgICAgICAgICAuLi4oc2VsZWN0ZWRfYWdlbnQgJiYge1xuICAgICAgICAgICAgICAgICAgICBwYXltZW50X2FnZW50X2VtYWlsOiBzZWxlY3RlZF9hZ2VudC5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9pZDogc2VsZWN0ZWRfYWdlbnQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfbmFtZTogc2VsZWN0ZWRfYWdlbnQudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudF9hZ2VudF9waG9uZTogc2VsZWN0ZWRfYWdlbnQucGhvbmUsXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfdXJsOiBzZWxlY3RlZF9hZ2VudC51cmwsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uKCFzZWxlY3RlZF9hZ2VudCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRfYWdlbnRfaWQ6IGxvZ2luaWQsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXNXaXRoZHJhd1N1Y2Nlc3NmdWwodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldElzVHJ5V2l0aGRyYXdTdWNjZXNzZnVsKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29uZmlybWF0aW9uKHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHBheW1lbnRfYWdlbnRfd2l0aGRyYXcuZXJyb3IsIHRoaXMucmVzZXRQYXltZW50QWdlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2V0UGF5bWVudEFnZW50ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIHRoaXMuc2V0SXNXaXRoZHJhdyhmYWxzZSk7XG4gICAgICAgIHRoaXMuY2xlYXJWZXJpZmljYXRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVUYWJJbmRleCgwKTtcbiAgICB9O1xuXG4gICAgLy8gcG9zc2libGUgdHJhbnNmZXJzOlxuICAgIC8vIDEuIGZpYXQgdG8gY3J5cHRvICYgdmljZSB2ZXJzYVxuICAgIC8vIDIuIGZpYXQgdG8gbXQgJiB2aWNlIHZlcnNhXG4gICAgLy8gMy4gY3J5cHRvIHRvIG10ICYgdmljZSB2ZXJzYVxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbk1vdW50QWNjb3VudFRyYW5zZmVyKCkge1xuICAgICAgICB0aGlzLnNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50QWNjb3VudFRyYW5zZmVyO1xuICAgICAgICBhd2FpdCB0aGlzLm9uTW91bnRDb21tb24oKTtcbiAgICAgICAgYXdhaXQgdGhpcy5XUy53YWl0KCd3ZWJzaXRlX3N0YXR1cycpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIHNvbWUgYmFsYW5jZSB1cGRhdGUgaGFzIGNvbWUgaW4gc2luY2UgdGhlIGxhc3QgbW91bnRcbiAgICAgICAgY29uc3QgaGFzX3VwZGF0ZWRfYWNjb3VudF9iYWxhbmNlID1cbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuaGFzX25vX2FjY291bnRzX2JhbGFuY2UgJiZcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWN0aXZlX2FjY291bnRzKS5maW5kKFxuICAgICAgICAgICAgICAgIGFjY291bnQgPT5cbiAgICAgICAgICAgICAgICAgICAgIXRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWN0aXZlX2FjY291bnRzW2FjY291bnRdLmlzX3ZpcnR1YWwgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5hY3RpdmVfYWNjb3VudHNbYWNjb3VudF0uYmFsYW5jZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgaWYgKGhhc191cGRhdGVkX2FjY291bnRfYmFsYW5jZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRIYXNOb0FjY291bnRzQmFsYW5jZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YXJpb3VzIGlzc3VlcyBoYXBwZW4gd2hlbiBsb2FkaW5nIGZyb20gY2FjaGVcbiAgICAgICAgLy8gZS5nLiBuZXcgYWNjb3VudCBtYXkgaGF2ZSBiZWVuIGNyZWF0ZWQsIHRyYW5zZmVyIG1heSBoYXZlIGJlZW4gZG9uZSBlbHNld2hlcmUsIGV0Y1xuICAgICAgICAvLyBzbyBvbiBsb2FkIG9mIHRoaXMgcGFnZSBqdXN0IGNhbGwgaXQgYWdhaW5cbiAgICAgICAgaWYgKHRoaXMucm9vdF9zdG9yZS5jbGllbnQuaXNfbG9nZ2VkX2luKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzID0gYXdhaXQgdGhpcy5XUy5hdXRob3JpemVkLnRyYW5zZmVyQmV0d2VlbkFjY291bnRzKCk7XG5cbiAgICAgICAgICAgIGlmICh0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UodHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5lcnJvciwgdGhpcy5vbk1vdW50QWNjb3VudFRyYW5zZmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNhbkRvQWNjb3VudFRyYW5zZmVyKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuYWNjb3VudHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNvcnRBY2NvdW50c1RyYW5zZmVyKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMpO1xuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckZlZSgpO1xuICAgICAgICAgICAgdGhpcy5zZXRNaW5pbXVtRmVlKCk7XG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zZmVyTGltaXQoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdD8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNmZF90cmFuc2Zlcl90b19sb2dpbl9pZCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2NmZF90cmFuc2Zlcl90b19sb2dpbl9pZCcpO1xuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ2NmZF90cmFuc2Zlcl90b19sb2dpbl9pZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9ial92YWx1ZXMgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3QuZmluZChcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCA9PiBhY2NvdW50LnZhbHVlID09PSBjZmRfdHJhbnNmZXJfdG9fbG9naW5faWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChvYmpfdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKG9ial92YWx1ZXMudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBzZWxlY3RlZCB0byBpcyBub3QgYWxsb3dlZCBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpfdmFsdWVzLmVycm9yID0gZ2V0U2VsZWN0ZWRFcnJvcihvYmpfdmFsdWVzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkVG8ob2JqX3ZhbHVlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfVxuXG4gICAgY2FuRG9BY2NvdW50VHJhbnNmZXIoYWNjb3VudHMpIHtcbiAgICAgICAgbGV0IGNhbl90cmFuc2ZlciA9IHRydWU7XG4gICAgICAgIC8vIHNob3VsZCBoYXZlIGF0IGxlYXN0IG9uZSBhY2NvdW50IHdpdGggYmFsYW5jZVxuICAgICAgICBpZiAoIWFjY291bnRzLmZpbmQoYWNjb3VudCA9PiArYWNjb3VudC5iYWxhbmNlID4gMCkpIHtcbiAgICAgICAgICAgIGNhbl90cmFuc2ZlciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZXRIYXNOb0FjY291bnRzQmFsYW5jZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50c0JhbGFuY2UoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNob3VsZCBoYXZlIGF0IGxlYXN0IHR3byByZWFsLW1vbmV5IGFjY291bnRzXG4gICAgICAgIGlmIChhY2NvdW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgY2FuX3RyYW5zZmVyID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNldEhhc05vQWNjb3VudCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SGFzTm9BY2NvdW50KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhbl90cmFuc2Zlcikge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FuX3RyYW5zZmVyO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRIYXNOb0FjY291bnRzQmFsYW5jZShoYXNfbm9fYWNjb3VudHNfYmFsYW5jZSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmhhc19ub19hY2NvdW50c19iYWxhbmNlID0gaGFzX25vX2FjY291bnRzX2JhbGFuY2U7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldEhhc05vQWNjb3VudChoYXNfbm9fYWNjb3VudCkge1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmhhc19ub19hY2NvdW50ID0gaGFzX25vX2FjY291bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFRyYW5zZmVyRmVlKCkge1xuICAgICAgICBjb25zdCB0cmFuc2Zlcl9mZWUgPSBnZXRQcm9wZXJ0eVZhbHVlKGdldEN1cnJlbmNpZXMoKSwgW1xuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmN1cnJlbmN5LFxuICAgICAgICAgICAgJ3RyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMnLFxuICAgICAgICAgICAgJ2ZlZXMnLFxuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5jdXJyZW5jeSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIudHJhbnNmZXJfZmVlID0gdHlwZW9mIHRyYW5zZmVyX2ZlZSA9PT0gJ3VuZGVmaW5lZCcgPyAxIDogK3RyYW5zZmVyX2ZlZTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0TWluaW11bUZlZSgpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbHMgPSBnZXREZWNpbWFsUGxhY2VzKHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5jdXJyZW5jeSk7XG4gICAgICAgIC8vIHdlIG5lZWQgLnRvRml4ZWQoKSBzbyB0aGF0IGl0IGRvZXNuJ3QgZGlzcGxheSBpbiBzY2llbnRpZmljIG5vdGF0aW9uLCBlLmcuIDFlLTggZm9yIGN1cnJlbmNpZXMgd2l0aCA4IGRlY2ltYWwgcGxhY2VzXG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIubWluaW11bV9mZWUgPSAoMSAvIE1hdGgucG93KDEwLCBkZWNpbWFscykpLnRvRml4ZWQoZGVjaW1hbHMpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRUcmFuc2ZlckxpbWl0KCkge1xuICAgICAgICBjb25zdCBpc19tdF90cmFuc2ZlciA9XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uaXNfbXQgfHwgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5pc19tdDtcbiAgICAgICAgY29uc3QgaXNfZHh0cmFkZV90cmFuc2ZlciA9XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uaXNfZHh0cmFkZSB8fFxuICAgICAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5pc19keHRyYWRlO1xuXG4gICAgICAgIGxldCBsaW1pdHNfa2V5O1xuICAgICAgICBpZiAoaXNfbXRfdHJhbnNmZXIpIHtcbiAgICAgICAgICAgIGxpbWl0c19rZXkgPSAnbGltaXRzX210NSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNfZHh0cmFkZV90cmFuc2Zlcikge1xuICAgICAgICAgICAgbGltaXRzX2tleSA9ICdsaW1pdHNfZHh0cmFkZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW1pdHNfa2V5ID0gJ2xpbWl0cyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0cmFuc2Zlcl9saW1pdCA9IGdldFByb3BlcnR5VmFsdWUoZ2V0Q3VycmVuY2llcygpLCBbXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uY3VycmVuY3ksXG4gICAgICAgICAgICAndHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cycsXG4gICAgICAgICAgICBsaW1pdHNfa2V5LFxuICAgICAgICBdKTtcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfZnJvbS5iYWxhbmNlO1xuICAgICAgICBjb25zdCBkZWNpbWFsX3BsYWNlcyA9IGdldERlY2ltYWxQbGFjZXModGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmN1cnJlbmN5KTtcbiAgICAgICAgLy8gd2UgbmVlZCAudG9GaXhlZCgpIHNvIHRoYXQgaXQgZG9lc24ndCBkaXNwbGF5IGluIHNjaWVudGlmaWMgbm90YXRpb24sIGUuZy4gMWUtOCBmb3IgY3VycmVuY2llcyB3aXRoIDggZGVjaW1hbCBwbGFjZXNcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci50cmFuc2Zlcl9saW1pdCA9IHtcbiAgICAgICAgICAgIG1heDpcbiAgICAgICAgICAgICAgICAhdHJhbnNmZXJfbGltaXQ/Lm1heCB8fCAoK2JhbGFuY2UgPj0gKHRyYW5zZmVyX2xpbWl0Py5taW4gfHwgMCkgJiYgK2JhbGFuY2UgPD0gdHJhbnNmZXJfbGltaXQ/Lm1heClcbiAgICAgICAgICAgICAgICAgICAgPyBiYWxhbmNlXG4gICAgICAgICAgICAgICAgICAgIDogdHJhbnNmZXJfbGltaXQ/Lm1heC50b0ZpeGVkKGRlY2ltYWxfcGxhY2VzKSxcbiAgICAgICAgICAgIG1pbjogdHJhbnNmZXJfbGltaXQ/Lm1pbiA/ICgrdHJhbnNmZXJfbGltaXQ/Lm1pbikudG9GaXhlZChkZWNpbWFsX3BsYWNlcykgOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBzb3J0QWNjb3VudHNUcmFuc2ZlcihyZXNwb25zZV9hY2NvdW50cykge1xuICAgICAgICBjb25zdCB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzID0gcmVzcG9uc2VfYWNjb3VudHMgfHwgKGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC50cmFuc2ZlckJldHdlZW5BY2NvdW50cygpKTtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG10NV9sb2dpbl9saXN0ID0gKGF3YWl0IHRoaXMuV1Muc3RvcmFnZS5tdDVMb2dpbkxpc3QoKSk/Lm10NV9sb2dpbl9saXN0O1xuICAgICAgICAvLyBUT0RPOiBtb3ZlIGB0cmFkaW5nUGxhdGZvcm1BY2NvdW50c0xpc3RgIHRvIGRlcml2LWFwaSB0byB1c2Ugc3RvcmFnZVxuICAgICAgICBjb25zdCBkeHRyYWRlX2FjY291bnRzX2xpc3QgPSAoYXdhaXQgdGhpcy5XUy50cmFkaW5nUGxhdGZvcm1BY2NvdW50c0xpc3QoQ0ZEX1BMQVRGT1JNUy5EWFRSQURFKSlcbiAgICAgICAgICAgID8udHJhZGluZ19wbGF0Zm9ybV9hY2NvdW50cztcblxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgbWFwcGluZyB3aGVuIEFQSSBhZGRzIG1hcmtldF90eXBlIGFuZCBzdWJfYWNjb3VudF90eXBlIHRvIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHNcbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmFjY291bnRzLm1hcChhY2NvdW50ID0+IHtcbiAgICAgICAgICAgIGlmIChhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5NVDUgJiYgQXJyYXkuaXNBcnJheShtdDVfbG9naW5fbGlzdCkgJiYgbXQ1X2xvZ2luX2xpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gYWNjb3VudF90eXBlIGluIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMgKG10NXxiaW5hcnkpXG4gICAgICAgICAgICAgICAgLy8gZ2V0cyBvdmVycmlkZGVuIGJ5IGFjY291bnRfdHlwZSBpbiBtdDVfbG9naW5fbGlzdCAoZGVtb3xyZWFsKVxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGluIGNhc2hpZXIgYWxsIHRoZXNlIGFyZSByZWFsIGFjY291bnRzLCB0aGUgbXQ1IGFjY291bnQgdHlwZSBpcyB3aGF0IHdlIHdhbnQgdG8ga2VlcFxuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kX2FjY291bnQgPSBtdDVfbG9naW5fbGlzdC5maW5kKGFjYyA9PiBhY2MubG9naW4gPT09IGFjY291bnQubG9naW5pZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZm91bmRfYWNjb3VudCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gYWNjb3VudDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmFjY291bnQsIC4uLmZvdW5kX2FjY291bnQsIGFjY291bnRfdHlwZTogQ0ZEX1BMQVRGT1JNUy5NVDUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5EWFRSQURFICYmXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShkeHRyYWRlX2FjY291bnRzX2xpc3QpICYmXG4gICAgICAgICAgICAgICAgZHh0cmFkZV9hY2NvdW50c19saXN0Lmxlbmd0aFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gYWNjb3VudF90eXBlIGluIHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMgKG10NXxiaW5hcnkpXG4gICAgICAgICAgICAgICAgLy8gZ2V0cyBvdmVycmlkZGVuIGJ5IGFjY291bnRfdHlwZSBpbiBkeHRyYWRlX2FjY291bnRzX2xpc3QgKGRlbW98cmVhbClcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBpbiBjYXNoaWVyIGFsbCB0aGVzZSBhcmUgcmVhbCBhY2NvdW50cywgdGhlIG10NSBhY2NvdW50IHR5cGUgaXMgd2hhdCB3ZSB3YW50IHRvIGtlZXBcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZF9hY2NvdW50ID0gZHh0cmFkZV9hY2NvdW50c19saXN0LmZpbmQoYWNjID0+IGFjYy5hY2NvdW50X2lkID09PSBhY2NvdW50LmxvZ2luaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kX2FjY291bnQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGFjY291bnQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5hY2NvdW50LCAuLi5mb3VuZF9hY2NvdW50LCBhY2NvdW50X3R5cGU6IENGRF9QTEFURk9STVMuRFhUUkFERSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY291bnQ7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBzb3J0IGFjY291bnRzIGFzIGZvbGxvd3M6XG4gICAgICAgIC8vIGZvciBNVDUsIHN5bnRoZXRpYywgZmluYW5jaWFsLCBmaW5hbmNpYWwgc3RwXG4gICAgICAgIC8vIGZvciBub24tTVQ1LCBmaWF0LCBjcnlwdG8gKGFscGhhYmV0aWNhbGx5IGJ5IGN1cnJlbmN5KVxuICAgICAgICAvLyBzaG91bGQgaGF2ZSBtb3JlIHRoYW4gb25lIGFjY291bnRcbiAgICAgICAgaWYgKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuYWNjb3VudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgYWNjb3VudHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFfaXNfbXQgPSBhLmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5NVDU7XG4gICAgICAgICAgICAgICAgY29uc3QgYl9pc19tdCA9IGIuYWNjb3VudF90eXBlID09PSBDRkRfUExBVEZPUk1TLk1UNTtcbiAgICAgICAgICAgICAgICBjb25zdCBhX2lzX2NyeXB0byA9ICFhX2lzX210ICYmIGlzQ3J5cHRvY3VycmVuY3koYS5jdXJyZW5jeSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYl9pc19jcnlwdG8gPSAhYl9pc19tdCAmJiBpc0NyeXB0b2N1cnJlbmN5KGIuY3VycmVuY3kpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFfaXNfZmlhdCA9ICFhX2lzX210ICYmICFhX2lzX2NyeXB0bztcbiAgICAgICAgICAgICAgICBjb25zdCBiX2lzX2ZpYXQgPSAhYl9pc19tdCAmJiAhYl9pc19jcnlwdG87XG4gICAgICAgICAgICAgICAgaWYgKGFfaXNfbXQgJiYgYl9pc19tdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYS5tYXJrZXRfdHlwZSA9PT0gJ2dhbWluZycgfHwgYS5tYXJrZXRfdHlwZSA9PT0gJ3N5bnRoZXRpYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYS5zdWJfYWNjb3VudF90eXBlID09PSAnZmluYW5jaWFsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIubWFya2V0X3R5cGUgPT09ICdnYW1pbmcnIHx8IGIubWFya2V0X3R5cGUgPT09ICdzeW50aGV0aWMnID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFfaXNfY3J5cHRvICYmIGJfaXNfY3J5cHRvKSB8fCAoYV9pc19maWF0ICYmIGJfaXNfZmlhdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuY3VycmVuY3kgPCBiLmN1cnJlbmN5ID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFfaXNfY3J5cHRvICYmIGJfaXNfbXQpIHx8IChhX2lzX2ZpYXQgJiYgYl9pc19jcnlwdG8pIHx8IChhX2lzX2ZpYXQgJiYgYl9pc19tdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYV9pc19tdCA/IC0xIDogMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFycl9hY2NvdW50cyA9IFtdO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGVkVG8oe30pOyAvLyBzZXQgc2VsZWN0ZWQgdG8gZW1wdHkgZWFjaCB0aW1lIHNvIHdlIGNhbiByZWRldGVybWluZSBpdHMgdmFsdWUgb24gcmVsb2FkXG5cbiAgICAgICAgYWNjb3VudHMuZm9yRWFjaChhY2NvdW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNmZF9wbGF0Zm9ybXMgPSB7XG4gICAgICAgICAgICAgICAgbXQ1OiB7IG5hbWU6ICdETVQ1JywgaWNvbjogJ0ljTXQ1JyB9LFxuICAgICAgICAgICAgICAgIGR4dHJhZGU6IHsgbmFtZTogJ0Rlcml2IFgnLCBpY29uOiAnSWNEeHRyYWRlJyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGlzX2NmZCA9IE9iamVjdC5rZXlzKGNmZF9wbGF0Zm9ybXMpLmluY2x1ZGVzKGFjY291bnQuYWNjb3VudF90eXBlKTtcbiAgICAgICAgICAgIGNvbnN0IGNmZF90ZXh0X2Rpc3BsYXkgPSBjZmRfcGxhdGZvcm1zW2FjY291bnQuYWNjb3VudF90eXBlXT8ubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGNmZF9pY29uX2Rpc3BsYXkgPSBgJHtjZmRfcGxhdGZvcm1zW2FjY291bnQuYWNjb3VudF90eXBlXT8uaWNvbn0tJHtnZXRDRkRBY2NvdW50KHtcbiAgICAgICAgICAgICAgICBtYXJrZXRfdHlwZTogYWNjb3VudC5tYXJrZXRfdHlwZSxcbiAgICAgICAgICAgICAgICBzdWJfYWNjb3VudF90eXBlOiBhY2NvdW50LnN1Yl9hY2NvdW50X3R5cGUsXG4gICAgICAgICAgICAgICAgcGxhdGZvcm06IGFjY291bnQuYWNjb3VudF90eXBlLFxuICAgICAgICAgICAgICAgIGlzX2V1OiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2V1LFxuICAgICAgICAgICAgfSl9YDtcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRfdGV4dF9kaXNwbGF5ID0gaXNfY2ZkXG4gICAgICAgICAgICAgICAgPyBgJHtjZmRfdGV4dF9kaXNwbGF5fSAke2dldENGREFjY291bnREaXNwbGF5KHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJrZXRfdHlwZTogYWNjb3VudC5tYXJrZXRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICBzdWJfYWNjb3VudF90eXBlOiBhY2NvdW50LnN1Yl9hY2NvdW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06IGFjY291bnQuYWNjb3VudF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgIGlzX2V1OiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2V1LFxuICAgICAgICAgICAgICAgICAgfSl9YFxuICAgICAgICAgICAgICAgIDogZ2V0Q3VycmVuY3lEaXNwbGF5Q29kZShcbiAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50LmN1cnJlbmN5ICE9PSAnZVVTRFQnID8gYWNjb3VudC5jdXJyZW5jeS50b1VwcGVyQ2FzZSgpIDogYWNjb3VudC5jdXJyZW5jeVxuICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3Qgb2JqX3ZhbHVlcyA9IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBhY2NvdW50X3RleHRfZGlzcGxheSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogYWNjb3VudC5sb2dpbmlkLFxuICAgICAgICAgICAgICAgIGJhbGFuY2U6IGFjY291bnQuYmFsYW5jZSxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogYWNjb3VudC5jdXJyZW5jeSxcbiAgICAgICAgICAgICAgICBpc19jcnlwdG86IGlzQ3J5cHRvY3VycmVuY3koYWNjb3VudC5jdXJyZW5jeSksXG4gICAgICAgICAgICAgICAgaXNfbXQ6IGFjY291bnQuYWNjb3VudF90eXBlID09PSBDRkRfUExBVEZPUk1TLk1UNSxcbiAgICAgICAgICAgICAgICBpc19keHRyYWRlOiBhY2NvdW50LmFjY291bnRfdHlwZSA9PT0gQ0ZEX1BMQVRGT1JNUy5EWFRSQURFLFxuICAgICAgICAgICAgICAgIC4uLihpc19jZmQgJiYge1xuICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybV9pY29uOiBjZmRfaWNvbl9kaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXRfdHlwZTogZ2V0Q0ZEQWNjb3VudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXRfdHlwZTogYWNjb3VudC5tYXJrZXRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yl9hY2NvdW50X3R5cGU6IGFjY291bnQuc3ViX2FjY291bnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiBhY2NvdW50LmFjY291bnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzX2V1OiB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2V1LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBzZXQgY3VycmVudCBsb2dnZWQgaW4gY2xpZW50IGFzIHRoZSBkZWZhdWx0IHRyYW5zZmVyIGZyb20gYWNjb3VudFxuICAgICAgICAgICAgaWYgKGFjY291bnQubG9naW5pZCA9PT0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5sb2dpbmlkKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgc2VsZWN0ZWQgZnJvbSBpcyBub3QgYWxsb3dlZCBhY2NvdW50XG4gICAgICAgICAgICAgICAgaWYgKGhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQob2JqX3ZhbHVlcy52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqX3ZhbHVlcy5lcnJvciA9IGdldFNlbGVjdGVkRXJyb3Iob2JqX3ZhbHVlcy52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEZyb20ob2JqX3ZhbHVlcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRW1wdHlPYmplY3QodGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90bykpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNmZXJOb3RBbGxvd2VkTG9naW5pZChvYmpfdmFsdWVzLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBzZWxlY3RlZCB0byBpcyBub3QgYWxsb3dlZCBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgIG9ial92YWx1ZXMuZXJyb3IgPSBnZXRTZWxlY3RlZEVycm9yKG9ial92YWx1ZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGZpcnN0IGF2YWlsYWJsZSBhY2NvdW50IGFzIHRoZSBkZWZhdWx0IHRyYW5zZmVyIHRvIGFjY291bnRcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkVG8ob2JqX3ZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcnJfYWNjb3VudHMucHVzaChvYmpfdmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0QWNjb3VudHMoYXJyX2FjY291bnRzKTtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0U2VsZWN0ZWRGcm9tKG9ial92YWx1ZXMpIHtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tID0gb2JqX3ZhbHVlcztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0U2VsZWN0ZWRUbyhvYmpfdmFsdWVzKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8gPSBvYmpfdmFsdWVzO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBY2NvdW50cyhhcnJfYWNjb3VudHMpIHtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0ID0gYXJyX2FjY291bnRzO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRJc1RyeVRyYW5zZmVyU3VjY2Vzc2Z1bChpc190cnlfdHJhbnNmZXJfc3VjY2Vzc2Z1bCkge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uaXNfdHJ5X3RyYW5zZmVyX3N1Y2Nlc3NmdWwgPSBpc190cnlfdHJhbnNmZXJfc3VjY2Vzc2Z1bDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNUcmFuc2ZlckNvbmZpcm0oaXNfdHJhbnNmZXJfY29uZmlybSkge1xuICAgICAgICB0aGlzLmNvbmZpZ1t0aGlzLmFjdGl2ZV9jb250YWluZXJdLmlzX3RyYW5zZmVyX2NvbmZpcm0gPSBpc190cmFuc2Zlcl9jb25maXJtO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoYW1vdW50KSB7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uYWNjb3VudF90cmFuc2Zlcl9hbW91bnQgPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzVHJhbnNmZXJTdWNjZXNzZnVsKGlzX3RyYW5zZmVyX3N1Y2Nlc3NmdWwpIHtcbiAgICAgICAgdGhpcy5jb25maWdbdGhpcy5hY3RpdmVfY29udGFpbmVyXS5pc190cmFuc2Zlcl9zdWNjZXNzZnVsID0gaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bDtcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0SXNNVDVUcmFuc2ZlckluUHJvZ3Jlc3MoaXNfbXQ1X3RyYW5zZmVyX2luX3Byb2dyZXNzKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0uaXNfbXQ1X3RyYW5zZmVyX2luX3Byb2dyZXNzID0gaXNfbXQ1X3RyYW5zZmVyX2luX3Byb2dyZXNzO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBpc01UNVRyYW5zZmVySW5Qcm9ncmVzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnW3RoaXMuYWN0aXZlX2NvbnRhaW5lcl0/LmlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcztcbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0UmVjZWlwdFRyYW5zZmVyKHsgYW1vdW50IH0pIHtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5yZWNlaXB0ID0ge1xuICAgICAgICAgICAgYW1vdW50X3RyYW5zZmVycmVkOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uQ2hhbmdlVHJhbnNmZXJGcm9tKHsgdGFyZ2V0IH0pIHtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uZXJyb3IgPSAnJztcblxuICAgICAgICBjb25zdCBhY2NvdW50cyA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdDtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRfZnJvbSA9IGFjY291bnRzLmZpbmQoYWNjb3VudCA9PiBhY2NvdW50LnZhbHVlID09PSB0YXJnZXQudmFsdWUpO1xuXG4gICAgICAgIC8vIGlmIG5ldyB2YWx1ZSBvZiBzZWxlY3RlZF9mcm9tIGlzIHRoZSBzYW1lIGFzIHRoZSBjdXJyZW50IHNlbGVjdGVkX3RvXG4gICAgICAgIC8vIHN3aXRjaCB0aGUgdmFsdWUgb2Ygc2VsZWN0ZWRfZnJvbSBhbmQgc2VsZWN0ZWRfdG9cbiAgICAgICAgaWYgKHNlbGVjdGVkX2Zyb20udmFsdWUgPT09IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8udmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VUcmFuc2ZlclRvKHsgdGFyZ2V0OiB7IHZhbHVlOiB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20udmFsdWUgfSB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIChzZWxlY3RlZF9mcm9tLmlzX210ICYmIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfbXQpIHx8XG4gICAgICAgICAgICAoc2VsZWN0ZWRfZnJvbS5pc19keHRyYWRlICYmIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfZHh0cmFkZSkgfHxcbiAgICAgICAgICAgIChzZWxlY3RlZF9mcm9tLmlzX2R4dHJhZGUgJiYgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5pc19tdCkgfHxcbiAgICAgICAgICAgIChzZWxlY3RlZF9mcm9tLmlzX210ICYmIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uaXNfZHh0cmFkZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBub3QgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tIE1UIHRvIE1UXG4gICAgICAgICAgICAvLyBub3QgYWxsb3dlZCB0byB0cmFuc2ZlciBmcm9tIER4dHJhZGUgdG8gRHh0cmFkZVxuICAgICAgICAgICAgLy8gbm90IGFsbG93ZWQgdG8gdHJhbnNmZXIgYmV0d2VlbiBNVCBhbmQgRHh0cmFkZVxuICAgICAgICAgICAgY29uc3QgZmlyc3Rfbm9uX2NmZCA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuYWNjb3VudHNfbGlzdC5maW5kKFxuICAgICAgICAgICAgICAgIGFjY291bnQgPT4gIWFjY291bnQuaXNfbXQgJiYgIWFjY291bnQuaXNfZHh0cmFkZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VUcmFuc2ZlclRvKHsgdGFyZ2V0OiB7IHZhbHVlOiBmaXJzdF9ub25fY2ZkLnZhbHVlIH0gfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRfZnJvbS5pc19jcnlwdG8gJiYgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5pc19jcnlwdG8pIHtcbiAgICAgICAgICAgIC8vIG5vdCBhbGxvd2VkIHRvIHRyYW5zZmVyIGNyeXB0byB0byBjcnlwdG9cbiAgICAgICAgICAgIGNvbnN0IGZpcnN0X2ZpYXQgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmFjY291bnRzX2xpc3QuZmluZChhY2NvdW50ID0+ICFhY2NvdW50LmlzX2NyeXB0byk7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlVHJhbnNmZXJUbyh7IHRhcmdldDogeyB2YWx1ZTogZmlyc3RfZmlhdC52YWx1ZSB9IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQoc2VsZWN0ZWRfZnJvbS52YWx1ZSkpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkX2Zyb20uZXJyb3IgPSBnZXRTZWxlY3RlZEVycm9yKHNlbGVjdGVkX2Zyb20udmFsdWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tID0gc2VsZWN0ZWRfZnJvbTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckZlZSgpO1xuICAgICAgICB0aGlzLnNldE1pbmltdW1GZWUoKTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckxpbWl0KCk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIG9uQ2hhbmdlVHJhbnNmZXJUbyh7IHRhcmdldCB9KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5lcnJvciA9ICcnO1xuXG4gICAgICAgIGNvbnN0IGFjY291bnRzID0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5hY2NvdW50c19saXN0O1xuICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvID0gYWNjb3VudHMuZmluZChhY2NvdW50ID0+IGFjY291bnQudmFsdWUgPT09IHRhcmdldC52YWx1ZSkgfHwge307XG4gICAgICAgIGlmIChoYXNUcmFuc2Zlck5vdEFsbG93ZWRMb2dpbmlkKHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8udmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLmVycm9yID0gZ2V0U2VsZWN0ZWRFcnJvcihcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLnZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0VHJhbnNmZXJGZWUoKTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc2ZlckxpbWl0KCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdFRyYW5zZmVyQmV0d2VlbkFjY291bnRzID0gYXN5bmMgKHsgYW1vdW50IH0pID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmlzX2xvZ2dlZF9pbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcblxuICAgICAgICBjb25zdCBpc19tdF90cmFuc2ZlciA9XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uaXNfbXQgfHwgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5pc19tdDtcblxuICAgICAgICBpZiAoaXNfbXRfdHJhbnNmZXIpIHRoaXMuc2V0SXNNVDVUcmFuc2ZlckluUHJvZ3Jlc3ModHJ1ZSk7XG5cbiAgICAgICAgY29uc3QgY3VycmVuY3kgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uY3VycmVuY3k7XG4gICAgICAgIGNvbnN0IHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMgPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQudHJhbnNmZXJCZXR3ZWVuQWNjb3VudHMoXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20udmFsdWUsXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLnZhbHVlLFxuICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICBhbW91bnRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNfbXRfdHJhbnNmZXIpIHRoaXMuc2V0SXNNVDVUcmFuc2ZlckluUHJvZ3Jlc3MoZmFsc2UpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmVycm9yKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBmaWF0MmNyeXB0byB0cmFuc2ZlciBsaW1pdCBlcnJvciwgd2UgbmVlZCB0byByZWZyZXNoIHRoZSBhY2NvdW50X3N0YXR1cyBmb3IgYXV0aGVudGljYXRpb25cbiAgICAgICAgICAgIGlmICh0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzLmVycm9yLmNvZGUgPT09ICdGaWF0MkNyeXB0b1RyYW5zZmVyT3ZlckxpbWl0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRfc3RhdHVzX3Jlc3BvbnNlID0gYXdhaXQgdGhpcy5XUy5hdXRob3JpemVkLmdldEFjY291bnRTdGF0dXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRfc3RhdHVzX3Jlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuc2V0QWNjb3VudFN0YXR1cyhhY2NvdW50X3N0YXR1c19yZXNwb25zZS5nZXRfYWNjb3VudF9zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHRyYW5zZmVyX2JldHdlZW5fYWNjb3VudHMuZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRSZWNlaXB0VHJhbnNmZXIoeyBhbW91bnQ6IGZvcm1hdE1vbmV5KGN1cnJlbmN5LCBhbW91bnQsIHRydWUpIH0pO1xuICAgICAgICAgICAgdHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cy5hY2NvdW50cy5mb3JFYWNoKGFjY291bnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2V0QmFsYW5jZUJ5TG9naW5JZChhY2NvdW50LmxvZ2luaWQsIGFjY291bnQuYmFsYW5jZSk7XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnQubG9naW5pZCA9PT0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2V0QmFsYW5jZVNlbGVjdGVkRnJvbShhY2NvdW50LmJhbGFuY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWNjb3VudC5sb2dpbmlkID09PSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX3RvLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2V0QmFsYW5jZVNlbGVjdGVkVG8oYWNjb3VudC5iYWxhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBhY2NvdW50cyB3YXMgbXQ1XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnQuYWNjb3VudF90eXBlID09PSBDRkRfUExBVEZPUk1TLk1UNSkge1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbdGhpcy5XUy5tdDVMb2dpbkxpc3QoKSwgdGhpcy5XUy5iYWxhbmNlQWxsKCldKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgKFttdDVfbG9naW5fbGlzdF9yZXNwb25zZSwgYmFsYW5jZV9yZXNwb25zZV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGJhbGFuY2UgZm9yIGFjY291bnQgc3dpdGNoZXIgYnkgcmVuZXdpbmcgdGhlIG10NV9sb2dpbl9saXN0IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5yZXNwb25zZU10NUxvZ2luTGlzdChtdDVfbG9naW5fbGlzdF9yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRvdGFsIGJhbGFuY2Ugc2luY2UgTVQ1IHRvdGFsIG9ubHkgY29tZXMgaW4gbm9uLXN0cmVhbSBiYWxhbmNlIGNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnNldEJhbGFuY2VPdGhlckFjY291bnRzKGJhbGFuY2VfcmVzcG9uc2UuYmFsYW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgYWNjb3VudHMgd2FzIGR4dHJhZGVcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudC5hY2NvdW50X3R5cGUgPT09IENGRF9QTEFURk9STVMuRFhUUkFERSkge1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLldTLnRyYWRpbmdQbGF0Zm9ybUFjY291bnRzTGlzdChDRkRfUExBVEZPUk1TLkRYVFJBREUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5XUy5iYWxhbmNlQWxsKCksXG4gICAgICAgICAgICAgICAgICAgIF0pLnRoZW4oKFtkeHRyYWRlX2xvZ2luX2xpc3RfcmVzcG9uc2UsIGJhbGFuY2VfcmVzcG9uc2VdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGJhbGFuY2UgZm9yIGFjY291bnQgc3dpdGNoZXIgYnkgcmVuZXdpbmcgdGhlIGR4dHJhZGVfbG9naW5fbGlzdF9yZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290X3N0b3JlLmNsaWVudC5yZXNwb25zZVRyYWRpbmdQbGF0Zm9ybUFjY291bnRzTGlzdChkeHRyYWRlX2xvZ2luX2xpc3RfcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRvdGFsIGJhbGFuY2Ugc2luY2UgRHh0cmFkZSB0b3RhbCBvbmx5IGNvbWVzIGluIG5vbi1zdHJlYW0gYmFsYW5jZSBjYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LnNldEJhbGFuY2VPdGhlckFjY291bnRzKGJhbGFuY2VfcmVzcG9uc2UuYmFsYW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQobnVsbCk7XG4gICAgICAgICAgICB0aGlzLnNldElzVHJhbnNmZXJDb25maXJtKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgIHJldHVybiB0cmFuc2Zlcl9iZXR3ZWVuX2FjY291bnRzO1xuICAgIH07XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgcmVzZXRBY2NvdW50VHJhbnNmZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0SXNUcmFuc2ZlckNvbmZpcm0oZmFsc2UpO1xuICAgIH07XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgYXN5bmMgb25Nb3VudFBheW1lbnRBZ2VudFRyYW5zZmVyKCkge1xuICAgICAgICB0aGlzLnNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHRoaXMub25SZW1vdW50ID0gdGhpcy5vbk1vdW50UGF5bWVudEFnZW50VHJhbnNmZXI7XG4gICAgICAgIGF3YWl0IHRoaXMub25Nb3VudENvbW1vbigpO1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnRfdHJhbnNmZXIudHJhbnNmZXJfbGltaXQubWluX3dpdGhkcmF3YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRQYXltZW50QWdlbnRMaXN0KCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50X3BheW1lbnRfYWdlbnQgPSBhd2FpdCB0aGlzLmdldEN1cnJlbnRQYXltZW50QWdlbnQocmVzcG9uc2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRNaW5NYXhQYXltZW50QWdlbnRUcmFuc2ZlcihjdXJyZW50X3BheW1lbnRfYWdlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q3VycmVudFBheW1lbnRBZ2VudChyZXNwb25zZV9wYXltZW50X2FnZW50KSB7XG4gICAgICAgIGNvbnN0IHBheW1lbnRfYWdlbnRfbGlzdGVkID0gcmVzcG9uc2VfcGF5bWVudF9hZ2VudC5wYXltZW50YWdlbnRfbGlzdC5saXN0LmZpbmQoXG4gICAgICAgICAgICBhZ2VudCA9PiBhZ2VudC5wYXltZW50YWdlbnRfbG9naW5pZCA9PT0gdGhpcy5yb290X3N0b3JlLmNsaWVudC5sb2dpbmlkXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRfcGF5bWVudF9hZ2VudCA9IHBheW1lbnRfYWdlbnRfbGlzdGVkIHx8IChhd2FpdCB0aGlzLmdldFBheW1lbnRBZ2VudERldGFpbHMoKSk7XG4gICAgICAgIHJldHVybiBjdXJyZW50X3BheW1lbnRfYWdlbnQgPz8ge307XG4gICAgfVxuXG4gICAgYXN5bmMgY2hlY2tJc1BheW1lbnRBZ2VudCgpIHtcbiAgICAgICAgY29uc3QgZ2V0X3NldHRpbmdzID0gKGF3YWl0IHRoaXMuV1MuYXV0aG9yaXplZC5zdG9yYWdlLmdldFNldHRpbmdzKCkpLmdldF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5zZXRJc1BheW1lbnRBZ2VudChnZXRfc2V0dGluZ3M/LmlzX2F1dGhlbnRpY2F0ZWRfcGF5bWVudF9hZ2VudCA/PyBmYWxzZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldElzUGF5bWVudEFnZW50KGlzX3BheW1lbnRfYWdlbnQpIHtcbiAgICAgICAgaWYgKCFpc19wYXltZW50X2FnZW50ICYmIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChyb3V0ZXMuY2FzaGllcl9wYV90cmFuc2ZlcikpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jb21tb24ucm91dGVUbyhyb3V0ZXMuY2FzaGllcl9kZXBvc2l0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50X3RyYW5zZmVyLmlzX3BheW1lbnRfYWdlbnQgPSAhIWlzX3BheW1lbnRfYWdlbnQ7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldE1pbk1heFBheW1lbnRBZ2VudFRyYW5zZmVyKHsgbWluX3dpdGhkcmF3YWwsIG1heF93aXRoZHJhd2FsIH0pIHtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudF90cmFuc2Zlci50cmFuc2Zlcl9saW1pdCA9IHtcbiAgICAgICAgICAgIG1pbjogbWluX3dpdGhkcmF3YWwsXG4gICAgICAgICAgICBtYXg6IG1heF93aXRoZHJhd2FsLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDb25maXJtYXRpb25QYXltZW50QWdlbnRUcmFuc2Zlcih7IGFtb3VudCwgY2xpZW50X2lkLCBjbGllbnRfbmFtZSwgZGVzY3JpcHRpb24gfSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5wYXltZW50X2FnZW50X3RyYW5zZmVyLmNvbmZpcm0gPSB7XG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICBjbGllbnRfaWQsXG4gICAgICAgICAgICBjbGllbnRfbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXF1ZXN0VHJ5UGF5bWVudEFnZW50VHJhbnNmZXIgPSBhc3luYyAoeyBhbW91bnQsIGN1cnJlbmN5LCBkZXNjcmlwdGlvbiwgdHJhbnNmZXJfdG8gfSkgPT4ge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRfYWdlbnRfdHJhbnNmZXIgPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50VHJhbnNmZXIoe1xuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHRyYW5zZmVyX3RvLFxuICAgICAgICAgICAgZHJ5X3J1bjogMSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICgrcGF5bWVudF9hZ2VudF90cmFuc2Zlci5wYXltZW50YWdlbnRfdHJhbnNmZXIgPT09IDIpIHtcbiAgICAgICAgICAgIC8vIHNob3cgY29uZmlybWF0aW9uIHNjcmVlblxuICAgICAgICAgICAgdGhpcy5zZXRDb25maXJtYXRpb25QYXltZW50QWdlbnRUcmFuc2Zlcih7XG4gICAgICAgICAgICAgICAgY2xpZW50X2lkOiB0cmFuc2Zlcl90byxcbiAgICAgICAgICAgICAgICBjbGllbnRfbmFtZTogcGF5bWVudF9hZ2VudF90cmFuc2Zlci5jbGllbnRfdG9fZnVsbF9uYW1lLFxuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRJc1RyeVRyYW5zZmVyU3VjY2Vzc2Z1bCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNZXNzYWdlKHBheW1lbnRfYWdlbnRfdHJhbnNmZXIuZXJyb3IsIHRoaXMucmVzZXRQYXltZW50QWdlbnRUcmFuc2Zlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGF5bWVudF9hZ2VudF90cmFuc2ZlcjtcbiAgICB9O1xuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFJlY2VpcHRQYXltZW50QWdlbnRUcmFuc2Zlcih7IGFtb3VudF90cmFuc2ZlcnJlZCwgY2xpZW50X2lkLCBjbGllbnRfbmFtZSB9KSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnBheW1lbnRfYWdlbnRfdHJhbnNmZXIucmVjZWlwdCA9IHtcbiAgICAgICAgICAgIGFtb3VudF90cmFuc2ZlcnJlZCxcbiAgICAgICAgICAgIGNsaWVudF9pZCxcbiAgICAgICAgICAgIGNsaWVudF9uYW1lLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXF1ZXN0UGF5bWVudEFnZW50VHJhbnNmZXIgPSBhc3luYyAoeyBhbW91bnQsIGN1cnJlbmN5LCBkZXNjcmlwdGlvbiwgdHJhbnNmZXJfdG8gfSkgPT4ge1xuICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZSgnJyk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRfYWdlbnRfdHJhbnNmZXIgPSBhd2FpdCB0aGlzLldTLmF1dGhvcml6ZWQucGF5bWVudEFnZW50VHJhbnNmZXIoe1xuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgY3VycmVuY3ksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHRyYW5zZmVyX3RvLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCtwYXltZW50X2FnZW50X3RyYW5zZmVyLnBheW1lbnRhZ2VudF90cmFuc2ZlciA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRSZWNlaXB0UGF5bWVudEFnZW50VHJhbnNmZXIoe1xuICAgICAgICAgICAgICAgIGFtb3VudF90cmFuc2ZlcnJlZDogYW1vdW50LFxuICAgICAgICAgICAgICAgIGNsaWVudF9pZDogdHJhbnNmZXJfdG8sXG4gICAgICAgICAgICAgICAgY2xpZW50X25hbWU6IHBheW1lbnRfYWdlbnRfdHJhbnNmZXIuY2xpZW50X3RvX2Z1bGxfbmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRJc1RyYW5zZmVyU3VjY2Vzc2Z1bCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWwoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRDb25maXJtYXRpb25QYXltZW50QWdlbnRUcmFuc2Zlcih7fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yTWVzc2FnZShwYXltZW50X2FnZW50X3RyYW5zZmVyLmVycm9yLCB0aGlzLnJlc2V0UGF5bWVudEFnZW50VHJhbnNmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBheW1lbnRfYWdlbnRfdHJhbnNmZXI7XG4gICAgfTtcblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICByZXNldFBheW1lbnRBZ2VudFRyYW5zZmVyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldElzVHJhbnNmZXJTdWNjZXNzZnVsKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRFcnJvck1lc3NhZ2UoJycpO1xuICAgIH07XG5cbiAgICBhY2NvdW50U3dpdGNoZXJMaXN0ZW5lcigpIHtcbiAgICAgICAgW3RoaXMuY29uZmlnLndpdGhkcmF3LmNvbnRhaW5lciwgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudC5jb250YWluZXJdLmZvckVhY2goY29udGFpbmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWZXJpZmljYXRpb24oY29udGFpbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFt0aGlzLmNvbmZpZy5kZXBvc2l0LmNvbnRhaW5lciwgdGhpcy5jb25maWcud2l0aGRyYXcuY29udGFpbmVyXS5mb3JFYWNoKGNvbnRhaW5lciA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldElmcmFtZVVybCgnJywgY29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Q2FzaGllclVybChjb250YWluZXIpO1xuICAgICAgICAgICAgdGhpcy5zZXRTZXNzaW9uVGltZW91dCh0cnVlLCBjb250YWluZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudCA9IG5ldyBDb25maWdQYXltZW50QWdlbnQoKTtcbiAgICAgICAgdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2ZlciA9IG5ldyBDb25maWdBY2NvdW50VHJhbnNmZXIoKTtcbiAgICAgICAgdGhpcy5jb25maWcucGF5bWVudF9hZ2VudF90cmFuc2ZlciA9IG5ldyBDb25maWdQYXltZW50QWdlbnRUcmFuc2ZlcigpO1xuICAgICAgICB0aGlzLmlzX3BvcHVsYXRpbmdfdmFsdWVzID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5vblJlbW91bnQoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgQGNvbXB1dGVkXG4gICAgZ2V0IGFjY291bnRfcGxhdGZvcm1faWNvbigpIHtcbiAgICAgICAgY29uc3QgcGxhdGZvcm1faWNvbiA9IHRoaXMucm9vdF9zdG9yZS5jbGllbnQuYWNjb3VudF9saXN0LmZpbmQoXG4gICAgICAgICAgICBhY2MgPT4gdGhpcy5yb290X3N0b3JlLmNsaWVudC5sb2dpbmlkID09PSBhY2MubG9naW5pZFxuICAgICAgICApLmljb247XG5cbiAgICAgICAgcmV0dXJuIHBsYXRmb3JtX2ljb247XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldENvbnZlcnRlckZyb21BbW91bnQoYW1vdW50KSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyX2Zyb21fYW1vdW50ID0gYW1vdW50O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDb252ZXJ0ZXJUb0Ftb3VudChhbW91bnQpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXJfdG9fYW1vdW50ID0gYW1vdW50O1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDb252ZXJ0ZXJGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXJfZnJvbV9lcnJvciA9IGVycm9yO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBzZXRDb252ZXJ0ZXJUb0Vycm9yKGVycm9yKSB7XG4gICAgICAgIHRoaXMuY29udmVydGVyX3RvX2Vycm9yID0gZXJyb3I7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIGFzeW5jIG9uQ2hhbmdlQ29udmVydGVyRnJvbUFtb3VudCh7IHRhcmdldCB9LCBmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSkge1xuICAgICAgICB0aGlzLnJlc2V0VGltZXIoKTtcbiAgICAgICAgaWYgKHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KHRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlRnJvbUFtb3VudCgpO1xuICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXModHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl9mcm9tX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Ftb3VudCgnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Vycm9yKCcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjY291bnRUcmFuc2ZlckFtb3VudCgnJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGUgPSBhd2FpdCB0aGlzLmdldEV4Y2hhbmdlUmF0ZShmcm9tX2N1cnJlbmN5LCB0b19jdXJyZW5jeSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjaW1hbHMgPSBnZXREZWNpbWFsUGxhY2VzKHRvX2N1cnJlbmN5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbW91bnQgPSAocmF0ZSAqIHRhcmdldC52YWx1ZSkudG9GaXhlZChkZWNpbWFscyk7XG4gICAgICAgICAgICAgICAgaWYgKCthbW91bnQgfHwgdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Ftb3VudChhbW91bnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9BbW91bnQoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlVG9BbW91bnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvRXJyb3IoJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQodGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRDb252ZXJ0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICBhc3luYyBvbkNoYW5nZUNvbnZlcnRlclRvQW1vdW50KHsgdGFyZ2V0IH0sIGZyb21fY3VycmVuY3ksIHRvX2N1cnJlbmN5KSB7XG4gICAgICAgIHRoaXMucmVzZXRUaW1lcigpO1xuICAgICAgICBpZiAodGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvQW1vdW50KHRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlVG9BbW91bnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl90b19lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUFtb3VudCgnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IoJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWNjb3VudFRyYW5zZmVyQW1vdW50KCcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF0ZSA9IGF3YWl0IHRoaXMuZ2V0RXhjaGFuZ2VSYXRlKGZyb21fY3VycmVuY3ksIHRvX2N1cnJlbmN5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWNpbWFscyA9IGdldERlY2ltYWxQbGFjZXModG9fY3VycmVuY3kpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IChyYXRlICogdGFyZ2V0LnZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzKTtcbiAgICAgICAgICAgICAgICBpZiAoK2Ftb3VudCB8fCB0aGlzLmNvbnZlcnRlcl90b19hbW91bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUZyb21BbW91bnQoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb252ZXJ0ZXJfZnJvbV9lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJc1RpbWVyVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBY2NvdW50VHJhbnNmZXJBbW91bnQoYW1vdW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Q29udmVydGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgc2V0VHJhbnNmZXJQZXJjZW50YWdlU2VsZWN0b3JSZXN1bHQoYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkX2Zyb21fY3VycmVuY3kgPSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uY3VycmVuY3k7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkX3RvX2N1cnJlbmN5ID0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF90by5jdXJyZW5jeTtcblxuICAgICAgICBpZiAoYW1vdW50ID4gMCB8fCArdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmJhbGFuY2UgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUFtb3VudChhbW91bnQpO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudCgpO1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZUNvbnZlcnRlckZyb21BbW91bnQoXG4gICAgICAgICAgICAgICAgeyB0YXJnZXQ6IHsgdmFsdWU6IGFtb3VudCB9IH0sXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRfZnJvbV9jdXJyZW5jeSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZF90b19jdXJyZW5jeVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICgrdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmJhbGFuY2UgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUFtb3VudChhbW91bnQpO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRyYW5zZmVyRnJvbUFtb3VudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNldENvbnZlcnRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xuICAgICAgICB0aGlzLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyhmYWxzZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHNldFdpdGhkcmF3UGVyY2VudGFnZVNlbGVjdG9yUmVzdWx0KGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tQW1vdW50KGFtb3VudCk7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlV2l0aGRyYXdGcm9tQW1vdW50KCk7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlQ29udmVydGVyRnJvbUFtb3VudChcbiAgICAgICAgICAgICAgICB7IHRhcmdldDogeyB2YWx1ZTogYW1vdW50IH0gfSxcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50LmN1cnJlbmN5LFxuICAgICAgICAgICAgICAgIHRoaXMucm9vdF9zdG9yZS5jbGllbnQuY3VycmVudF9maWF0X2N1cnJlbmN5IHx8ICdVU0QnXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNldENvbnZlcnRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0SXNUaW1lclZpc2libGUoZmFsc2UpO1xuICAgICAgICB0aGlzLnBlcmNlbnRhZ2VTZWxlY3RvclNlbGVjdGlvblN0YXR1cyhmYWxzZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHZhbGlkYXRlRnJvbUFtb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlX2NvbnRhaW5lciA9PT0gdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVUcmFuc2ZlckZyb21BbW91bnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVXaXRoZHJhd0Zyb21BbW91bnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICB2YWxpZGF0ZVRvQW1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVfY29udGFpbmVyID09PSB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRyYW5zZmVyVG9BbW91bnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVXaXRoZHJhd1RvQW1vdW50KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgdmFsaWRhdGVUcmFuc2ZlckZyb21BbW91bnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKGxvY2FsaXplKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkLicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNfb2ssIG1lc3NhZ2UgfSA9IHZhbGlkTnVtYmVyKHRoaXMuY29udmVydGVyX2Zyb21fYW1vdW50LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Zsb2F0JyxcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogZ2V0RGVjaW1hbFBsYWNlcyh0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnNlbGVjdGVkX2Zyb20uY3VycmVuY3kpLFxuICAgICAgICAgICAgICAgIG1pbjogdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci50cmFuc2Zlcl9saW1pdC5taW4sXG4gICAgICAgICAgICAgICAgbWF4OiB0aGlzLmNvbmZpZy5hY2NvdW50X3RyYW5zZmVyLnRyYW5zZmVyX2xpbWl0Lm1heCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFpc19vaykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgrdGhpcy5jb25maWcuYWNjb3VudF90cmFuc2Zlci5zZWxlY3RlZF9mcm9tLmJhbGFuY2UgPCArdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21FcnJvcihsb2NhbGl6ZSgnSW5zdWZmaWNpZW50IGZ1bmRzJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21FcnJvcignJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAYWN0aW9uLmJvdW5kXG4gICAgdmFsaWRhdGVUcmFuc2ZlclRvQW1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5jb252ZXJ0ZXJfdG9fYW1vdW50KSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW5jeSA9IHRoaXMuY29uZmlnLmFjY291bnRfdHJhbnNmZXIuc2VsZWN0ZWRfdG8uY3VycmVuY3k7XG4gICAgICAgICAgICBjb25zdCB7IGlzX29rLCBtZXNzYWdlIH0gPSB2YWxpZE51bWJlcih0aGlzLmNvbnZlcnRlcl90b19hbW91bnQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZmxvYXQnLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzOiBnZXREZWNpbWFsUGxhY2VzKGN1cnJlbmN5KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFpc19vaykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udmVydGVyVG9FcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJUb0Vycm9yKCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICB2YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudCgpIHtcbiAgICAgICAgbGV0IGVycm9yX21lc3NhZ2UgPSAnJztcblxuICAgICAgICBjb25zdCB7IGJhbGFuY2UsIGN1cnJlbmN5LCB3ZWJzaXRlX3N0YXR1cyB9ID0gdGhpcy5yb290X3N0b3JlLmNsaWVudDtcbiAgICAgICAgY29uc3QgbWluX3dpdGhkcmF3X2Ftb3VudCA9IHdlYnNpdGVfc3RhdHVzLmNyeXB0b19jb25maWdbY3VycmVuY3ldLm1pbmltdW1fd2l0aGRyYXdhbDtcbiAgICAgICAgY29uc3QgbWF4X3dpdGhkcmF3X2Ftb3VudCA9ICt0aGlzLm1heF93aXRoZHJhd19hbW91bnQgPiArYmFsYW5jZSA/ICtiYWxhbmNlIDogK3RoaXMubWF4X3dpdGhkcmF3X2Ftb3VudDtcblxuICAgICAgICBpZiAodGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNfb2ssIG1lc3NhZ2UgfSA9IHZhbGlkTnVtYmVyKHRoaXMuY29udmVydGVyX2Zyb21fYW1vdW50LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Zsb2F0JyxcbiAgICAgICAgICAgICAgICBkZWNpbWFsczogZ2V0RGVjaW1hbFBsYWNlcyhjdXJyZW5jeSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghaXNfb2spIGVycm9yX21lc3NhZ2UgPSBtZXNzYWdlO1xuXG4gICAgICAgICAgICBpZiAoK2JhbGFuY2UgPCArdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQpIGVycm9yX21lc3NhZ2UgPSBsb2NhbGl6ZSgnSW5zdWZmaWNpZW50IGZ1bmRzJyk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICArdGhpcy5jb252ZXJ0ZXJfZnJvbV9hbW91bnQgPCArbWluX3dpdGhkcmF3X2Ftb3VudCB8fFxuICAgICAgICAgICAgICAgICt0aGlzLmNvbnZlcnRlcl9mcm9tX2Ftb3VudCA+ICttYXhfd2l0aGRyYXdfYW1vdW50XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBlcnJvcl9tZXNzYWdlID0gKFxuICAgICAgICAgICAgICAgICAgICA8TG9jYWxpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5fZGVmYXVsdF90ZXh0PSdUaGUgYWxsb3dlZCB3aXRoZHJhdyBhbW91bnQgaXMge3ttaW5fd2l0aGRyYXdfYW1vdW50fX0gdG8ge3ttYXhfd2l0aGRyYXdfYW1vdW50fX0ge3tjdXJyZW5jeX19J1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluX3dpdGhkcmF3X2Ftb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfd2l0aGRyYXdfYW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0Q29udmVydGVyRnJvbUVycm9yKGVycm9yX21lc3NhZ2UpO1xuICAgIH1cblxuICAgIEBhY3Rpb24uYm91bmRcbiAgICB2YWxpZGF0ZVdpdGhkcmF3VG9BbW91bnQoKSB7XG4gICAgICAgIGxldCBlcnJvcl9tZXNzYWdlID0gJyc7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudF9maWF0X2N1cnJlbmN5IH0gPSB0aGlzLnJvb3Rfc3RvcmUuY2xpZW50O1xuXG4gICAgICAgIGlmICh0aGlzLmNvbnZlcnRlcl90b19hbW91bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNfb2ssIG1lc3NhZ2UgfSA9IHZhbGlkTnVtYmVyKHRoaXMuY29udmVydGVyX3RvX2Ftb3VudCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IGdldERlY2ltYWxQbGFjZXMoY3VycmVudF9maWF0X2N1cnJlbmN5KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFpc19vaykgZXJyb3JfbWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvRXJyb3IoZXJyb3JfbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgQGFjdGlvbi5ib3VuZFxuICAgIHJlc2V0Q29udmVydGVyKCkge1xuICAgICAgICB0aGlzLnNldENvbnZlcnRlckZyb21BbW91bnQoJycpO1xuICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvQW1vdW50KCcnKTtcbiAgICAgICAgdGhpcy5zZXRDb252ZXJ0ZXJGcm9tRXJyb3IoJycpO1xuICAgICAgICB0aGlzLnNldENvbnZlcnRlclRvRXJyb3IoJycpO1xuICAgICAgICB0aGlzLnNldElzVGltZXJWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5wZXJjZW50YWdlU2VsZWN0b3JTZWxlY3Rpb25TdGF0dXModHJ1ZSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImxvY2FsaXplIiwiY3JlYXRlQmFueGFQcm92aWRlciIsInN0b3JlIiwiaWNvbiIsImRhcmsiLCJsaWdodCIsIm5hbWUiLCJnZXREZXNjcmlwdGlvbiIsImdldEFsbG93ZWRSZXNpZGVuY2llcyIsImdldFBheW1lbnRJY29ucyIsImdldFNjcmlwdERlcGVuZGVuY2llcyIsImdldERlZmF1bHRGcm9tQ3VycmVuY3kiLCJnZXRGcm9tQ3VycmVuY2llcyIsImdldFRvQ3VycmVuY2llcyIsImdldFdpZGdldEh0bWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIldTIiwic2VydmljZVRva2VuIiwic2VydmljZV90b2tlbiIsInNlcnZpY2UiLCJyZWZlcnJlciIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInRoZW4iLCJyZXNwb25zZSIsImVycm9yIiwibWVzc2FnZSIsInVybCIsImJhbnhhIiwib3BlbiIsIm9uTW91bnRXaWRnZXRDb250YWluZXIiLCJzaG91bGRfc2hvd19kZXBvc2l0X2FkZHJlc3MiLCJjcmVhdGVDaGFuZ2VsbHlQcm92aWRlciIsIlVSTCIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImN1cnJlbmN5Iiwicm9vdF9zdG9yZSIsImNsaWVudCIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJ0b19jdXJyZW5jeSIsImNyZWF0ZVhhblBvb2xQcm92aWRlciIsImRlcG9zaXRfYWRkcmVzcyIsImdldEN1cnJlbmN5RGlzcGxheUNvZGUiLCJ0ZW1wbGF0ZSIsInN0cmluZyIsImNvbnRlbnQiLCJ0b19yZXBsYWNlIiwiQXJyYXkiLCJpc0FycmF5IiwicmVwbGFjZSIsInMiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJ0YWdfbmFtZSIsImF0dHJpYnV0ZXMiLCJlbCIsImRvY3VtZW50IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJhdHRyIiwidmFsdWUiLCJ0ZXh0Q29udGVudCIsImh0bWwiLCJzZXRBdHRyaWJ1dGUiLCJzdGF0aWNfaGFzaCIsImdldFN0YXRpY0hhc2giLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJQcm9taXNlQ2xhc3MiLCJwcm9taXNlIiwiY29weVRvQ2xpcGJvYXJkIiwidGV4dCIsInRleHRGaWVsZCIsImlubmVyVGV4dCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwicmVtb3ZlIiwiZXVfY291bnRyaWVzIiwiaXNFdUNvdW50cnkiLCJjb3VudHJ5IiwiZ2V0QWNjb3VudFRleHQiLCJhY2NvdW50IiwiYWNjb3VudF90ZXh0IiwiaXNfZHh0cmFkZSIsImlzX210IiwiRXJyb3JzIiwiZXJyb3JzIiwiYXR0cmlidXRlIiwiaGFzIiwiaW5kZXhPZiIsInB1c2giLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJnZXRQcmVCdWlsZERWUnMiLCJFcnJvciIsIlZhbGlkYXRvciIsImlucHV0IiwicnVsZXMiLCJlcnJvcl9jb3VudCIsInJ1bGUiLCJlcnJvcl9tZXNzYWdlIiwib3B0aW9ucyIsIm1pbiIsIm1heCIsIm5hbWUxIiwibmFtZTIiLCJhZGQiLCJydWxlT2JqZWN0IiwiZ2V0UnVsZU9iamVjdCIsInZhbGlkYXRvciIsImNvbmRpdGlvbiIsImlzX3ZhbGlkIiwiaXNfb2siLCJhZGRGYWlsdXJlIiwiY2hlY2siLCJpc19ydWxlX3N0cmluZyIsInJ1bGVfb2JqZWN0IiwiZnVuYyIsImRlZmF1bHQiLCJhY3Rpb24iLCJpbnRlcmNlcHQiLCJvYnNlcnZhYmxlIiwicmVhY3Rpb24iLCJ0b0pTIiwid2hlbiIsImlzUHJvZHVjdGlvbiIsImlzRW1wdHlPYmplY3QiLCJCYXNlU3RvcmUiLCJib3VuZCIsInByZVN3aXRjaEFjY291bnREaXNwb3NlciIsInByZV9zd2l0Y2hfYWNjb3VudF9saXN0ZW5lciIsInN3aXRjaEFjY291bnREaXNwb3NlciIsInN3aXRjaF9hY2NvdW50X2xpc3RlbmVyIiwibG9nb3V0RGlzcG9zZXIiLCJsb2dvdXRfbGlzdGVuZXIiLCJjbGllbnRJbml0RGlzcG9zZXIiLCJjbGllbnRfaW5pdF9saXN0ZW5lciIsIm5ldHdvcmtTdGF0dXNDaGFuZ2VEaXNwb3NlciIsIm5ldHdvcmtfc3RhdHVzX2NoYW5nZV9saXN0ZW5lciIsInRoZW1lQ2hhbmdlRGlzcG9zZXIiLCJ0aGVtZV9jaGFuZ2VfbGlzdGVuZXIiLCJyZWFsQWNjb3VudFNpZ251cEVuZGVkRGlzcG9zZXIiLCJyZWFsX2FjY291bnRfc2lnbnVwX2VuZGVkX2xpc3RlbmVyIiwibG9jYWxfc3RvcmFnZV9wcm9wZXJ0aWVzIiwic2Vzc2lvbl9zdG9yYWdlX3Byb3BlcnRpZXMiLCJ2YWxpZGF0aW9uX3J1bGVzIiwic3RvcmVfbmFtZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiaGFzX2xvY2FsX29yX3Nlc3Npb25fc3RvcmFnZSIsImxlbmd0aCIsInNldFZhbGlkYXRpb25SdWxlcyIsInNldHVwUmVhY3Rpb25Gb3JMb2NhbFN0b3JhZ2UiLCJzZXR1cFJlYWN0aW9uRm9yU2Vzc2lvblN0b3JhZ2UiLCJyZXRyaWV2ZUZyb21TdG9yYWdlIiwicHJvcGVydGllcyIsInNuYXBzaG90IiwicmVkdWNlIiwicmVzdWx0IiwicCIsImFzc2lnbiIsIm1hcCIsImkiLCJzYXZlVG9TdG9yYWdlIiwiU1RPUkFHRVMiLCJMT0NBTF9TVE9SQUdFIiwiU0VTU0lPTl9TVE9SQUdFIiwic3RvcmFnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRTbmFwc2hvdCIsImtleSIsInVuZGVmaW5lZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJzZXNzaW9uU3RvcmFnZSIsImxvY2FsX3N0b3JhZ2Vfc25hcHNob3QiLCJwYXJzZSIsImdldEl0ZW0iLCJzZXNzaW9uX3N0b3JhZ2Vfc25hcHNob3QiLCJrIiwicHJvcGVydHlOYW1lIiwibWVzc2FnZXMiLCJpc19kaWZmZXJlbnQiLCJ2YWxpZGF0aW9uX2Vycm9ycyIsImZpbHRlciIsIngiLCJjb25jYXQiLCJhZGRSdWxlIiwicHJvcGVydHkiLCJjaGFuZ2UiLCJ2YWxpZGF0ZVByb3BlcnR5IiwibmV3VmFsdWUiLCJ0cmlnZ2VyIiwiaW5wdXRzIiwiaXNQYXNzZWQiLCJzZXRWYWxpZGF0aW9uRXJyb3JNZXNzYWdlcyIsImdldCIsImxpc3RlbmVyIiwic3dpdGNoX2Jyb2FkY2FzdCIsInN3aXRjaEVuZFNpZ25hbCIsIm9uU3dpdGNoQWNjb3VudCIsImNvbnNvbGUiLCJwcmVfc3dpdGNoX2Jyb2FkY2FzdCIsInNldFByZVN3aXRjaEFjY291bnQiLCJvblByZVN3aXRjaEFjY291bnQiLCJoYXNfbG9nZ2VkX291dCIsInNldExvZ291dCIsIm9uTG9nb3V0IiwiaW5pdGlhbGl6ZWRfYnJvYWRjYXN0Iiwic2V0SW5pdGlhbGl6ZWQiLCJvbkNsaWVudEluaXQiLCJjb21tb24iLCJpc19uZXR3b3JrX29ubGluZSIsImlzX29ubGluZSIsInVpIiwiaXNfZGFya19tb2RlX29uIiwiaGFzX3JlYWxfYWNjb3VudF9zaWdudXBfZW5kZWQiLCJzZXRSZWFsQWNjb3VudFNpZ251cEVuZCIsIm9uUmVhbEFjY291bnRTaWdudXBFbmQiLCJkaXNwb3NlUHJlU3dpdGNoQWNjb3VudCIsImRpc3Bvc2VTd2l0Y2hBY2NvdW50IiwiZGlzcG9zZUxvZ291dCIsImRpc3Bvc2VDbGllbnRJbml0IiwiZGlzcG9zZU5ldHdvcmtTdGF0dXNDaGFuZ2UiLCJkaXNwb3NlVGhlbWVDaGFuZ2UiLCJkaXNwb3NlUmVhbEFjY291bnRTaWdudXBFbmQiLCJsb2dpbmlkIiwicmVhY3Rpb25zIiwiYWN0IiwicGFydGlhbF9mZXRjaF90aW1lIiwiZnJlZXplIiwiU3ltYm9sIiwiY29tcHV0ZWQiLCJnZXRLZWJhYkNhc2UiLCJpc0NyeXB0b2N1cnJlbmN5Iiwicm91dGVzIiwid2Vic2l0ZVVybCIsIk9ucmFtcFByb3ZpZGVycyIsIk9uUmFtcFN0b3JlIiwic2hhbGxvdyIsInJlZiIsImRlcG9zaXRfYWRkcmVzc19yZWYiLCJzZXRPbnJhbXBQcm92aWRlcnMiLCJpc192aXJ0dWFsIiwiZmlsdGVyZWRfb25yYW1wX3Byb3ZpZGVycyIsIm9ucmFtcF9wcm92aWRlcnMiLCJwcm92aWRlciIsInRvX2N1cnJlbmNpZXMiLCJhbGxvd2VkX3Jlc2lkZW5jaWVzIiwicmVzaWRlbmNlIiwic2hvdWxkX3Nob3dfd2lkZ2V0Iiwic2VsZWN0ZWRfcHJvdmlkZXIiLCJzaG91bGRfc2hvd19kaWFsb2ciLCJhcGlfZXJyb3IiLCJkaXNwb3NlVGhpcmRQYXJ0eUpzUmVhY3Rpb24iLCJkZXBlbmRlbmNpZXMiLCJsb2FkanMiLCJzY3JpcHRfbmFtZSIsImlzRGVmaW5lZCIsIndhcm4iLCJzZXRTZWxlY3RlZFByb3ZpZGVyIiwiZGlzcG9zZUdldFdpZGdldEh0bWxSZWFjdGlvbiIsImlzX3JlcXVlc3Rpbmdfd2lkZ2V0X2h0bWwiLCJzZXRJc1JlcXVlc3RpbmdXaWRnZXRIdG1sIiwid2lkZ2V0X2h0bWwiLCJzZXRXaWRnZXRIdG1sIiwic2V0U2hvdWxkU2hvd1dpZGdldCIsInNldFdpZGdldEVycm9yIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNlbGVjdGlvbnMiLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIm5hdmlnYXRvciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInNldElzRGVwb3NpdEFkZHJlc3NQb3BvdmVyT3BlbiIsInNldFRpbWVvdXQiLCJwb2xsQXBpRm9yRGVwb3NpdEFkZHJlc3MiLCJjYXNoaWVyX2RlcG9zaXQiLCJzdWJzdHJpbmciLCJzaG91bGRfYWxsb3dfZW1wdHlfYWRkcmVzcyIsInNldElzRGVwb3NpdEFkZHJlc3NMb2FkaW5nIiwic2V0QXBpRXJyb3IiLCJkZXBvc2l0X2FkZHJlc3NfaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImdldERlcG9zaXRBZGRyZXNzRnJvbUFwaSIsIm1vZHVsZXMiLCJjYXNoaWVyIiwiYXV0aG9yaXplZCIsInR5cGUiLCJzaG91bGRfY2xlYXJfaW50ZXJ2YWwiLCJhZGRyZXNzIiwiZGVwb3NpdCIsInNldERlcG9zaXRBZGRyZXNzIiwiY2xlYXJJbnRlcnZhbCIsInNldERlcG9zaXRBZGRyZXNzUmVmIiwiY29weV9pY29uX3JlZiIsImlzX2xvYWRpbmciLCJpc19kZXBvc2l0X2FkZHJlc3NfbG9hZGluZyIsImlzX29wZW4iLCJpc19kZXBvc2l0X2FkZHJlc3NfcG9wb3Zlcl9vcGVuIiwiaXNfb25yYW1wX21vZGFsX29wZW4iLCJzZXRJc09uUmFtcE1vZGFsT3BlbiIsInNob3VsZF9zaG93Iiwic2xpY2UiLCJ3aWRnZXRfZXJyb3IiLCJUcmFuc2FjdGlvbkhpc3RvcnlTdG9yZSIsInRyYW5zYWN0aW9ucyIsInRyYW5zYWN0aW9uIiwiY3J5cHRvX3RyYW5zYWN0aW9ucyIsImZpbmRJbmRleCIsImNyeXB0byIsImlkIiwic29ydENyeXB0b1RyYW5zYWN0aW9ucyIsInNvcnQiLCJhIiwiYiIsInN1Ym1pdF9kYXRlIiwic3Vic2NyaWJlQ2FzaGllclBheW1lbnRzIiwiY2FzaGllcl9wYXltZW50cyIsInVwZGF0ZUNyeXB0b1RyYW5zYWN0aW9ucyIsInN3aXRjaGVkIiwiaXNfY3J5cHRvIiwic2V0TG9hZGluZyIsInVuc3Vic2NyaWJlQ3J5cHRvVHJhbnNhY3Rpb25zIiwiZ2V0Q3J5cHRvVHJhbnNhY3Rpb25zIiwiY2FzaGllclBheW1lbnRzIiwidHJhbnNhY3Rpb25fdHlwZSIsInNldENyeXB0b1RyYW5zYWN0aW9uc0hpc3RvcnkiLCJ0cmFuc2FjdGlvbl9pZCIsImNhbmNlbENyeXB0b1RyYW5zYWN0aW9uIiwic2V0U2VsZWN0ZWRDcnlwdG9UcmFuc2FjdGlvbklkIiwic2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNDYW5jZWxNb2RhbFZpc2libGUiLCJzZWxlY3RlZF9jcnlwdG9fdHJhbnNhY3Rpb25faWQiLCJpc192aXNpYmxlIiwiaXNfY3J5cHRvX3RyYW5zYWN0aW9uc19jYW5jZWxfbW9kYWxfdmlzaWJsZSIsInN0YXR1cyIsInNlbGVjdGVkX2NyeXB0b19zdGF0dXMiLCJkZXNjcmlwdGlvbiIsInNlbGVjdGVkX2NyeXB0b19zdGF0dXNfZGVzY3JpcHRpb24iLCJpc19jcnlwdG9fdHJhbnNhY3Rpb25zX3N0YXR1c19tb2RhbF92aXNpYmxlIiwic2V0U2VsZWN0ZWRDcnlwdG9TdGF0dXNEZXNjcmlwdGlvbiIsInNldFNlbGVjdGVkQ3J5cHRvU3RhdHVzIiwic2V0SXNDcnlwdG9UcmFuc2FjdGlvbnNTdGF0dXNNb2RhbFZpc2libGUiLCJpc19jcnlwdG9fdHJhbnNhY3Rpb25zX3Zpc2libGUiLCJBY2NvdW50UHJvbXB0RGlhbG9nU3RvcmUiLCJuZXh0X2xvY2F0aW9uIiwiY3VycmVudF9sb2NhdGlvbiIsImlzX2NvbmZpcm1lZCIsImxhc3RfbG9jYXRpb24iLCJoYXNfZmlhdF9hY2NvdW50IiwiY29uZmlnIiwiYWNjb3VudF90cmFuc2ZlciIsImFjY291bnRzX2xpc3QiLCJzb21lIiwiZG9Td2l0Y2giLCJub25fY3J5cHRvX2FjY291bnRzIiwic3dpdGNoQWNjb3VudCIsInNldElzRGVwb3NpdCIsInJvdXRlVG8iLCJFcnJvckRpYWxvZ1N0b3JlIiwic2V0U2hvdWxkU2hvdyIsIlJlYWN0IiwiUHJvcFR5cGVzIiwiSWNvbiIsIkNvdW50ZXIiLCJDYXNoaWVyTm90aWZpY2F0aW9ucyIsInAycF9ub3RpZmljYXRpb25fY291bnQiLCJwcm9wVHlwZXMiLCJudW1iZXIiLCJmb3JtYXRNb25leSIsImdldEN1cnJlbmNpZXMiLCJnZXREZWNpbWFsUGxhY2VzIiwiZ2V0TWluV2l0aGRyYXdhbCIsImdldENGREFjY291bnREaXNwbGF5IiwiZ2V0Q0ZEQWNjb3VudCIsImdldFByb3BlcnR5VmFsdWUiLCJ2YWxpZE51bWJlciIsIkNGRF9QTEFURk9STVMiLCJMb2NhbGl6ZSIsIkFjY291bnRQcm9tcHREaWFsb2ciLCJFcnJvckRpYWxvZyIsImhhc1RyYW5zZmVyTm90QWxsb3dlZExvZ2luaWQiLCJzdGFydHNXaXRoIiwiZ2V0U2VsZWN0ZWRFcnJvciIsInNlbGVjdGVkX3ZhbHVlIiwiaXNfZnJvbV9hY2NvdW50IiwiQ29uZmlnIiwiY29udGFpbmVyIiwiaXNfc2Vzc2lvbl90aW1lb3V0Iiwib25JZnJhbWVMb2FkZWQiLCJ0aW1lb3V0X3Nlc3Npb24iLCJDb25maWdFcnJvciIsIkNvbmZpZ1BheW1lbnRBZ2VudCIsImxpc3QiLCJhY3RpdmVfdGFiX2luZGV4IiwiQ29uZmlnVmVyaWZpY2F0aW9uIiwiQ29uZmlnUGF5bWVudEFnZW50VHJhbnNmZXIiLCJDb25maWdBY2NvdW50VHJhbnNmZXIiLCJiYWxhbmNlIiwiZmluZCIsImFjYyIsInNlbGVjdGVkX2Zyb20iLCJzZWxlY3RlZF90byIsIkNvbmZpZ1dpdGhkcmF3IiwiaXNfYnV0dG9uX2NsaWNrZWQiLCJ0aW1lb3V0X2J1dHRvbiIsIkNhc2hpZXJTdG9yZSIsImFjdGl2ZV9jb250YWluZXIiLCJvblJlbW91bnQiLCJpc19wb3B1bGF0aW5nX3ZhbHVlcyIsImNvbnRhaW5lcnMiLCJ3aXRoZHJhdyIsIm1hcF9hY3Rpb24iLCJwYXltZW50X2FnZW50IiwicmVxdWVzdFRyYW5zZmVyQmV0d2VlbkFjY291bnRzIiwiYW1vdW50IiwiaXNfbG9nZ2VkX2luIiwic2V0RXJyb3JNZXNzYWdlIiwiaXNfbXRfdHJhbnNmZXIiLCJzZXRJc01UNVRyYW5zZmVySW5Qcm9ncmVzcyIsInRyYW5zZmVyQmV0d2VlbkFjY291bnRzIiwidHJhbnNmZXJfYmV0d2Vlbl9hY2NvdW50cyIsImNvZGUiLCJnZXRBY2NvdW50U3RhdHVzIiwiYWNjb3VudF9zdGF0dXNfcmVzcG9uc2UiLCJzZXRBY2NvdW50U3RhdHVzIiwiZ2V0X2FjY291bnRfc3RhdHVzIiwic2V0UmVjZWlwdFRyYW5zZmVyIiwiYWNjb3VudHMiLCJzZXRCYWxhbmNlQnlMb2dpbklkIiwic2V0QmFsYW5jZVNlbGVjdGVkRnJvbSIsInNldEJhbGFuY2VTZWxlY3RlZFRvIiwiYWNjb3VudF90eXBlIiwiTVQ1IiwiYWxsIiwibXQ1TG9naW5MaXN0IiwiYmFsYW5jZUFsbCIsIm10NV9sb2dpbl9saXN0X3Jlc3BvbnNlIiwiYmFsYW5jZV9yZXNwb25zZSIsInJlc3BvbnNlTXQ1TG9naW5MaXN0Iiwic2V0QmFsYW5jZU90aGVyQWNjb3VudHMiLCJEWFRSQURFIiwidHJhZGluZ1BsYXRmb3JtQWNjb3VudHNMaXN0IiwiZHh0cmFkZV9sb2dpbl9saXN0X3Jlc3BvbnNlIiwicmVzcG9uc2VUcmFkaW5nUGxhdGZvcm1BY2NvdW50c0xpc3QiLCJzZXRBY2NvdW50VHJhbnNmZXJBbW91bnQiLCJzZXRJc1RyYW5zZmVyQ29uZmlybSIsImF0dGFjaENhc2hpZXJUb01lbnUiLCJoYXNfc2V0X2N1cnJlbmN5IiwiY2hhbmdlU2V0Q3VycmVuY3lNb2RhbFRpdGxlIiwib25yYW1wIiwiYWNjb3VudF9wcm9tcHRfZGlhbG9nIiwiZXJyb3JfZGlhbG9nIiwidHJhbnNhY3Rpb25faGlzdG9yeSIsImluaXQiLCJmaWx0ZXJlZF9saXN0IiwiYWdlbnRzIiwiYWxsX3BheW1lbnRfYWdlbnRfbGlzdCIsInBheW1lbnRhZ2VudF9saXN0IiwicGF5bWVudF9hZ2VudF90cmFuc2ZlciIsImlzX3BheW1lbnRfYWdlbnQiLCJpc19wMnBfdmlzaWJsZSIsImlzX2V1IiwiaXNfcDJwX3Jlc3RyaWN0ZWQiLCJwMnBfYWR2ZXJ0aXNlcl9lcnJvciIsImhhc191c2RfY3VycmVuY3kiLCJhY2NvdW50X2xpc3QiLCJ0aXRsZSIsImhhc191c2VyX2ZpYXRfY3VycmVuY3kiLCJzaG93X3AycF9pbl9jYXNoaWVyX2RlZmF1bHQiLCJzZXRIYXNTZXRDdXJyZW5jeSIsIm1lbnUiLCJhdHRhY2giLCJsaW5rX3RvIiwib25DbGljayIsInRvZ2dsZVNldEN1cnJlbmN5TW9kYWwiLCJsb2dpbl9vbmx5IiwidXBkYXRlIiwiaGFzX2FjdGl2ZV9yZWFsX2FjY291bnQiLCJzaG91bGRfc2V0X2N1cnJlbmN5X21vZGFsX3RpdGxlX2NoYW5nZSIsInNldElzQ2FzaGllckRlZmF1bHQiLCJyZXNldElzQ29uZmlybWVkIiwiZ2V0QWxsUGF5bWVudEFnZW50TGlzdCIsInBheW1lbnRfYWdlbnRfbGlzdCIsInNldEFsbFBheW1lbnRBZ2VudExpc3QiLCJpc193aXRoZHJhd19jb25maXJtZWQiLCJzZXRXaXRoZHJhd0Ftb3VudCIsImNvbnZlcnRlcl9mcm9tX2Ftb3VudCIsInZlcmlmaWNhdGlvbiIsImNsZWFyVmVyaWZpY2F0aW9uIiwid2l0aGRyYXdfYW1vdW50IiwicGVyY2VudGFnZSIsInRvRml4ZWQiLCJzaG91bGRfcGVyY2VudGFnZV9yZXNldCIsInZlcmlmaWNhdGlvbl9jb2RlIiwiY3J5cHRvV2l0aGRyYXciLCJibG9ja2NoYWluX2FkZHJlc3MiLCJyZXNldFdpdGhyYXdGb3JtIiwic2V0SXNXaXRoZHJhd0NvbmZpcm1lZCIsInNldENvbnZlcnRlckZyb21FcnJvciIsImRyeV9ydW4iLCJzYXZlV2l0aGRyYXciLCJzZXRCbG9ja2NoYWluQWRkcmVzcyIsInNldENvbnZlcnRlckZyb21BbW91bnQiLCJzZXRDb252ZXJ0ZXJUb0Ftb3VudCIsImlzX2RlcG9zaXQiLCJzaG91bGRfc2hvd19hbGxfYXZhaWxhYmxlX2N1cnJlbmNpZXMiLCJpc19jYXNoaWVyX2RlZmF1bHQiLCJ0YXJnZXQiLCJkZXBvc2l0X3RhcmdldCIsImFjY291bnRTd2l0Y2hlckxpc3RlbmVyIiwic2V0QWN0aXZlVGFiSW5kZXgiLCJzZW5kVmVyaWZpY2F0aW9uRW1haWwiLCJnZXRBZHZlcnRpemVyRXJyb3IiLCJjaGVja1AycFN0YXR1cyIsImNoZWNrMTBrTGltaXQiLCJpc19wYXltZW50X2FnZW50X3Zpc2libGUiLCJmaWx0ZXJQYXltZW50QWdlbnRMaXN0Iiwid2FpdCIsInJlc2V0TGFzdExvY2F0aW9uIiwicDJwQWR2ZXJ0aXNlckluZm8iLCJhZHZlcnRpc2VyX2luZm8iLCJzZXRQMnBBZHZlcnRpc2VyRXJyb3IiLCJhZHZlcnRpc2VyX2Vycm9yIiwic2V0SXNQMnBWaXNpYmxlIiwic2hvdWxkX3JlbW91bnQiLCJvbk1vdW50Q29tbW9uIiwic2V0UGF5bWVudEFnZW50TGlzdCIsImNoZWNrSXNQYXltZW50QWdlbnQiLCJzb3J0QWNjb3VudHNUcmFuc2ZlciIsImlzX29ucmFtcF90YWJfdmlzaWJsZSIsInBhdGhuYW1lIiwiZW5kc1dpdGgiLCJjYXNoaWVyX29ucmFtcCIsImNhc2hpZXJfY3J5cHRvX3RyYW5zYWN0aW9ucyIsInNldElzQ3J5cHRvVHJhbnNhY3Rpb25zVmlzaWJsZSIsIm9uTW91bnQiLCJjYXNoaWVyX3JvdXRlX3RhYl9pbmRleCIsInN0clJlZ0V4cCIsInRlc3QiLCJyZXNwb25zZV9jYXNoaWVyIiwiaGFuZGxlQ2FzaGllckVycm9yIiwic2V0U2Vzc2lvblRpbWVvdXQiLCJjbGVhclRpbWVvdXRDYXNoaWVyVXJsIiwib25Nb3VudFdpdGhkcmF3IiwiY3VycmVudF9jb250YWluZXIiLCJzZXRDb250YWluZXJIZWlnaHQiLCJjaGVja0lmcmFtZUxvYWRlZCIsInNldElmcmFtZVVybCIsInNldFRpbWVvdXRDYXNoaWVyVXJsIiwibm90aWZpY2F0aW9uX2NvdW50IiwiY2FzaGllcl9wMnAiLCJpc19zd2l0Y2hpbmciLCJvbk1vdW50RGVwb3NpdCIsImFjY291bnRfc3RhdHVzIiwic3RhdHVzX25hbWUiLCJjYXNoaWVyX3ZhbGlkYXRpb24iLCJ2YWxpZGF0aW9uIiwiaXNfYXV0aGVudGljYXRpb25fbmVlZGVkIiwiaXNfdG5jX25lZWRlZCIsImlzX2ZpbmFuY2lhbF9hY2NvdW50IiwiaXNfZmluYW5jaWFsX2luZm9ybWF0aW9uX2luY29tcGxldGUiLCJpc190cmFkaW5nX2V4cGVyaWVuY2VfaW5jb21wbGV0ZSIsIm10NV9sb2dpbl9saXN0IiwiaXNfZGVwb3NpdF9sb2NrIiwibmVlZF9hdXRoZW50aWNhdGlvbiIsImlzX2Fza19hdXRoZW50aWNhdGlvbiIsIm5lZWRfZmluYW5jaWFsX2Fzc2Vzc21lbnQiLCJuZWVkX3RuYyIsIml0ZW0iLCJzdWJfYWNjb3VudF90eXBlIiwiaXNfYXNrX2ZpbmFuY2lhbF9yaXNrX2FwcHJvdmFsIiwiYXV0aGVudGljYXRpb24iLCJuZWVkX3BvaSIsIm5lZWRzX3ZlcmlmaWNhdGlvbiIsImlzX3dpdGhkcmF3YWxfbG9jayIsIm1heF93aXRoZHJhd19hbW91bnQiLCJnZXRMaW1pdHMiLCJnZXRfbGltaXRzIiwicmVtYWluZGVyIiwic2V0TWF4V2l0aGRyYXdBbW91bnQiLCJtaW5fd2l0aGRyYXdhbCIsImlzX2xpbWl0X3JlYWNoZWQiLCJzZXQxMGtMaW1pdGF0aW9uIiwiaXNfMTBrX3dpdGhkcmF3YWxfbGltaXRfcmVhY2hlZCIsInJlbW92ZU9uSWZyYW1lTG9hZGVkIiwiZSIsIm9yaWdpbiIsImlzX21vYmlsZSIsImlubmVySGVpZ2h0IiwiYmluZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaWZyYW1lX3VybCIsInNldFZlcmlmaWNhdGlvbkNvZGUiLCJoZWlnaHQiLCJpZnJhbWVfaGVpZ2h0Iiwib25DbGlja0J1dHRvbiIsImlzX3Nob3dfZnVsbF9wYWdlIiwiaXNfdmVyaWZpY2F0aW9uX2Vycm9yIiwiZXJyb3Jfb2JqZWN0IiwiZmllbGRzIiwiZGV0YWlscyIsImlzX2Fza191a19mdW5kc19wcm90ZWN0aW9uIiwiaXNfc2VsZl9leGNsdXNpb25fbWF4X3R1cm5vdmVyX3NldCIsImNvbmZpZ19uYW1lIiwic2VuZCIsInVrZ2NfZnVuZHNfcHJvdGVjdGlvbiIsInRuY19hcHByb3ZhbCIsInNldEVycm9yQ29uZmlnIiwicmVsb2FkIiwiaXNfc2Vzc2lvbl90aW1lX291dCIsImlzX2VtYWlsX3NlbnQiLCJpc19yZXNlbmRfY2xpY2tlZCIsInJlc2VuZF90aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0VmVyaWZpY2F0aW9uIiwiZW1haWwiLCJzZXRWZXJpZmljYXRpb25CdXR0b25DbGlja2VkIiwid2l0aGRyYXdhbF90eXBlIiwidmVyaWZ5RW1haWwiLCJyZXNwb25zZV92ZXJpZnlfZW1haWwiLCJyZXNldFBheW1lbnRBZ2VudCIsInNldFZlcmlmaWNhdGlvbkVtYWlsU2VudCIsInNldFRpbWVvdXRWZXJpZmljYXRpb24iLCJzZXRDb3VudERvd25SZXNlbmRWZXJpZmljYXRpb24iLCJzZXRWZXJpZmljYXRpb25SZXNlbmRUaW1lb3V0IiwicmVzZW5kX2ludGVydmFsIiwic2V0VmVyaWZpY2F0aW9uUmVzZW5kQ2xpY2tlZCIsImlzX3RpbWVyX3Zpc2libGUiLCJzZXRJc1RpbWVyVmlzaWJsZSIsImZyb21fY3VycmVuY3kiLCJleGNoYW5nZV9yYXRlcyIsImJhc2VfY3VycmVuY3kiLCJyYXRlcyIsIm9uTW91bnRQYXltZW50QWdlbnRMaXN0IiwicGF5bWVudEFnZW50TGlzdCIsImFsbFBheW1lbnRBZ2VudExpc3QiLCJwYXltZW50QWdlbnREZXRhaWxzIiwicGF5bWVudGFnZW50X2RldGFpbHMiLCJiYW5rIiwic3VwcG9ydGVkX2JhbmtfZXhpc3RzIiwic3VwcG9ydGVkX2JhbmtzIiwic3VwcG9ydGVkX2JhbmsiLCJwYV9saXN0IiwiZ2V0UGF5bWVudEFnZW50TGlzdCIsInBob25lcyIsInBob25lX251bWJlcnMiLCJ0ZWxlcGhvbmUiLCJzdXBwb3J0ZWRfcGF5bWVudF9tZXRob2RzIiwidXJscyIsInN1cHBvcnRlZF9iYW5rc19hcnJheSIsInBheW1lbnRfbWV0aG9kIiwiYWRkU3VwcG9ydGVkQmFuayIsInNvcnRTdXBwb3J0ZWRCYW5rcyIsImNhc2hpZXJfcGEiLCJwYXJzZUludCIsInNlbGVjdGVkX2JhbmsiLCJvbk1vdW50UGF5bWVudEFnZW50V2l0aGRyYXciLCJzZXRJc1dpdGhkcmF3Iiwic2V0SXNXaXRoZHJhd1N1Y2Nlc3NmdWwiLCJzZXRSZWNlaXB0IiwiYWRkUGF5bWVudEFnZW50IiwiaXNfd2l0aGRyYXciLCJpc190cnlfd2l0aGRyYXdfc3VjY2Vzc2Z1bCIsImlzX3dpdGhkcmF3X3N1Y2Nlc3NmdWwiLCJwYXltZW50X2FnZW50X25hbWUiLCJjb25maXJtIiwiYW1vdW50X3RyYW5zZmVycmVkIiwicGF5bWVudF9hZ2VudF9lbWFpbCIsInBheW1lbnRfYWdlbnRfaWQiLCJwYXltZW50X2FnZW50X3Bob25lIiwicGF5bWVudF9hZ2VudF91cmwiLCJyZWNlaXB0IiwicGF5bWVudGFnZW50X2xvZ2luaWQiLCJtYXhfd2l0aGRyYXdhbCIsInBob25lIiwicGF5bWVudEFnZW50V2l0aGRyYXciLCJwYXltZW50X2FnZW50X3dpdGhkcmF3IiwicGF5bWVudGFnZW50X3dpdGhkcmF3Iiwic2VsZWN0ZWRfYWdlbnQiLCJhZ2VudCIsInNldENvbmZpcm1hdGlvbiIsInNldElzVHJ5V2l0aGRyYXdTdWNjZXNzZnVsIiwib25Nb3VudEFjY291bnRUcmFuc2ZlciIsImhhc191cGRhdGVkX2FjY291bnRfYmFsYW5jZSIsImhhc19ub19hY2NvdW50c19iYWxhbmNlIiwiYWN0aXZlX2FjY291bnRzIiwic2V0SGFzTm9BY2NvdW50c0JhbGFuY2UiLCJjYW5Eb0FjY291bnRUcmFuc2ZlciIsInNldFRyYW5zZmVyRmVlIiwic2V0TWluaW11bUZlZSIsInNldFRyYW5zZmVyTGltaXQiLCJjZmRfdHJhbnNmZXJfdG9fbG9naW5faWQiLCJyZW1vdmVJdGVtIiwib2JqX3ZhbHVlcyIsInNldFNlbGVjdGVkVG8iLCJjYW5fdHJhbnNmZXIiLCJzZXRIYXNOb0FjY291bnQiLCJoYXNfbm9fYWNjb3VudCIsInRyYW5zZmVyX2ZlZSIsImRlY2ltYWxzIiwibWluaW11bV9mZWUiLCJNYXRoIiwicG93IiwiaXNfZHh0cmFkZV90cmFuc2ZlciIsImxpbWl0c19rZXkiLCJ0cmFuc2Zlcl9saW1pdCIsImRlY2ltYWxfcGxhY2VzIiwicmVzcG9uc2VfYWNjb3VudHMiLCJ0cmFkaW5nX3BsYXRmb3JtX2FjY291bnRzIiwiZHh0cmFkZV9hY2NvdW50c19saXN0IiwiZm91bmRfYWNjb3VudCIsImxvZ2luIiwiYWNjb3VudF9pZCIsImFfaXNfbXQiLCJiX2lzX210IiwiYV9pc19jcnlwdG8iLCJiX2lzX2NyeXB0byIsImFfaXNfZmlhdCIsImJfaXNfZmlhdCIsIm1hcmtldF90eXBlIiwiYXJyX2FjY291bnRzIiwiY2ZkX3BsYXRmb3JtcyIsIm10NSIsImR4dHJhZGUiLCJpc19jZmQiLCJjZmRfdGV4dF9kaXNwbGF5IiwiY2ZkX2ljb25fZGlzcGxheSIsInBsYXRmb3JtIiwiYWNjb3VudF90ZXh0X2Rpc3BsYXkiLCJ0b1VwcGVyQ2FzZSIsInBsYXRmb3JtX2ljb24iLCJzZXRTZWxlY3RlZEZyb20iLCJzZXRBY2NvdW50cyIsImlzX3RyeV90cmFuc2Zlcl9zdWNjZXNzZnVsIiwiaXNfdHJhbnNmZXJfY29uZmlybSIsImFjY291bnRfdHJhbnNmZXJfYW1vdW50IiwiaXNfdHJhbnNmZXJfc3VjY2Vzc2Z1bCIsImlzX210NV90cmFuc2Zlcl9pbl9wcm9ncmVzcyIsIm9uQ2hhbmdlVHJhbnNmZXJUbyIsImZpcnN0X25vbl9jZmQiLCJmaXJzdF9maWF0Iiwib25Nb3VudFBheW1lbnRBZ2VudFRyYW5zZmVyIiwiZ2V0Q3VycmVudFBheW1lbnRBZ2VudCIsImN1cnJlbnRfcGF5bWVudF9hZ2VudCIsInNldE1pbk1heFBheW1lbnRBZ2VudFRyYW5zZmVyIiwicmVzcG9uc2VfcGF5bWVudF9hZ2VudCIsInBheW1lbnRfYWdlbnRfbGlzdGVkIiwiZ2V0UGF5bWVudEFnZW50RGV0YWlscyIsImdldFNldHRpbmdzIiwiZ2V0X3NldHRpbmdzIiwic2V0SXNQYXltZW50QWdlbnQiLCJpc19hdXRoZW50aWNhdGVkX3BheW1lbnRfYWdlbnQiLCJjYXNoaWVyX3BhX3RyYW5zZmVyIiwiY2xpZW50X2lkIiwiY2xpZW50X25hbWUiLCJjb252ZXJ0ZXJfdG9fYW1vdW50IiwiY29udmVydGVyX2Zyb21fZXJyb3IiLCJjb252ZXJ0ZXJfdG9fZXJyb3IiLCJyZXNldFRpbWVyIiwidmFsaWRhdGVGcm9tQW1vdW50IiwicGVyY2VudGFnZVNlbGVjdG9yU2VsZWN0aW9uU3RhdHVzIiwiY2FsY3VsYXRlUGVyY2VudGFnZSIsInNldENvbnZlcnRlclRvRXJyb3IiLCJnZXRFeGNoYW5nZVJhdGUiLCJyYXRlIiwidmFsaWRhdGVUb0Ftb3VudCIsInJlc2V0Q29udmVydGVyIiwic2VsZWN0ZWRfZnJvbV9jdXJyZW5jeSIsInNlbGVjdGVkX3RvX2N1cnJlbmN5IiwidmFsaWRhdGVUcmFuc2ZlckZyb21BbW91bnQiLCJvbkNoYW5nZUNvbnZlcnRlckZyb21BbW91bnQiLCJ2YWxpZGF0ZVdpdGhkcmF3RnJvbUFtb3VudCIsImN1cnJlbnRfZmlhdF9jdXJyZW5jeSIsInZhbGlkYXRlVHJhbnNmZXJUb0Ftb3VudCIsInZhbGlkYXRlV2l0aGRyYXdUb0Ftb3VudCIsIndlYnNpdGVfc3RhdHVzIiwibWluX3dpdGhkcmF3X2Ftb3VudCIsImNyeXB0b19jb25maWciLCJtaW5pbXVtX3dpdGhkcmF3YWwiLCJ0cmFuc2Zlcl90byIsInBheW1lbnRBZ2VudFRyYW5zZmVyIiwicGF5bWVudGFnZW50X3RyYW5zZmVyIiwic2V0Q29uZmlybWF0aW9uUGF5bWVudEFnZW50VHJhbnNmZXIiLCJjbGllbnRfdG9fZnVsbF9uYW1lIiwic2V0SXNUcnlUcmFuc2ZlclN1Y2Nlc3NmdWwiLCJyZXNldFBheW1lbnRBZ2VudFRyYW5zZmVyIiwic2V0UmVjZWlwdFBheW1lbnRBZ2VudFRyYW5zZmVyIiwic2V0SXNUcmFuc2ZlclN1Y2Nlc3NmdWwiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Stores/Cashier/cashier-store.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanM/NzBkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9hZDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_567500__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_567500__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_567500__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_567500__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_567500__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_567500__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_567500__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => (value);\n/******/ \t\t\t__nested_webpack_require_567500__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_567500__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_567500__.o(definition, key) && !__nested_webpack_require_567500__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_567500__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_567500__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_567500__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_567500__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_567500__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"cashier/js/cashier.\" + chunkId + \".\" + \"a007a79dd7345a890a13\" + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_567500__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_567500__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/cashier:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_567500__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_567500__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_567500__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\t;\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_567500__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_567500__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"cashier-store\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_567500__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_567500__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_567500__.p + __nested_webpack_require_567500__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_567500__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_567500__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else {}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\tif(__nested_webpack_require_567500__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t__nested_webpack_require_567500__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(runtime) var result = runtime(__nested_webpack_require_567500__);\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_567500__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cashier\"] = self[\"webpackChunk_deriv_cashier\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_567500__(\"./Stores/Cashier/cashier-store.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../cashier/dist/cashier/js/cashier-store.js\n");

/***/ })

}]);